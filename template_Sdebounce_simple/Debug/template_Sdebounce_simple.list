
template_Sdebounce_simple.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c34  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  08002dc4  08002dc4  00012dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f58  08002f58  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08002f58  08002f58  00012f58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002f60  08002f60  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f60  08002f60  00012f60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f64  08002f64  00012f64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08002f68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000028c  20000074  08002fdc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000300  08002fdc  00020300  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010071  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003677  00000000  00000000  00030115  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000055ed  00000000  00000000  0003378c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000718  00000000  00000000  00038d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000016b8  00000000  00000000  00039498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002403d  00000000  00000000  0003ab50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e3d0  00000000  00000000  0005eb8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5168  00000000  00000000  0006cf5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001420c5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000192c  00000000  00000000  00142118  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002dac 	.word	0x08002dac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08002dac 	.word	0x08002dac

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <arm_float_to_q15>:
  /*loop Unrolling */
  blkCnt = blockSize >> 2u;

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
 8000568:	ea5f 0c92 	movs.w	ip, r2, lsr #2
{
 800056c:	b4f0      	push	{r4, r5, r6, r7}
  while(blkCnt > 0u)
 800056e:	d036      	beq.n	80005de <arm_float_to_q15+0x76>
 8000570:	f100 0410 	add.w	r4, r0, #16
 8000574:	f101 0308 	add.w	r3, r1, #8
 8000578:	4667      	mov	r7, ip

#else

    /* C = A * 32768 */
    /* convert from float to q15 and then store the results in the destination buffer */
    *pDst++ = (q15_t) __SSAT((q31_t) (*pIn++ * 32768.0f), 16);
 800057a:	ed14 6a04 	vldr	s12, [r4, #-16]
    *pDst++ = (q15_t) __SSAT((q31_t) (*pIn++ * 32768.0f), 16);
 800057e:	ed54 6a03 	vldr	s13, [r4, #-12]
    *pDst++ = (q15_t) __SSAT((q31_t) (*pIn++ * 32768.0f), 16);
 8000582:	ed14 7a02 	vldr	s14, [r4, #-8]
    *pDst++ = (q15_t) __SSAT((q31_t) (*pIn++ * 32768.0f), 16);
 8000586:	ed54 7a01 	vldr	s15, [r4, #-4]
    *pDst++ = (q15_t) __SSAT((q31_t) (*pIn++ * 32768.0f), 16);
 800058a:	eebe 6ae8 	vcvt.s32.f32	s12, s12, #15
    *pDst++ = (q15_t) __SSAT((q31_t) (*pIn++ * 32768.0f), 16);
 800058e:	eefe 6ae8 	vcvt.s32.f32	s13, s13, #15
    *pDst++ = (q15_t) __SSAT((q31_t) (*pIn++ * 32768.0f), 16);
 8000592:	eebe 7ae8 	vcvt.s32.f32	s14, s14, #15
    *pDst++ = (q15_t) __SSAT((q31_t) (*pIn++ * 32768.0f), 16);
 8000596:	eefe 7ae8 	vcvt.s32.f32	s15, s15, #15
  while(blkCnt > 0u)
 800059a:	3f01      	subs	r7, #1
    *pDst++ = (q15_t) __SSAT((q31_t) (*pIn++ * 32768.0f), 16);
 800059c:	ee16 5a10 	vmov	r5, s12
 80005a0:	f305 060f 	ssat	r6, #16, r5
 80005a4:	f104 0410 	add.w	r4, r4, #16
    *pDst++ = (q15_t) __SSAT((q31_t) (*pIn++ * 32768.0f), 16);
 80005a8:	ee16 5a90 	vmov	r5, s13
 80005ac:	f305 050f 	ssat	r5, #16, r5
    *pDst++ = (q15_t) __SSAT((q31_t) (*pIn++ * 32768.0f), 16);
 80005b0:	f823 6c08 	strh.w	r6, [r3, #-8]
    *pDst++ = (q15_t) __SSAT((q31_t) (*pIn++ * 32768.0f), 16);
 80005b4:	f823 5c06 	strh.w	r5, [r3, #-6]
    *pDst++ = (q15_t) __SSAT((q31_t) (*pIn++ * 32768.0f), 16);
 80005b8:	ee17 5a10 	vmov	r5, s14
 80005bc:	f305 050f 	ssat	r5, #16, r5
 80005c0:	f103 0308 	add.w	r3, r3, #8
 80005c4:	f823 5c0c 	strh.w	r5, [r3, #-12]
    *pDst++ = (q15_t) __SSAT((q31_t) (*pIn++ * 32768.0f), 16);
 80005c8:	ee17 5a90 	vmov	r5, s15
 80005cc:	f305 050f 	ssat	r5, #16, r5
 80005d0:	f823 5c0a 	strh.w	r5, [r3, #-10]
  while(blkCnt > 0u)
 80005d4:	d1d1      	bne.n	800057a <arm_float_to_q15+0x12>
 80005d6:	eb01 01cc 	add.w	r1, r1, ip, lsl #3
 80005da:	eb00 100c 	add.w	r0, r0, ip, lsl #4

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4u;

  while(blkCnt > 0u)
 80005de:	f012 0203 	ands.w	r2, r2, #3
 80005e2:	d00d      	beq.n	8000600 <arm_float_to_q15+0x98>
 80005e4:	eb01 0242 	add.w	r2, r1, r2, lsl #1

#else

    /* C = A * 32768 */
    /* convert from float to q15 and then store the results in the destination buffer */
    *pDst++ = (q15_t) __SSAT((q31_t) (*pIn++ * 32768.0f), 16);
 80005e8:	ecf0 7a01 	vldmia	r0!, {s15}
 80005ec:	eefe 7ae8 	vcvt.s32.f32	s15, s15, #15
 80005f0:	ee17 3a90 	vmov	r3, s15
 80005f4:	f303 030f 	ssat	r3, #16, r3
 80005f8:	f821 3b02 	strh.w	r3, [r1], #2
  while(blkCnt > 0u)
 80005fc:	4291      	cmp	r1, r2
 80005fe:	d1f3      	bne.n	80005e8 <arm_float_to_q15+0x80>
    blkCnt--;
  }

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

}
 8000600:	bcf0      	pop	{r4, r5, r6, r7}
 8000602:	4770      	bx	lr

08000604 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000604:	b5f0      	push	{r4, r5, r6, r7, lr}

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000606:	2500      	movs	r5, #0
{
 8000608:	b08f      	sub	sp, #60	; 0x3c
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800060a:	e9cd 5506 	strd	r5, r5, [sp, #24]
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800060e:	4b43      	ldr	r3, [pc, #268]	; (800071c <MX_GPIO_Init+0x118>)
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000610:	950d      	str	r5, [sp, #52]	; 0x34
 8000612:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000614:	4f42      	ldr	r7, [pc, #264]	; (8000720 <MX_GPIO_Init+0x11c>)
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000616:	4e43      	ldr	r6, [pc, #268]	; (8000724 <MX_GPIO_Init+0x120>)
 8000618:	f042 0210 	orr.w	r2, r2, #16
 800061c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800061e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000620:	f002 0210 	and.w	r2, r2, #16
 8000624:	9205      	str	r2, [sp, #20]
  (void)tmpreg;
 8000626:	9a05      	ldr	r2, [sp, #20]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000628:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800062a:	f042 0204 	orr.w	r2, r2, #4
 800062e:	631a      	str	r2, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000630:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000632:	f002 0204 	and.w	r2, r2, #4
 8000636:	9204      	str	r2, [sp, #16]
  (void)tmpreg;
 8000638:	9a04      	ldr	r2, [sp, #16]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800063a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800063c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000640:	631a      	str	r2, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000642:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000644:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000648:	9203      	str	r2, [sp, #12]
  (void)tmpreg;
 800064a:	9a03      	ldr	r2, [sp, #12]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800064c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800064e:	f042 0201 	orr.w	r2, r2, #1
 8000652:	631a      	str	r2, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000654:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000656:	f002 0201 	and.w	r2, r2, #1
 800065a:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 800065c:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800065e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000660:	f042 0208 	orr.w	r2, r2, #8
 8000664:	631a      	str	r2, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000668:	f003 0308 	and.w	r3, r3, #8
 800066c:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800066e:	9901      	ldr	r1, [sp, #4]
 8000670:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000674:	2308      	movs	r3, #8
  /**/
  LL_GPIO_ResetOutputPin(GPIOD, GREEN_LED_Pin|ORANGE_LED_Pin|RED_LED_Pin|BLUE_LED_Pin);

  /**/
  GPIO_InitStruct.Pin = SPI_CS_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000676:	2401      	movs	r4, #1
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_MEDIUM;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8000678:	a908      	add	r1, sp, #32
 800067a:	4638      	mov	r0, r7
 800067c:	61bb      	str	r3, [r7, #24]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800067e:	61b2      	str	r2, [r6, #24]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000680:	e9cd 3408 	strd	r3, r4, [sp, #32]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000684:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000688:	950c      	str	r5, [sp, #48]	; 0x30
  LL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 800068a:	f001 f891 	bl	80017b0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = GREEN_LED_Pin|ORANGE_LED_Pin|RED_LED_Pin|BLUE_LED_Pin;
 800068e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000692:	a908      	add	r1, sp, #32
 8000694:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GREEN_LED_Pin|ORANGE_LED_Pin|RED_LED_Pin|BLUE_LED_Pin;
 8000696:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000698:	e9cd 4509 	strd	r4, r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800069c:	e9cd 550b 	strd	r5, r5, [sp, #44]	; 0x2c

  /**/
  GPIO_InitStruct.Pin = INT_1_Pin|INT_2_Pin;
 80006a0:	2603      	movs	r6, #3
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006a2:	f001 f885 	bl	80017b0 <LL_GPIO_Init>
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006a6:	a908      	add	r1, sp, #32
 80006a8:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80006aa:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80006ac:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = INT_1_Pin|INT_2_Pin;
 80006ae:	9608      	str	r6, [sp, #32]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006b0:	f001 f87e 	bl	80017b0 <LL_GPIO_Init>
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 80006b4:	4a1c      	ldr	r2, [pc, #112]	; (8000728 <MX_GPIO_Init+0x124>)
 80006b6:	6893      	ldr	r3, [r2, #8]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80006b8:	210f      	movs	r1, #15
 80006ba:	f023 030f 	bic.w	r3, r3, #15
 80006be:	fa91 f1a1 	rbit	r1, r1
 80006c2:	6093      	str	r3, [r2, #8]
  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
  EXTI_InitStruct.LineCommand = ENABLE;
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
  LL_EXTI_Init(&EXTI_InitStruct);
 80006c4:	a806      	add	r0, sp, #24
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 80006c6:	9406      	str	r4, [sp, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 80006c8:	f8ad 401c 	strh.w	r4, [sp, #28]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80006cc:	f88d 401e 	strb.w	r4, [sp, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 80006d0:	f001 f810 	bl	80016f4 <LL_EXTI_Init>
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80006d4:	4a15      	ldr	r2, [pc, #84]	; (800072c <MX_GPIO_Init+0x128>)
 80006d6:	68d1      	ldr	r1, [r2, #12]
 80006d8:	fa94 f3a4 	rbit	r3, r4
 80006dc:	fab3 f383 	clz	r3, r3
 80006e0:	fa94 f0a4 	rbit	r0, r4
 80006e4:	40a3      	lsls	r3, r4
 80006e6:	fab0 f080 	clz	r0, r0
 80006ea:	40a0      	lsls	r0, r4
 80006ec:	fa06 f303 	lsl.w	r3, r6, r3
 80006f0:	2502      	movs	r5, #2
 80006f2:	ea21 0303 	bic.w	r3, r1, r3
 80006f6:	fa05 f000 	lsl.w	r0, r5, r0
 80006fa:	4303      	orrs	r3, r0
 80006fc:	60d3      	str	r3, [r2, #12]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80006fe:	6811      	ldr	r1, [r2, #0]
 8000700:	fa94 f3a4 	rbit	r3, r4
 8000704:	fab3 f383 	clz	r3, r3
 8000708:	40a3      	lsls	r3, r4
 800070a:	409e      	lsls	r6, r3
 800070c:	ea21 0606 	bic.w	r6, r1, r6
 8000710:	fa94 f4a4 	rbit	r4, r4
 8000714:	6016      	str	r6, [r2, #0]
  LL_GPIO_SetPinPull(BUTTON_BLUE_GPIO_Port, BUTTON_BLUE_Pin, LL_GPIO_PULL_DOWN);

  /**/
  LL_GPIO_SetPinMode(BUTTON_BLUE_GPIO_Port, BUTTON_BLUE_Pin, LL_GPIO_MODE_INPUT);

}
 8000716:	b00f      	add	sp, #60	; 0x3c
 8000718:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800071a:	bf00      	nop
 800071c:	40023800 	.word	0x40023800
 8000720:	40021000 	.word	0x40021000
 8000724:	40020c00 	.word	0x40020c00
 8000728:	40013800 	.word	0x40013800
 800072c:	40020000 	.word	0x40020000

08000730 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000730:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000732:	2300      	movs	r3, #0
{
 8000734:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000736:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 800073a:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800073e:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8000742:	e9cd 3306 	strd	r3, r3, [sp, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000746:	4921      	ldr	r1, [pc, #132]	; (80007cc <SystemClock_Config+0x9c>)
 8000748:	9301      	str	r3, [sp, #4]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800074a:	9303      	str	r3, [sp, #12]
  __HAL_RCC_PWR_CLK_ENABLE();
 800074c:	6c08      	ldr	r0, [r1, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800074e:	4a20      	ldr	r2, [pc, #128]	; (80007d0 <SystemClock_Config+0xa0>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000750:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 8000754:	6408      	str	r0, [r1, #64]	; 0x40
 8000756:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000758:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 800075c:	9101      	str	r1, [sp, #4]
 800075e:	9901      	ldr	r1, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000760:	9302      	str	r3, [sp, #8]
 8000762:	6813      	ldr	r3, [r2, #0]
 8000764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000768:	6013      	str	r3, [r2, #0]
 800076a:	6813      	ldr	r3, [r2, #0]
 800076c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000770:	9302      	str	r3, [sp, #8]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000772:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000774:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000778:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800077c:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLM = 8;
 800077e:	2108      	movs	r1, #8
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000780:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000782:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000784:	f44f 72a8 	mov.w	r2, #336	; 0x150
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000788:	2304      	movs	r3, #4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800078a:	900f      	str	r0, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800078c:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLN = 336;
 800078e:	e9cd 1210 	strd	r1, r2, [sp, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000792:	9d02      	ldr	r5, [sp, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000794:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000796:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000798:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800079a:	f000 fcf1 	bl	8001180 <HAL_RCC_OscConfig>
 800079e:	b108      	cbz	r0, 80007a4 <SystemClock_Config+0x74>
  __ASM volatile ("cpsid i" : : : "memory");
 80007a0:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007a2:	e7fe      	b.n	80007a2 <SystemClock_Config+0x72>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a4:	4603      	mov	r3, r0
 80007a6:	260f      	movs	r6, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007a8:	f44f 55a0 	mov.w	r5, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007b0:	a803      	add	r0, sp, #12
 80007b2:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007b4:	e9cd 5206 	strd	r5, r2, [sp, #24]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b8:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ba:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007bc:	9603      	str	r6, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007be:	f000 fefb 	bl	80015b8 <HAL_RCC_ClockConfig>
 80007c2:	b108      	cbz	r0, 80007c8 <SystemClock_Config+0x98>
 80007c4:	b672      	cpsid	i
  while (1)
 80007c6:	e7fe      	b.n	80007c6 <SystemClock_Config+0x96>
}
 80007c8:	b014      	add	sp, #80	; 0x50
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	40023800 	.word	0x40023800
 80007d0:	40007000 	.word	0x40007000

080007d4 <main>:
{
 80007d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	arm_float_to_q15((float32_t *)&FFT_Input_Q15_f[0], (q15_t *)&aFFT_Input_Q15[0], FFT_Length*2);
 80007d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
{
 80007dc:	b083      	sub	sp, #12
	arm_float_to_q15((float32_t *)&FFT_Input_Q15_f[0], (q15_t *)&aFFT_Input_Q15[0], FFT_Length*2);
 80007de:	497f      	ldr	r1, [pc, #508]	; (80009dc <main+0x208>)
 80007e0:	487f      	ldr	r0, [pc, #508]	; (80009e0 <main+0x20c>)
 80007e2:	f7ff fec1 	bl	8000568 <arm_float_to_q15>
  HAL_Init();
 80007e6:	f000 fc39 	bl	800105c <HAL_Init>
  SystemClock_Config();
 80007ea:	f7ff ffa1 	bl	8000730 <SystemClock_Config>
  MX_GPIO_Init();
 80007ee:	f7ff ff09 	bl	8000604 <MX_GPIO_Init>
  MX_TIM3_Init();
 80007f2:	f000 fb41 	bl	8000e78 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80007f6:	f000 fb89 	bl	8000f0c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80007fa:	f000 f92d 	bl	8000a58 <MX_SPI1_Init>
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007fe:	4b79      	ldr	r3, [pc, #484]	; (80009e4 <main+0x210>)
 8000800:	4a79      	ldr	r2, [pc, #484]	; (80009e8 <main+0x214>)
 8000802:	6818      	ldr	r0, [r3, #0]
 8000804:	7812      	ldrb	r2, [r2, #0]
 8000806:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800080a:	fbb3 f3f2 	udiv	r3, r3, r2
 800080e:	fbb0 f0f3 	udiv	r0, r0, r3
 8000812:	f000 fc9b 	bl	800114c <HAL_SYSTICK_Config>
 8000816:	b118      	cbz	r0, 8000820 <main+0x4c>
}
 8000818:	2001      	movs	r0, #1
 800081a:	b003      	add	sp, #12
 800081c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8000820:	4a72      	ldr	r2, [pc, #456]	; (80009ec <main+0x218>)
 8000822:	4c73      	ldr	r4, [pc, #460]	; (80009f0 <main+0x21c>)
 8000824:	68d1      	ldr	r1, [r2, #12]
 8000826:	4d73      	ldr	r5, [pc, #460]	; (80009f4 <main+0x220>)
 8000828:	f8df 9210 	ldr.w	r9, [pc, #528]	; 8000a3c <main+0x268>
 800082c:	4f72      	ldr	r7, [pc, #456]	; (80009f8 <main+0x224>)
 800082e:	4e73      	ldr	r6, [pc, #460]	; (80009fc <main+0x228>)
 8000830:	f041 0120 	orr.w	r1, r1, #32
 8000834:	60d1      	str	r1, [r2, #12]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000836:	68d1      	ldr	r1, [r2, #12]
 8000838:	4603      	mov	r3, r0
 800083a:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 800083e:	4870      	ldr	r0, [pc, #448]	; (8000a00 <main+0x22c>)
 8000840:	60d1      	str	r1, [r2, #12]
 8000842:	6802      	ldr	r2, [r0, #0]
 8000844:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000848:	6002      	str	r2, [r0, #0]
	AccInitStruct.Output_DataRate = LIS3DSH_DATARATE_25;
 800084a:	f44f 62e8 	mov.w	r2, #1856	; 0x740
	LIS3DSH_Init(&AccInitStruct);
 800084e:	4668      	mov	r0, sp
	AccInitStruct.Full_Scale = LIS3DSH_FULLSCALE_2;
 8000850:	f8ad 3004 	strh.w	r3, [sp, #4]
	AccInitStruct.Output_DataRate = LIS3DSH_DATARATE_25;
 8000854:	9200      	str	r2, [sp, #0]
	LIS3DSH_Init(&AccInitStruct);
 8000856:	f000 f9b1 	bl	8000bbc <LIS3DSH_Init>
    printf(" Hello! Type s to start/stop streaming...\r\n");
 800085a:	486a      	ldr	r0, [pc, #424]	; (8000a04 <main+0x230>)
 800085c:	f001 fb60 	bl	8001f20 <puts>
 8000860:	4b69      	ldr	r3, [pc, #420]	; (8000a08 <main+0x234>)
 8000862:	f103 0896 	add.w	r8, r3, #150	; 0x96
 8000866:	4b69      	ldr	r3, [pc, #420]	; (8000a0c <main+0x238>)
 8000868:	f103 0a0c 	add.w	sl, r3, #12
	  if (dataReceived)
 800086c:	7823      	ldrb	r3, [r4, #0]
 800086e:	b9bb      	cbnz	r3, 80008a0 <main+0xcc>
 8000870:	782b      	ldrb	r3, [r5, #0]
	  	  if (streamActive)
 8000872:	2b00      	cmp	r3, #0
 8000874:	d0fa      	beq.n	800086c <main+0x98>
	  		  if (dataReady) {
 8000876:	783b      	ldrb	r3, [r7, #0]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d0f7      	beq.n	800086c <main+0x98>
	  			  LIS3DSH_ReadACC(accData[idx++]);
 800087c:	8833      	ldrh	r3, [r6, #0]
 800087e:	4a62      	ldr	r2, [pc, #392]	; (8000a08 <main+0x234>)
 8000880:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 8000884:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8000888:	3301      	adds	r3, #1
 800088a:	8033      	strh	r3, [r6, #0]
 800088c:	f000 f9e0 	bl	8000c50 <LIS3DSH_ReadACC>
	  			  if (idx == SIZE)
 8000890:	8833      	ldrh	r3, [r6, #0]
 8000892:	2b19      	cmp	r3, #25
 8000894:	d01e      	beq.n	80008d4 <main+0x100>
	  			  dataReady = 0;
 8000896:	2300      	movs	r3, #0
 8000898:	703b      	strb	r3, [r7, #0]
	  if (dataReceived)
 800089a:	7823      	ldrb	r3, [r4, #0]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d0e7      	beq.n	8000870 <main+0x9c>
	  		  if (chRX == 's') {
 80008a0:	f899 3000 	ldrb.w	r3, [r9]
 80008a4:	2b73      	cmp	r3, #115	; 0x73
 80008a6:	d006      	beq.n	80008b6 <main+0xe2>
	  			  printf("Wrong command\r\n");
 80008a8:	4859      	ldr	r0, [pc, #356]	; (8000a10 <main+0x23c>)
 80008aa:	f001 fb39 	bl	8001f20 <puts>
 80008ae:	782b      	ldrb	r3, [r5, #0]
	  		  dataReceived = 0;
 80008b0:	2200      	movs	r2, #0
 80008b2:	7022      	strb	r2, [r4, #0]
 80008b4:	e7dd      	b.n	8000872 <main+0x9e>
	  			  streamActive = 1 - streamActive;
 80008b6:	782b      	ldrb	r3, [r5, #0]
	  			  printf("Stream Toggle\r\n");
 80008b8:	4856      	ldr	r0, [pc, #344]	; (8000a14 <main+0x240>)
	  			  streamActive = 1 - streamActive;
 80008ba:	f1c3 0301 	rsb	r3, r3, #1
 80008be:	702b      	strb	r3, [r5, #0]
	  			  printf("Stream Toggle\r\n");
 80008c0:	f001 fb2e 	bl	8001f20 <puts>
	  			  if (streamActive) {
 80008c4:	782b      	ldrb	r3, [r5, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80008c6:	4a54      	ldr	r2, [pc, #336]	; (8000a18 <main+0x244>)
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d07c      	beq.n	80009c6 <main+0x1f2>
 80008cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008d0:	6191      	str	r1, [r2, #24]
}
 80008d2:	e7ed      	b.n	80008b0 <main+0xdc>
 80008d4:	f8df c168 	ldr.w	ip, [pc, #360]	; 8000a40 <main+0x26c>
 80008d8:	f8df b14c 	ldr.w	fp, [pc, #332]	; 8000a28 <main+0x254>
 80008dc:	f10c 0106 	add.w	r1, ip, #6
	  			  if (idx == SIZE)
 80008e0:	46e6      	mov	lr, ip
    	int16_t xmin = accData[0][d];
 80008e2:	4673      	mov	r3, lr
 80008e4:	f933 2d90 	ldrsh.w	r2, [r3, #-144]!
			if (accData[i][d] < xmin) xmin = accData[i][d];
 80008e8:	f933 0f06 	ldrsh.w	r0, [r3, #6]!
 80008ec:	4282      	cmp	r2, r0
 80008ee:	bfa8      	it	ge
 80008f0:	4602      	movge	r2, r0
    	for (uint16_t i = 1; i < SIZE; i++)
 80008f2:	459e      	cmp	lr, r3
 80008f4:	d1f8      	bne.n	80008e8 <main+0x114>
    	minData[d] = xmin;
 80008f6:	f10e 0e02 	add.w	lr, lr, #2
    for (uint8_t d = 0; d < 3; d++) // dimensions: x, y, z
 80008fa:	45c6      	cmp	lr, r8
    	minData[d] = xmin;
 80008fc:	f82b 2b02 	strh.w	r2, [fp], #2
    for (uint8_t d = 0; d < 3; d++) // dimensions: x, y, z
 8000900:	d1ef      	bne.n	80008e2 <main+0x10e>
 8000902:	f8df e134 	ldr.w	lr, [pc, #308]	; 8000a38 <main+0x264>
    	int16_t xmax = accData[0][d];
 8000906:	4663      	mov	r3, ip
 8000908:	f933 2d90 	ldrsh.w	r2, [r3, #-144]!
			if (accData[i][d] > xmax) xmax = accData[i][d];
 800090c:	f933 0f06 	ldrsh.w	r0, [r3, #6]!
 8000910:	4282      	cmp	r2, r0
 8000912:	bfb8      	it	lt
 8000914:	4602      	movlt	r2, r0
    	for (uint16_t i = 1; i < SIZE; i++)
 8000916:	459c      	cmp	ip, r3
 8000918:	d1f8      	bne.n	800090c <main+0x138>
    	maxData[d] = xmax;
 800091a:	f10c 0c02 	add.w	ip, ip, #2
    for (uint8_t d = 0; d < 3; d++) // dimensions: x, y, z
 800091e:	45c4      	cmp	ip, r8
    	maxData[d] = xmax;
 8000920:	f82e 2b02 	strh.w	r2, [lr], #2
    for (uint8_t d = 0; d < 3; d++) // dimensions: x, y, z
 8000924:	d1ef      	bne.n	8000906 <main+0x132>
 8000926:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8000a0c <main+0x238>
		for (uint16_t i = 0; i < SIZE; i++)
 800092a:	f1a1 0396 	sub.w	r3, r1, #150	; 0x96
		int32_t sum = 0.0;
 800092e:	2200      	movs	r2, #0
			sum += accData[i][d];
 8000930:	f933 0b06 	ldrsh.w	r0, [r3], #6
		for (uint16_t i = 0; i < SIZE; i++)
 8000934:	4299      	cmp	r1, r3
			sum += accData[i][d];
 8000936:	4402      	add	r2, r0
		for (uint16_t i = 0; i < SIZE; i++)
 8000938:	d1fa      	bne.n	8000930 <main+0x15c>
	    avgData[d] = sum / SIZE;
 800093a:	4b38      	ldr	r3, [pc, #224]	; (8000a1c <main+0x248>)
 800093c:	fb83 0302 	smull	r0, r3, r3, r2
 8000940:	17d2      	asrs	r2, r2, #31
 8000942:	ebc2 02e3 	rsb	r2, r2, r3, asr #3
 8000946:	f84c 2b04 	str.w	r2, [ip], #4
	for (uint8_t d = 0; d < 3; d++) // dimensions: x, y, z
 800094a:	45e2      	cmp	sl, ip
 800094c:	f101 0102 	add.w	r1, r1, #2
 8000950:	d1eb      	bne.n	800092a <main+0x156>
	  				  printf("\n\n\n");
 8000952:	4833      	ldr	r0, [pc, #204]	; (8000a20 <main+0x24c>)
 8000954:	f001 fae4 	bl	8001f20 <puts>
	  				  printf("MIN:\n");
 8000958:	4832      	ldr	r0, [pc, #200]	; (8000a24 <main+0x250>)
 800095a:	f001 fae1 	bl	8001f20 <puts>
	  				  printf("X: %4d\tY: %4d\tZ: %4d\r\n", minData[0], minData[1], minData[2]);
 800095e:	4b32      	ldr	r3, [pc, #200]	; (8000a28 <main+0x254>)
 8000960:	4832      	ldr	r0, [pc, #200]	; (8000a2c <main+0x258>)
 8000962:	461a      	mov	r2, r3
 8000964:	4611      	mov	r1, r2
 8000966:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800096a:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800096e:	f9b1 1000 	ldrsh.w	r1, [r1]
 8000972:	f001 fa4f 	bl	8001e14 <iprintf>
	  				  printf("AVG:\n");
 8000976:	482e      	ldr	r0, [pc, #184]	; (8000a30 <main+0x25c>)
 8000978:	f001 fad2 	bl	8001f20 <puts>
	  				  printf("X: %4d\tY: %4d\tZ: %4d\r\n", avgData[0], avgData[1], avgData[2]);
 800097c:	4b23      	ldr	r3, [pc, #140]	; (8000a0c <main+0x238>)
 800097e:	482b      	ldr	r0, [pc, #172]	; (8000a2c <main+0x258>)
 8000980:	461a      	mov	r2, r3
 8000982:	4611      	mov	r1, r2
 8000984:	689b      	ldr	r3, [r3, #8]
 8000986:	6852      	ldr	r2, [r2, #4]
 8000988:	6809      	ldr	r1, [r1, #0]
 800098a:	f001 fa43 	bl	8001e14 <iprintf>
	  				  printf("MAX:\n");
 800098e:	4829      	ldr	r0, [pc, #164]	; (8000a34 <main+0x260>)
 8000990:	f001 fac6 	bl	8001f20 <puts>
	  				  printf("X: %4d\tY: %4d\tZ: %4d\r\n", maxData[0], maxData[1], maxData[2]);
 8000994:	4b28      	ldr	r3, [pc, #160]	; (8000a38 <main+0x264>)
 8000996:	4825      	ldr	r0, [pc, #148]	; (8000a2c <main+0x258>)
 8000998:	461a      	mov	r2, r3
 800099a:	4611      	mov	r1, r2
 800099c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80009a0:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80009a4:	f9b1 1000 	ldrsh.w	r1, [r1]
 80009a8:	f001 fa34 	bl	8001e14 <iprintf>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  uint32_t odr = READ_REG(GPIOx->ODR);
 80009ac:	491a      	ldr	r1, [pc, #104]	; (8000a18 <main+0x244>)
 80009ae:	694b      	ldr	r3, [r1, #20]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 80009b0:	041a      	lsls	r2, r3, #16
 80009b2:	43db      	mvns	r3, r3
 80009b4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80009b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80009bc:	4313      	orrs	r3, r2
	  				  idx = 0;
 80009be:	2200      	movs	r2, #0
 80009c0:	618b      	str	r3, [r1, #24]
 80009c2:	8032      	strh	r2, [r6, #0]
 80009c4:	e767      	b.n	8000896 <main+0xc2>
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80009c6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
 80009ca:	6191      	str	r1, [r2, #24]
 80009cc:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 80009d0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80009d4:	6190      	str	r0, [r2, #24]
 80009d6:	6191      	str	r1, [r2, #24]
	  		  dataReceived = 0;
 80009d8:	7023      	strb	r3, [r4, #0]
	  	  if (streamActive)
 80009da:	e747      	b.n	800086c <main+0x98>
 80009dc:	200000b8 	.word	0x200000b8
 80009e0:	2000018c 	.word	0x2000018c
 80009e4:	20000004 	.word	0x20000004
 80009e8:	20000008 	.word	0x20000008
 80009ec:	40004400 	.word	0x40004400
 80009f0:	20000092 	.word	0x20000092
 80009f4:	20000096 	.word	0x20000096
 80009f8:	20000091 	.word	0x20000091
 80009fc:	20000094 	.word	0x20000094
 8000a00:	40013000 	.word	0x40013000
 8000a04:	08002dc4 	.word	0x08002dc4
 8000a08:	20000254 	.word	0x20000254
 8000a0c:	20000180 	.word	0x20000180
 8000a10:	08002e00 	.word	0x08002e00
 8000a14:	08002df0 	.word	0x08002df0
 8000a18:	40020c00 	.word	0x40020c00
 8000a1c:	51eb851f 	.word	0x51eb851f
 8000a20:	08002e10 	.word	0x08002e10
 8000a24:	08002e14 	.word	0x08002e14
 8000a28:	200000a8 	.word	0x200000a8
 8000a2c:	08002e1c 	.word	0x08002e1c
 8000a30:	08002e34 	.word	0x08002e34
 8000a34:	08002e3c 	.word	0x08002e3c
 8000a38:	200000b0 	.word	0x200000b0
 8000a3c:	20000090 	.word	0x20000090
 8000a40:	200002e4 	.word	0x200002e4

08000a44 <__io_putchar>:
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->DR = Value;
 8000a44:	4a03      	ldr	r2, [pc, #12]	; (8000a54 <__io_putchar+0x10>)
 8000a46:	b2c3      	uxtb	r3, r0
 8000a48:	6053      	str	r3, [r2, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8000a4a:	6813      	ldr	r3, [r2, #0]
  while (LL_USART_IsActiveFlag_TC(USART2) == 0)
 8000a4c:	065b      	lsls	r3, r3, #25
 8000a4e:	d5fc      	bpl.n	8000a4a <__io_putchar+0x6>
}
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	40004400 	.word	0x40004400

08000a58 <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000a58:	b530      	push	{r4, r5, lr}
 8000a5a:	b093      	sub	sp, #76	; 0x4c

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8000a5c:	a808      	add	r0, sp, #32
 8000a5e:	2228      	movs	r2, #40	; 0x28
 8000a60:	2100      	movs	r1, #0
 8000a62:	f001 f9cf 	bl	8001e04 <memset>
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000a66:	4b1f      	ldr	r3, [pc, #124]	; (8000ae4 <MX_SPI1_Init+0x8c>)
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_ENABLE;
  SPI_InitStruct.CRCPoly = 10;
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8000a68:	4d1f      	ldr	r5, [pc, #124]	; (8000ae8 <MX_SPI1_Init+0x90>)
 8000a6a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6c:	481f      	ldr	r0, [pc, #124]	; (8000aec <MX_SPI1_Init+0x94>)
 8000a6e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000a72:	645a      	str	r2, [r3, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000a74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000a76:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8000a7a:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8000a7c:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000a7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a80:	f042 0201 	orr.w	r2, r2, #1
 8000a84:	631a      	str	r2, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a88:	f003 0301 	and.w	r3, r3, #1
 8000a8c:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8000a8e:	21e0      	movs	r1, #224	; 0xe0
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000a90:	2302      	movs	r3, #2
  (void)tmpreg;
 8000a92:	9c00      	ldr	r4, [sp, #0]
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8000a94:	9102      	str	r1, [sp, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000a96:	2400      	movs	r4, #0
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000a98:	2203      	movs	r2, #3
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000a9a:	9303      	str	r3, [sp, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9c:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8000a9e:	2305      	movs	r3, #5
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000aa0:	e9cd 4405 	strd	r4, r4, [sp, #20]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa4:	9204      	str	r2, [sp, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8000aa6:	9307      	str	r3, [sp, #28]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa8:	f000 fe82 	bl	80017b0 <LL_GPIO_Init>
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8000aac:	f44f 7282 	mov.w	r2, #260	; 0x104
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8000ab0:	f44f 7300 	mov.w	r3, #512	; 0x200
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8000ab4:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8000ab8:	9408      	str	r4, [sp, #32]
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8000aba:	940c      	str	r4, [sp, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8000abc:	940f      	str	r4, [sp, #60]	; 0x3c
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8000abe:	9209      	str	r2, [sp, #36]	; 0x24
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8000ac0:	930d      	str	r3, [sp, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_ENABLE;
 8000ac2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  SPI_InitStruct.CRCPoly = 10;
 8000ac6:	230a      	movs	r3, #10
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8000ac8:	a908      	add	r1, sp, #32
 8000aca:	4628      	mov	r0, r5
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 8000acc:	2408      	movs	r4, #8
  SPI_InitStruct.CRCPoly = 10;
 8000ace:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 8000ad2:	940e      	str	r4, [sp, #56]	; 0x38
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8000ad4:	f000 ff62 	bl	800199c <LL_SPI_Init>
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8000ad8:	686b      	ldr	r3, [r5, #4]
 8000ada:	f023 0310 	bic.w	r3, r3, #16
 8000ade:	606b      	str	r3, [r5, #4]
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ae0:	b013      	add	sp, #76	; 0x4c
 8000ae2:	bd30      	pop	{r4, r5, pc}
 8000ae4:	40023800 	.word	0x40023800
 8000ae8:	40013000 	.word	0x40013000
 8000aec:	40020000 	.word	0x40020000

08000af0 <LIS3DSH_SendByte>:
  * @retval The received byte value
  */
static uint8_t LIS3DSH_SendByte(uint8_t byte)
{
	/* Loop while DR register in not emplty */
	LIS3DSHTimeout = LIS3DSH_FLAG_TIMEOUT;
 8000af0:	4a1c      	ldr	r2, [pc, #112]	; (8000b64 <LIS3DSH_SendByte+0x74>)
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8000af2:	4b1d      	ldr	r3, [pc, #116]	; (8000b68 <LIS3DSH_SendByte+0x78>)
 8000af4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000af8:	6011      	str	r1, [r2, #0]
 8000afa:	6899      	ldr	r1, [r3, #8]
 8000afc:	0789      	lsls	r1, r1, #30
 8000afe:	d511      	bpl.n	8000b24 <LIS3DSH_SendByte+0x34>
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
  *spidr = TxData;
 8000b00:	7318      	strb	r0, [r3, #12]

	/* Send a Byte through the SPI peripheral */
	LL_SPI_TransmitData8(LIS3DSH_SPI, byte);

	/* Wait to receive a Byte */
	LIS3DSHTimeout = LIS3DSH_FLAG_TIMEOUT;
 8000b02:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8000b06:	4818      	ldr	r0, [pc, #96]	; (8000b68 <LIS3DSH_SendByte+0x78>)
 8000b08:	6011      	str	r1, [r2, #0]
 8000b0a:	6883      	ldr	r3, [r0, #8]
	while (LL_SPI_IsActiveFlag_RXNE(LIS3DSH_SPI) == RESET)
 8000b0c:	07db      	lsls	r3, r3, #31
 8000b0e:	d406      	bmi.n	8000b1e <LIS3DSH_SendByte+0x2e>
	{
	if((LIS3DSHTimeout--) == 0) return 0;
 8000b10:	6813      	ldr	r3, [r2, #0]
 8000b12:	1e59      	subs	r1, r3, #1
 8000b14:	6011      	str	r1, [r2, #0]
 8000b16:	b31b      	cbz	r3, 8000b60 <LIS3DSH_SendByte+0x70>
 8000b18:	6883      	ldr	r3, [r0, #8]
	while (LL_SPI_IsActiveFlag_RXNE(LIS3DSH_SPI) == RESET)
 8000b1a:	07db      	lsls	r3, r3, #31
 8000b1c:	d5f8      	bpl.n	8000b10 <LIS3DSH_SendByte+0x20>
  return (uint8_t)(READ_REG(SPIx->DR));
 8000b1e:	68c0      	ldr	r0, [r0, #12]
 8000b20:	b2c0      	uxtb	r0, r0
	}

	/* Return the Byte read from the SPI bus */
	return (uint8_t)LL_SPI_ReceiveData8(LIS3DSH_SPI);
 8000b22:	4770      	bx	lr
{
 8000b24:	b410      	push	{r4}
	if((LIS3DSHTimeout--) == 0) return 0;
 8000b26:	6811      	ldr	r1, [r2, #0]
 8000b28:	1e4c      	subs	r4, r1, #1
 8000b2a:	6014      	str	r4, [r2, #0]
 8000b2c:	b1a1      	cbz	r1, 8000b58 <LIS3DSH_SendByte+0x68>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8000b2e:	6899      	ldr	r1, [r3, #8]
 8000b30:	0789      	lsls	r1, r1, #30
 8000b32:	d5f8      	bpl.n	8000b26 <LIS3DSH_SendByte+0x36>
	LIS3DSHTimeout = LIS3DSH_FLAG_TIMEOUT;
 8000b34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  *spidr = TxData;
 8000b38:	7318      	strb	r0, [r3, #12]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8000b3a:	480b      	ldr	r0, [pc, #44]	; (8000b68 <LIS3DSH_SendByte+0x78>)
 8000b3c:	6011      	str	r1, [r2, #0]
static uint8_t LIS3DSH_SendByte(uint8_t byte)
 8000b3e:	e003      	b.n	8000b48 <LIS3DSH_SendByte+0x58>
	if((LIS3DSHTimeout--) == 0) return 0;
 8000b40:	6813      	ldr	r3, [r2, #0]
 8000b42:	1e59      	subs	r1, r3, #1
 8000b44:	6011      	str	r1, [r2, #0]
 8000b46:	b13b      	cbz	r3, 8000b58 <LIS3DSH_SendByte+0x68>
 8000b48:	6883      	ldr	r3, [r0, #8]
	while (LL_SPI_IsActiveFlag_RXNE(LIS3DSH_SPI) == RESET)
 8000b4a:	07dc      	lsls	r4, r3, #31
 8000b4c:	d5f8      	bpl.n	8000b40 <LIS3DSH_SendByte+0x50>
  return (uint8_t)(READ_REG(SPIx->DR));
 8000b4e:	68c0      	ldr	r0, [r0, #12]
}
 8000b50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000b54:	b2c0      	uxtb	r0, r0
 8000b56:	4770      	bx	lr
	if((LIS3DSHTimeout--) == 0) return 0;
 8000b58:	2000      	movs	r0, #0
}
 8000b5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000b5e:	4770      	bx	lr
	if((LIS3DSHTimeout--) == 0) return 0;
 8000b60:	2000      	movs	r0, #0
}
 8000b62:	4770      	bx	lr
 8000b64:	20000000 	.word	0x20000000
 8000b68:	40013000 	.word	0x40013000

08000b6c <LIS3DSH_Write>:
  if(NumByteToWrite > 0x01)
 8000b6c:	2a01      	cmp	r2, #1
{
 8000b6e:	b538      	push	{r3, r4, r5, lr}
 8000b70:	4615      	mov	r5, r2
 8000b72:	4b11      	ldr	r3, [pc, #68]	; (8000bb8 <LIS3DSH_Write+0x4c>)
 8000b74:	4604      	mov	r4, r0
 8000b76:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  if(NumByteToWrite > 0x01)
 8000b7a:	d912      	bls.n	8000ba2 <LIS3DSH_Write+0x36>
  LIS3DSH_SendByte(WriteAddr);
 8000b7c:	f041 0040 	orr.w	r0, r1, #64	; 0x40
 8000b80:	619a      	str	r2, [r3, #24]
 8000b82:	f7ff ffb5 	bl	8000af0 <LIS3DSH_SendByte>
  while(NumByteToWrite >= 0x01)
 8000b86:	3d01      	subs	r5, #1
 8000b88:	b2ad      	uxth	r5, r5
 8000b8a:	3501      	adds	r5, #1
 8000b8c:	4425      	add	r5, r4
	  LIS3DSH_SendByte(*pBuffer);
 8000b8e:	f814 0b01 	ldrb.w	r0, [r4], #1
 8000b92:	f7ff ffad 	bl	8000af0 <LIS3DSH_SendByte>
  while(NumByteToWrite >= 0x01)
 8000b96:	42a5      	cmp	r5, r4
 8000b98:	d1f9      	bne.n	8000b8e <LIS3DSH_Write+0x22>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000b9a:	4b07      	ldr	r3, [pc, #28]	; (8000bb8 <LIS3DSH_Write+0x4c>)
 8000b9c:	2208      	movs	r2, #8
 8000b9e:	619a      	str	r2, [r3, #24]
}
 8000ba0:	bd38      	pop	{r3, r4, r5, pc}
  LIS3DSH_SendByte(WriteAddr);
 8000ba2:	4608      	mov	r0, r1
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000ba4:	619a      	str	r2, [r3, #24]
 8000ba6:	f7ff ffa3 	bl	8000af0 <LIS3DSH_SendByte>
  while(NumByteToWrite >= 0x01)
 8000baa:	2d00      	cmp	r5, #0
 8000bac:	d1eb      	bne.n	8000b86 <LIS3DSH_Write+0x1a>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000bae:	4b02      	ldr	r3, [pc, #8]	; (8000bb8 <LIS3DSH_Write+0x4c>)
 8000bb0:	2208      	movs	r2, #8
 8000bb2:	619a      	str	r2, [r3, #24]
}
 8000bb4:	bd38      	pop	{r3, r4, r5, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40021000 	.word	0x40021000

08000bbc <LIS3DSH_Init>:
{
 8000bbc:	b510      	push	{r4, lr}
  ctrl = (uint8_t) (InitStruct->Output_DataRate | InitStruct->Axes_Enable);
 8000bbe:	7842      	ldrb	r2, [r0, #1]
 8000bc0:	7803      	ldrb	r3, [r0, #0]
{
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	4604      	mov	r4, r0
  ctrl = (uint8_t) (InitStruct->Output_DataRate | InitStruct->Axes_Enable);
 8000bc6:	4313      	orrs	r3, r2
  LIS3DSH_Write(&ctrl, LIS3DSH_CTRL_REG4_ADDR, 1);
 8000bc8:	f10d 0007 	add.w	r0, sp, #7
 8000bcc:	2201      	movs	r2, #1
 8000bce:	2120      	movs	r1, #32
  ctrl = (uint8_t) (InitStruct->Output_DataRate | InitStruct->Axes_Enable);
 8000bd0:	f88d 3007 	strb.w	r3, [sp, #7]
  LIS3DSH_Write(&ctrl, LIS3DSH_CTRL_REG4_ADDR, 1);
 8000bd4:	f7ff ffca 	bl	8000b6c <LIS3DSH_Write>
  ctrl = (uint8_t) (InitStruct->SPI_Wire | InitStruct->Self_Test | InitStruct->Full_Scale | InitStruct->Filter_BW);
 8000bd8:	78e0      	ldrb	r0, [r4, #3]
 8000bda:	78a3      	ldrb	r3, [r4, #2]
 8000bdc:	7921      	ldrb	r1, [r4, #4]
 8000bde:	7962      	ldrb	r2, [r4, #5]
 8000be0:	4303      	orrs	r3, r0
 8000be2:	430b      	orrs	r3, r1
 8000be4:	4313      	orrs	r3, r2
  LIS3DSH_Write(&ctrl, LIS3DSH_CTRL_REG5_ADDR, 1);
 8000be6:	f10d 0007 	add.w	r0, sp, #7
 8000bea:	2201      	movs	r2, #1
 8000bec:	2124      	movs	r1, #36	; 0x24
  ctrl = (uint8_t) (InitStruct->SPI_Wire | InitStruct->Self_Test | InitStruct->Full_Scale | InitStruct->Filter_BW);
 8000bee:	f88d 3007 	strb.w	r3, [sp, #7]
  LIS3DSH_Write(&ctrl, LIS3DSH_CTRL_REG5_ADDR, 1);
 8000bf2:	f7ff ffbb 	bl	8000b6c <LIS3DSH_Write>
}
 8000bf6:	b002      	add	sp, #8
 8000bf8:	bd10      	pop	{r4, pc}
 8000bfa:	bf00      	nop

08000bfc <LIS3DSH_Read>:
  if(NumByteToRead > 0x01)
 8000bfc:	2a01      	cmp	r2, #1
{
 8000bfe:	b538      	push	{r3, r4, r5, lr}
 8000c00:	4615      	mov	r5, r2
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000c02:	4b12      	ldr	r3, [pc, #72]	; (8000c4c <LIS3DSH_Read+0x50>)
 8000c04:	4604      	mov	r4, r0
 8000c06:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  if(NumByteToRead > 0x01)
 8000c0a:	d913      	bls.n	8000c34 <LIS3DSH_Read+0x38>
  LIS3DSH_SendByte(ReadAddr);
 8000c0c:	f041 00c0 	orr.w	r0, r1, #192	; 0xc0
 8000c10:	619a      	str	r2, [r3, #24]
 8000c12:	f7ff ff6d 	bl	8000af0 <LIS3DSH_SendByte>
  while(NumByteToRead > 0x00)
 8000c16:	3d01      	subs	r5, #1
 8000c18:	b2ad      	uxth	r5, r5
 8000c1a:	3501      	adds	r5, #1
 8000c1c:	4425      	add	r5, r4
    *pBuffer = LIS3DSH_SendByte(DUMMY_BYTE);
 8000c1e:	2000      	movs	r0, #0
 8000c20:	f7ff ff66 	bl	8000af0 <LIS3DSH_SendByte>
 8000c24:	f804 0b01 	strb.w	r0, [r4], #1
  while(NumByteToRead > 0x00)
 8000c28:	42a5      	cmp	r5, r4
 8000c2a:	d1f8      	bne.n	8000c1e <LIS3DSH_Read+0x22>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000c2c:	4b07      	ldr	r3, [pc, #28]	; (8000c4c <LIS3DSH_Read+0x50>)
 8000c2e:	2208      	movs	r2, #8
 8000c30:	619a      	str	r2, [r3, #24]
}
 8000c32:	bd38      	pop	{r3, r4, r5, pc}
  LIS3DSH_SendByte(ReadAddr);
 8000c34:	f041 0080 	orr.w	r0, r1, #128	; 0x80
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000c38:	619a      	str	r2, [r3, #24]
 8000c3a:	f7ff ff59 	bl	8000af0 <LIS3DSH_SendByte>
  while(NumByteToRead > 0x00)
 8000c3e:	2d00      	cmp	r5, #0
 8000c40:	d1e9      	bne.n	8000c16 <LIS3DSH_Read+0x1a>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000c42:	4b02      	ldr	r3, [pc, #8]	; (8000c4c <LIS3DSH_Read+0x50>)
 8000c44:	2208      	movs	r2, #8
 8000c46:	619a      	str	r2, [r3, #24]
}
 8000c48:	bd38      	pop	{r3, r4, r5, pc}
 8000c4a:	bf00      	nop
 8000c4c:	40021000 	.word	0x40021000

08000c50 <LIS3DSH_ReadACC>:
{
 8000c50:	b510      	push	{r4, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	4604      	mov	r4, r0
  LIS3DSH_Read(&crtl, LIS3DSH_CTRL_REG5_ADDR, 1);
 8000c56:	2201      	movs	r2, #1
 8000c58:	2124      	movs	r1, #36	; 0x24
 8000c5a:	f10d 0007 	add.w	r0, sp, #7
 8000c5e:	f7ff ffcd 	bl	8000bfc <LIS3DSH_Read>
  LIS3DSH_Read((uint8_t*)&buffer[0], LIS3DSH_OUT_X_L_ADDR, 1);
 8000c62:	a802      	add	r0, sp, #8
 8000c64:	2201      	movs	r2, #1
 8000c66:	2128      	movs	r1, #40	; 0x28
 8000c68:	f7ff ffc8 	bl	8000bfc <LIS3DSH_Read>
  LIS3DSH_Read((uint8_t*)&buffer[1], LIS3DSH_OUT_X_H_ADDR, 1);
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	2129      	movs	r1, #41	; 0x29
 8000c70:	f10d 0009 	add.w	r0, sp, #9
 8000c74:	f7ff ffc2 	bl	8000bfc <LIS3DSH_Read>
  LIS3DSH_Read((uint8_t*)&buffer[2], LIS3DSH_OUT_Y_L_ADDR, 1);
 8000c78:	2201      	movs	r2, #1
 8000c7a:	212a      	movs	r1, #42	; 0x2a
 8000c7c:	f10d 000a 	add.w	r0, sp, #10
 8000c80:	f7ff ffbc 	bl	8000bfc <LIS3DSH_Read>
  LIS3DSH_Read((uint8_t*)&buffer[3], LIS3DSH_OUT_Y_H_ADDR, 1);
 8000c84:	2201      	movs	r2, #1
 8000c86:	212b      	movs	r1, #43	; 0x2b
 8000c88:	f10d 000b 	add.w	r0, sp, #11
 8000c8c:	f7ff ffb6 	bl	8000bfc <LIS3DSH_Read>
  LIS3DSH_Read((uint8_t*)&buffer[4], LIS3DSH_OUT_Z_L_ADDR, 1);
 8000c90:	2201      	movs	r2, #1
 8000c92:	212c      	movs	r1, #44	; 0x2c
 8000c94:	a803      	add	r0, sp, #12
 8000c96:	f7ff ffb1 	bl	8000bfc <LIS3DSH_Read>
  LIS3DSH_Read((uint8_t*)&buffer[5], LIS3DSH_OUT_Z_H_ADDR, 1);
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	212d      	movs	r1, #45	; 0x2d
 8000c9e:	f10d 000d 	add.w	r0, sp, #13
 8000ca2:	f7ff ffab 	bl	8000bfc <LIS3DSH_Read>
  switch(crtl & LIS3DSH__FULLSCALE_SELECTION) 
 8000ca6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000caa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000cae:	3b08      	subs	r3, #8
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	2b18      	cmp	r3, #24
 8000cb4:	bf97      	itett	ls
 8000cb6:	4a10      	ldrls	r2, [pc, #64]	; (8000cf8 <LIS3DSH_ReadACC+0xa8>)
 8000cb8:	ed9f 7a10 	vldrhi	s14, [pc, #64]	; 8000cfc <LIS3DSH_ReadACC+0xac>
 8000cbc:	eb02 0383 	addls.w	r3, r2, r3, lsl #2
 8000cc0:	ed93 7a00 	vldrls	s14, [r3]
  for(i=0; i<3; i++)
 8000cc4:	aa02      	add	r2, sp, #8
 8000cc6:	1ea1      	subs	r1, r4, #2
 8000cc8:	1d20      	adds	r0, r4, #4
    valueinfloat = ((buffer[2*i+1] << 8) + buffer[2*i]) * sensitivity;
 8000cca:	f992 4001 	ldrsb.w	r4, [r2, #1]
 8000cce:	f912 3b02 	ldrsb.w	r3, [r2], #2
 8000cd2:	eb03 2304 	add.w	r3, r3, r4, lsl #8
 8000cd6:	ee07 3a90 	vmov	s15, r3
 8000cda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cde:	ee67 7a87 	vmul.f32	s15, s15, s14
    pData[i] = (int16_t)valueinfloat;
 8000ce2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ce6:	ee17 3a90 	vmov	r3, s15
 8000cea:	f821 3f02 	strh.w	r3, [r1, #2]!
  for(i=0; i<3; i++)
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d1eb      	bne.n	8000cca <LIS3DSH_ReadACC+0x7a>
}
 8000cf2:	b004      	add	sp, #16
 8000cf4:	bd10      	pop	{r4, pc}
 8000cf6:	bf00      	nop
 8000cf8:	08002e44 	.word	0x08002e44
 8000cfc:	3d75c28f 	.word	0x3d75c28f

08000d00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d00:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d02:	4b0c      	ldr	r3, [pc, #48]	; (8000d34 <HAL_MspInit+0x34>)
 8000d04:	2100      	movs	r1, #0
 8000d06:	9100      	str	r1, [sp, #0]
 8000d08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000d0a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000d0e:	645a      	str	r2, [r3, #68]	; 0x44
 8000d10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000d12:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000d16:	9200      	str	r2, [sp, #0]
 8000d18:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d1a:	9101      	str	r1, [sp, #4]
 8000d1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d1e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000d22:	641a      	str	r2, [r3, #64]	; 0x40
 8000d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d2a:	9301      	str	r3, [sp, #4]
 8000d2c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d2e:	b002      	add	sp, #8
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	40023800 	.word	0x40023800

08000d38 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d38:	e7fe      	b.n	8000d38 <NMI_Handler>
 8000d3a:	bf00      	nop

08000d3c <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d3c:	e7fe      	b.n	8000d3c <HardFault_Handler>
 8000d3e:	bf00      	nop

08000d40 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d40:	e7fe      	b.n	8000d40 <MemManage_Handler>
 8000d42:	bf00      	nop

08000d44 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d44:	e7fe      	b.n	8000d44 <BusFault_Handler>
 8000d46:	bf00      	nop

08000d48 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d48:	e7fe      	b.n	8000d48 <UsageFault_Handler>
 8000d4a:	bf00      	nop

08000d4c <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop

08000d50 <DebugMon_Handler>:
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop

08000d54 <PendSV_Handler>:
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop

08000d58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d58:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

	static uint16_t counterRead_ms = 0;

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d5a:	f000 f999 	bl	8001090 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

    if (streamActive)
 8000d5e:	4b0c      	ldr	r3, [pc, #48]	; (8000d90 <SysTick_Handler+0x38>)
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	b1a3      	cbz	r3, 8000d8e <SysTick_Handler+0x36>
    {
  		if (counterRead_ms++ >= READ_PERIOD_MS)
 8000d64:	4b0b      	ldr	r3, [pc, #44]	; (8000d94 <SysTick_Handler+0x3c>)
 8000d66:	881a      	ldrh	r2, [r3, #0]
 8000d68:	1c51      	adds	r1, r2, #1
 8000d6a:	2a27      	cmp	r2, #39	; 0x27
 8000d6c:	8019      	strh	r1, [r3, #0]
 8000d6e:	d90e      	bls.n	8000d8e <SysTick_Handler+0x36>
  		{
  			dataReady = 1;
 8000d70:	4a09      	ldr	r2, [pc, #36]	; (8000d98 <SysTick_Handler+0x40>)
  uint32_t odr = READ_REG(GPIOx->ODR);
 8000d72:	480a      	ldr	r0, [pc, #40]	; (8000d9c <SysTick_Handler+0x44>)
 8000d74:	2101      	movs	r1, #1
 8000d76:	7011      	strb	r1, [r2, #0]
 8000d78:	6942      	ldr	r2, [r0, #20]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8000d7a:	0411      	lsls	r1, r2, #16
 8000d7c:	43d2      	mvns	r2, r2
 8000d7e:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 8000d82:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8000d86:	430a      	orrs	r2, r1
  			LL_GPIO_TogglePin(GPIOD, GPIO_PIN_12); // toggle green LED at each read
  			counterRead_ms = 0;
 8000d88:	2100      	movs	r1, #0
 8000d8a:	6182      	str	r2, [r0, #24]
 8000d8c:	8019      	strh	r1, [r3, #0]
  		}
  	}

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d8e:	bd08      	pop	{r3, pc}
 8000d90:	20000096 	.word	0x20000096
 8000d94:	20000098 	.word	0x20000098
 8000d98:	20000091 	.word	0x20000091
 8000d9c:	40020c00 	.word	0x40020c00

08000da0 <USART2_IRQHandler>:
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8000da0:	4b05      	ldr	r3, [pc, #20]	; (8000db8 <USART2_IRQHandler+0x18>)
 8000da2:	681a      	ldr	r2, [r3, #0]
{
  /* USER CODE BEGIN USART2_IRQn 0 */


	/* RX interrupt */
	if (LL_USART_IsActiveFlag_RXNE(USART2) != RESET)
 8000da4:	0692      	lsls	r2, r2, #26
 8000da6:	d505      	bpl.n	8000db4 <USART2_IRQHandler+0x14>
	{
		chRX = LL_USART_ReceiveData8(USART2);
 8000da8:	4904      	ldr	r1, [pc, #16]	; (8000dbc <USART2_IRQHandler+0x1c>)
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8000daa:	685b      	ldr	r3, [r3, #4]
		dataReceived = 1;
 8000dac:	4a04      	ldr	r2, [pc, #16]	; (8000dc0 <USART2_IRQHandler+0x20>)
 8000dae:	700b      	strb	r3, [r1, #0]
 8000db0:	2301      	movs	r3, #1
 8000db2:	7013      	strb	r3, [r2, #0]

  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	40004400 	.word	0x40004400
 8000dbc:	20000090 	.word	0x20000090
 8000dc0:	20000092 	.word	0x20000092

08000dc4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000dc4:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dc6:	1e16      	subs	r6, r2, #0
 8000dc8:	dd07      	ble.n	8000dda <_read+0x16>
 8000dca:	460c      	mov	r4, r1
 8000dcc:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8000dce:	f3af 8000 	nop.w
 8000dd2:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dd6:	42a5      	cmp	r5, r4
 8000dd8:	d1f9      	bne.n	8000dce <_read+0xa>
	}

return len;
}
 8000dda:	4630      	mov	r0, r6
 8000ddc:	bd70      	pop	{r4, r5, r6, pc}
 8000dde:	bf00      	nop

08000de0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000de0:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000de2:	1e16      	subs	r6, r2, #0
 8000de4:	dd07      	ble.n	8000df6 <_write+0x16>
 8000de6:	460c      	mov	r4, r1
 8000de8:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 8000dea:	f814 0b01 	ldrb.w	r0, [r4], #1
 8000dee:	f7ff fe29 	bl	8000a44 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000df2:	42a5      	cmp	r5, r4
 8000df4:	d1f9      	bne.n	8000dea <_write+0xa>
	}
	return len;
}
 8000df6:	4630      	mov	r0, r6
 8000df8:	bd70      	pop	{r4, r5, r6, pc}
 8000dfa:	bf00      	nop

08000dfc <_close>:

int _close(int file)
{
	return -1;
}
 8000dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop

08000e04 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8000e04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e08:	604b      	str	r3, [r1, #4]
	return 0;
}
 8000e0a:	2000      	movs	r0, #0
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop

08000e10 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8000e10:	2001      	movs	r0, #1
 8000e12:	4770      	bx	lr

08000e14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8000e14:	2000      	movs	r0, #0
 8000e16:	4770      	bx	lr

08000e18 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e18:	490c      	ldr	r1, [pc, #48]	; (8000e4c <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e1a:	4a0d      	ldr	r2, [pc, #52]	; (8000e50 <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 8000e1c:	680b      	ldr	r3, [r1, #0]
{
 8000e1e:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e20:	4c0c      	ldr	r4, [pc, #48]	; (8000e54 <_sbrk+0x3c>)
 8000e22:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8000e24:	b12b      	cbz	r3, 8000e32 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e26:	4418      	add	r0, r3
 8000e28:	4290      	cmp	r0, r2
 8000e2a:	d807      	bhi.n	8000e3c <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000e2c:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8000e32:	4b09      	ldr	r3, [pc, #36]	; (8000e58 <_sbrk+0x40>)
 8000e34:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8000e36:	4418      	add	r0, r3
 8000e38:	4290      	cmp	r0, r2
 8000e3a:	d9f7      	bls.n	8000e2c <_sbrk+0x14>
    errno = ENOMEM;
 8000e3c:	f000 ffb8 	bl	8001db0 <__errno>
 8000e40:	230c      	movs	r3, #12
 8000e42:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000e44:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	bd10      	pop	{r4, pc}
 8000e4c:	2000009c 	.word	0x2000009c
 8000e50:	20020000 	.word	0x20020000
 8000e54:	00000400 	.word	0x00000400
 8000e58:	20000300 	.word	0x20000300

08000e5c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e5c:	4b05      	ldr	r3, [pc, #20]	; (8000e74 <SystemInit+0x18>)
 8000e5e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e62:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e66:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8000e6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e6e:	6099      	str	r1, [r3, #8]
#endif
}
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	e000ed00 	.word	0xe000ed00

08000e78 <MX_TIM3_Init>:

/* USER CODE END 0 */

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000e78:	b570      	push	{r4, r5, r6, lr}

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000e7a:	2400      	movs	r4, #0
{
 8000e7c:	b08e      	sub	sp, #56	; 0x38
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8000e7e:	4621      	mov	r1, r4
 8000e80:	a806      	add	r0, sp, #24
 8000e82:	2220      	movs	r2, #32
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000e84:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8000e88:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8000e8c:	9405      	str	r4, [sp, #20]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8000e8e:	f000 ffb9 	bl	8001e04 <memset>
  SET_BIT(RCC->APB1ENR, Periphs);
 8000e92:	4b1c      	ldr	r3, [pc, #112]	; (8000f04 <MX_TIM3_Init+0x8c>)
  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 1679;
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
  TIM_InitStruct.Autoreload = 65535;
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8000e94:	4d1c      	ldr	r5, [pc, #112]	; (8000f08 <MX_TIM3_Init+0x90>)
 8000e96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e98:	f042 0202 	orr.w	r2, r2, #2
 8000e9c:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000ea0:	9402      	str	r4, [sp, #8]
 8000ea2:	f003 0302 	and.w	r3, r3, #2
 8000ea6:	9300      	str	r3, [sp, #0]
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8000ea8:	a901      	add	r1, sp, #4
  TIM_InitStruct.Prescaler = 1679;
 8000eaa:	f240 628f 	movw	r2, #1679	; 0x68f
  TIM_InitStruct.Autoreload = 65535;
 8000eae:	f64f 73ff 	movw	r3, #65535	; 0xffff
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8000eb2:	4628      	mov	r0, r5
  TIM_InitStruct.Prescaler = 1679;
 8000eb4:	f8ad 2004 	strh.w	r2, [sp, #4]
  TIM_InitStruct.Autoreload = 65535;
 8000eb8:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 8000eba:	9e00      	ldr	r6, [sp, #0]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000ebc:	9404      	str	r4, [sp, #16]
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8000ebe:	f000 fda3 	bl	8001a08 <LL_TIM_Init>
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000ec2:	682b      	ldr	r3, [r5, #0]
 8000ec4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000ec8:	602b      	str	r3, [r5, #0]
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_FROZEN;
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
  TIM_OC_InitStruct.CompareValue = 50000;
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8000eca:	aa06      	add	r2, sp, #24
  TIM_OC_InitStruct.CompareValue = 50000;
 8000ecc:	f24c 3350 	movw	r3, #50000	; 0xc350
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8000ed0:	4628      	mov	r0, r5
 8000ed2:	2101      	movs	r1, #1
  TIM_OC_InitStruct.CompareValue = 50000;
 8000ed4:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8000ed8:	e9cd 4406 	strd	r4, r4, [sp, #24]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8000edc:	9408      	str	r4, [sp, #32]
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8000ede:	f000 fdef 	bl	8001ac0 <LL_TIM_OC_Init>
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8000ee2:	69ab      	ldr	r3, [r5, #24]
 8000ee4:	f023 0304 	bic.w	r3, r3, #4
 8000ee8:	61ab      	str	r3, [r5, #24]
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000eea:	686b      	ldr	r3, [r5, #4]
 8000eec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000ef0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ef4:	606b      	str	r3, [r5, #4]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000ef6:	68ab      	ldr	r3, [r5, #8]
 8000ef8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000efc:	60ab      	str	r3, [r5, #8]
  LL_TIM_DisableMasterSlaveMode(TIM3);
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000efe:	b00e      	add	sp, #56	; 0x38
 8000f00:	bd70      	pop	{r4, r5, r6, pc}
 8000f02:	bf00      	nop
 8000f04:	40023800 	.word	0x40023800
 8000f08:	40000400 	.word	0x40000400

08000f0c <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000f0c:	b570      	push	{r4, r5, r6, lr}

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000f0e:	2400      	movs	r4, #0
{
 8000f10:	b090      	sub	sp, #64	; 0x40
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000f12:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8000f16:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8000f1a:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  SET_BIT(RCC->APB1ENR, Periphs);
 8000f1e:	4b23      	ldr	r3, [pc, #140]	; (8000fac <MX_USART2_UART_Init+0xa0>)
 8000f20:	940f      	str	r4, [sp, #60]	; 0x3c
 8000f22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_MEDIUM;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f24:	4822      	ldr	r0, [pc, #136]	; (8000fb0 <MX_USART2_UART_Init+0xa4>)
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
  LL_USART_Init(USART2, &USART_InitStruct);
 8000f26:	4d23      	ldr	r5, [pc, #140]	; (8000fb4 <MX_USART2_UART_Init+0xa8>)
 8000f28:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000f2c:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000f2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f30:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000f34:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8000f36:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000f38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f3a:	f042 0201 	orr.w	r2, r2, #1
 8000f3e:	631a      	str	r2, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f42:	9406      	str	r4, [sp, #24]
 8000f44:	f003 0301 	and.w	r3, r3, #1
 8000f48:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8000f4a:	260c      	movs	r6, #12
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	e9cd 6303 	strd	r6, r3, [sp, #12]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_MEDIUM;
 8000f52:	2301      	movs	r3, #1
 8000f54:	9305      	str	r3, [sp, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f56:	eb0d 0106 	add.w	r1, sp, r6
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000f5a:	2307      	movs	r3, #7
  (void)tmpreg;
 8000f5c:	9a01      	ldr	r2, [sp, #4]
 8000f5e:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f60:	9407      	str	r4, [sp, #28]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f62:	f000 fc25 	bl	80017b0 <LL_GPIO_Init>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f66:	4a14      	ldr	r2, [pc, #80]	; (8000fb8 <MX_USART2_UART_Init+0xac>)
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f68:	4b14      	ldr	r3, [pc, #80]	; (8000fbc <MX_USART2_UART_Init+0xb0>)
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f6a:	68d2      	ldr	r2, [r2, #12]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f6c:	f883 4326 	strb.w	r4, [r3, #806]	; 0x326
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f70:	2240      	movs	r2, #64	; 0x40
 8000f72:	605a      	str	r2, [r3, #4]
  LL_USART_Init(USART2, &USART_InitStruct);
 8000f74:	a909      	add	r1, sp, #36	; 0x24
  USART_InitStruct.BaudRate = 115200;
 8000f76:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  LL_USART_Init(USART2, &USART_InitStruct);
 8000f7a:	4628      	mov	r0, r5
  USART_InitStruct.BaudRate = 115200;
 8000f7c:	9309      	str	r3, [sp, #36]	; 0x24
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000f7e:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000f82:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000f86:	960d      	str	r6, [sp, #52]	; 0x34
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000f88:	940c      	str	r4, [sp, #48]	; 0x30
  LL_USART_Init(USART2, &USART_InitStruct);
 8000f8a:	f000 fe87 	bl	8001c9c <LL_USART_Init>
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000f8e:	692b      	ldr	r3, [r5, #16]
 8000f90:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8000f94:	612b      	str	r3, [r5, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000f96:	696b      	ldr	r3, [r5, #20]
 8000f98:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8000f9c:	616b      	str	r3, [r5, #20]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000f9e:	68eb      	ldr	r3, [r5, #12]
 8000fa0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000fa4:	60eb      	str	r3, [r5, #12]
  LL_USART_Enable(USART2);
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fa6:	b010      	add	sp, #64	; 0x40
 8000fa8:	bd70      	pop	{r4, r5, r6, pc}
 8000faa:	bf00      	nop
 8000fac:	40023800 	.word	0x40023800
 8000fb0:	40020000 	.word	0x40020000
 8000fb4:	40004400 	.word	0x40004400
 8000fb8:	e000ed00 	.word	0xe000ed00
 8000fbc:	e000e100 	.word	0xe000e100

08000fc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000fc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ff8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000fc4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000fc6:	e003      	b.n	8000fd0 <LoopCopyDataInit>

08000fc8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000fc8:	4b0c      	ldr	r3, [pc, #48]	; (8000ffc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000fca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000fcc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000fce:	3104      	adds	r1, #4

08000fd0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000fd0:	480b      	ldr	r0, [pc, #44]	; (8001000 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000fd2:	4b0c      	ldr	r3, [pc, #48]	; (8001004 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000fd4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000fd6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000fd8:	d3f6      	bcc.n	8000fc8 <CopyDataInit>
  ldr  r2, =_sbss
 8000fda:	4a0b      	ldr	r2, [pc, #44]	; (8001008 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000fdc:	e002      	b.n	8000fe4 <LoopFillZerobss>

08000fde <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000fde:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000fe0:	f842 3b04 	str.w	r3, [r2], #4

08000fe4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000fe4:	4b09      	ldr	r3, [pc, #36]	; (800100c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000fe6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000fe8:	d3f9      	bcc.n	8000fde <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000fea:	f7ff ff37 	bl	8000e5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fee:	f000 fee5 	bl	8001dbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ff2:	f7ff fbef 	bl	80007d4 <main>
  bx  lr    
 8000ff6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ff8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000ffc:	08002f68 	.word	0x08002f68
  ldr  r0, =_sdata
 8001000:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001004:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8001008:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 800100c:	20000300 	.word	0x20000300

08001010 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001010:	e7fe      	b.n	8001010 <ADC_IRQHandler>
	...

08001014 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001014:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001016:	4a0e      	ldr	r2, [pc, #56]	; (8001050 <HAL_InitTick+0x3c>)
 8001018:	4b0e      	ldr	r3, [pc, #56]	; (8001054 <HAL_InitTick+0x40>)
 800101a:	7812      	ldrb	r2, [r2, #0]
 800101c:	681b      	ldr	r3, [r3, #0]
{
 800101e:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001020:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001024:	fbb0 f0f2 	udiv	r0, r0, r2
 8001028:	fbb3 f0f0 	udiv	r0, r3, r0
 800102c:	f000 f88e 	bl	800114c <HAL_SYSTICK_Config>
 8001030:	b908      	cbnz	r0, 8001036 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001032:	2d0f      	cmp	r5, #15
 8001034:	d901      	bls.n	800103a <HAL_InitTick+0x26>
    return HAL_ERROR;
 8001036:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001038:	bd38      	pop	{r3, r4, r5, pc}
 800103a:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800103c:	4602      	mov	r2, r0
 800103e:	4629      	mov	r1, r5
 8001040:	f04f 30ff 	mov.w	r0, #4294967295
 8001044:	f000 f84a 	bl	80010dc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001048:	4b03      	ldr	r3, [pc, #12]	; (8001058 <HAL_InitTick+0x44>)
 800104a:	4620      	mov	r0, r4
 800104c:	601d      	str	r5, [r3, #0]
}
 800104e:	bd38      	pop	{r3, r4, r5, pc}
 8001050:	20000008 	.word	0x20000008
 8001054:	20000004 	.word	0x20000004
 8001058:	2000000c 	.word	0x2000000c

0800105c <HAL_Init>:
{
 800105c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800105e:	4b0b      	ldr	r3, [pc, #44]	; (800108c <HAL_Init+0x30>)
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001066:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800106e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001076:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001078:	2003      	movs	r0, #3
 800107a:	f000 f81b 	bl	80010b4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800107e:	2000      	movs	r0, #0
 8001080:	f7ff ffc8 	bl	8001014 <HAL_InitTick>
  HAL_MspInit();
 8001084:	f7ff fe3c 	bl	8000d00 <HAL_MspInit>
}
 8001088:	2000      	movs	r0, #0
 800108a:	bd08      	pop	{r3, pc}
 800108c:	40023c00 	.word	0x40023c00

08001090 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001090:	4a03      	ldr	r2, [pc, #12]	; (80010a0 <HAL_IncTick+0x10>)
 8001092:	4b04      	ldr	r3, [pc, #16]	; (80010a4 <HAL_IncTick+0x14>)
 8001094:	6811      	ldr	r1, [r2, #0]
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	440b      	add	r3, r1
 800109a:	6013      	str	r3, [r2, #0]
}
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	200002ec 	.word	0x200002ec
 80010a4:	20000008 	.word	0x20000008

080010a8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80010a8:	4b01      	ldr	r3, [pc, #4]	; (80010b0 <HAL_GetTick+0x8>)
 80010aa:	6818      	ldr	r0, [r3, #0]
}
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	200002ec 	.word	0x200002ec

080010b4 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010b4:	4908      	ldr	r1, [pc, #32]	; (80010d8 <HAL_NVIC_SetPriorityGrouping+0x24>)
 80010b6:	68ca      	ldr	r2, [r1, #12]
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b8:	b410      	push	{r4}
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010ba:	0200      	lsls	r0, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010bc:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 80010c0:	4022      	ands	r2, r4
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010c2:	f400 63e0 	and.w	r3, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80010d0:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->AIRCR =  reg_value;
 80010d4:	60cb      	str	r3, [r1, #12]
 80010d6:	4770      	bx	lr
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010dc:	4b19      	ldr	r3, [pc, #100]	; (8001144 <HAL_NVIC_SetPriority+0x68>)
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010e4:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010e6:	f1c3 0507 	rsb	r5, r3, #7
 80010ea:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ec:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010f0:	bf28      	it	cs
 80010f2:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010f4:	2c06      	cmp	r4, #6
 80010f6:	d919      	bls.n	800112c <HAL_NVIC_SetPriority+0x50>
 80010f8:	3b03      	subs	r3, #3
 80010fa:	f04f 34ff 	mov.w	r4, #4294967295
 80010fe:	409c      	lsls	r4, r3
 8001100:	ea22 0204 	bic.w	r2, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001104:	f04f 34ff 	mov.w	r4, #4294967295
 8001108:	40ac      	lsls	r4, r5
 800110a:	ea21 0104 	bic.w	r1, r1, r4
 800110e:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8001110:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001112:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8001116:	db0c      	blt.n	8001132 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001118:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800111c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001120:	0109      	lsls	r1, r1, #4
 8001122:	b2c9      	uxtb	r1, r1
 8001124:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001128:	bc30      	pop	{r4, r5}
 800112a:	4770      	bx	lr
 800112c:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800112e:	4613      	mov	r3, r2
 8001130:	e7e8      	b.n	8001104 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001132:	4b05      	ldr	r3, [pc, #20]	; (8001148 <HAL_NVIC_SetPriority+0x6c>)
 8001134:	f000 000f 	and.w	r0, r0, #15
 8001138:	0109      	lsls	r1, r1, #4
 800113a:	4403      	add	r3, r0
 800113c:	b2c9      	uxtb	r1, r1
 800113e:	7619      	strb	r1, [r3, #24]
 8001140:	bc30      	pop	{r4, r5}
 8001142:	4770      	bx	lr
 8001144:	e000ed00 	.word	0xe000ed00
 8001148:	e000ecfc 	.word	0xe000ecfc

0800114c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800114c:	3801      	subs	r0, #1
 800114e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001152:	d20e      	bcs.n	8001172 <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001154:	4b08      	ldr	r3, [pc, #32]	; (8001178 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001156:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001158:	4c08      	ldr	r4, [pc, #32]	; (800117c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800115a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115c:	20f0      	movs	r0, #240	; 0xf0
 800115e:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001162:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001164:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001166:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001168:	609a      	str	r2, [r3, #8]
   return SysTick_Config(TicksNumb);
}
 800116a:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800116e:	6019      	str	r1, [r3, #0]
 8001170:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001172:	2001      	movs	r0, #1
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	e000e010 	.word	0xe000e010
 800117c:	e000ed00 	.word	0xe000ed00

08001180 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001180:	2800      	cmp	r0, #0
 8001182:	f000 81a5 	beq.w	80014d0 <HAL_RCC_OscConfig+0x350>
{
 8001186:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800118a:	6803      	ldr	r3, [r0, #0]
 800118c:	07dd      	lsls	r5, r3, #31
{
 800118e:	b082      	sub	sp, #8
 8001190:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001192:	d52f      	bpl.n	80011f4 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001194:	49ac      	ldr	r1, [pc, #688]	; (8001448 <HAL_RCC_OscConfig+0x2c8>)
 8001196:	688a      	ldr	r2, [r1, #8]
 8001198:	f002 020c 	and.w	r2, r2, #12
 800119c:	2a04      	cmp	r2, #4
 800119e:	f000 80ec 	beq.w	800137a <HAL_RCC_OscConfig+0x1fa>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011a2:	688a      	ldr	r2, [r1, #8]
 80011a4:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011a8:	2a08      	cmp	r2, #8
 80011aa:	f000 80e2 	beq.w	8001372 <HAL_RCC_OscConfig+0x1f2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011ae:	6863      	ldr	r3, [r4, #4]
 80011b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011b4:	f000 80eb 	beq.w	800138e <HAL_RCC_OscConfig+0x20e>
 80011b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011bc:	f000 8178 	beq.w	80014b0 <HAL_RCC_OscConfig+0x330>
 80011c0:	4da1      	ldr	r5, [pc, #644]	; (8001448 <HAL_RCC_OscConfig+0x2c8>)
 80011c2:	682a      	ldr	r2, [r5, #0]
 80011c4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80011c8:	602a      	str	r2, [r5, #0]
 80011ca:	682a      	ldr	r2, [r5, #0]
 80011cc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80011d0:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	f040 80e0 	bne.w	8001398 <HAL_RCC_OscConfig+0x218>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d8:	f7ff ff66 	bl	80010a8 <HAL_GetTick>
 80011dc:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011de:	e005      	b.n	80011ec <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011e0:	f7ff ff62 	bl	80010a8 <HAL_GetTick>
 80011e4:	1b80      	subs	r0, r0, r6
 80011e6:	2864      	cmp	r0, #100	; 0x64
 80011e8:	f200 8100 	bhi.w	80013ec <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ec:	682b      	ldr	r3, [r5, #0]
 80011ee:	039b      	lsls	r3, r3, #14
 80011f0:	d4f6      	bmi.n	80011e0 <HAL_RCC_OscConfig+0x60>
 80011f2:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011f4:	079f      	lsls	r7, r3, #30
 80011f6:	d528      	bpl.n	800124a <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011f8:	4a93      	ldr	r2, [pc, #588]	; (8001448 <HAL_RCC_OscConfig+0x2c8>)
 80011fa:	6891      	ldr	r1, [r2, #8]
 80011fc:	f011 0f0c 	tst.w	r1, #12
 8001200:	f000 8090 	beq.w	8001324 <HAL_RCC_OscConfig+0x1a4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001204:	6891      	ldr	r1, [r2, #8]
 8001206:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800120a:	2908      	cmp	r1, #8
 800120c:	f000 8086 	beq.w	800131c <HAL_RCC_OscConfig+0x19c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001210:	68e3      	ldr	r3, [r4, #12]
 8001212:	2b00      	cmp	r3, #0
 8001214:	f000 8106 	beq.w	8001424 <HAL_RCC_OscConfig+0x2a4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001218:	4b8c      	ldr	r3, [pc, #560]	; (800144c <HAL_RCC_OscConfig+0x2cc>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800121a:	4e8b      	ldr	r6, [pc, #556]	; (8001448 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_ENABLE();
 800121c:	2201      	movs	r2, #1
 800121e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001220:	f7ff ff42 	bl	80010a8 <HAL_GetTick>
 8001224:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001226:	e005      	b.n	8001234 <HAL_RCC_OscConfig+0xb4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001228:	f7ff ff3e 	bl	80010a8 <HAL_GetTick>
 800122c:	1b40      	subs	r0, r0, r5
 800122e:	2802      	cmp	r0, #2
 8001230:	f200 80dc 	bhi.w	80013ec <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001234:	6833      	ldr	r3, [r6, #0]
 8001236:	0798      	lsls	r0, r3, #30
 8001238:	d5f6      	bpl.n	8001228 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800123a:	6833      	ldr	r3, [r6, #0]
 800123c:	6922      	ldr	r2, [r4, #16]
 800123e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001242:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001246:	6033      	str	r3, [r6, #0]
 8001248:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800124a:	071a      	lsls	r2, r3, #28
 800124c:	d452      	bmi.n	80012f4 <HAL_RCC_OscConfig+0x174>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800124e:	0758      	lsls	r0, r3, #29
 8001250:	d52f      	bpl.n	80012b2 <HAL_RCC_OscConfig+0x132>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001252:	4a7d      	ldr	r2, [pc, #500]	; (8001448 <HAL_RCC_OscConfig+0x2c8>)
 8001254:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001256:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 800125a:	d07e      	beq.n	800135a <HAL_RCC_OscConfig+0x1da>
    FlagStatus       pwrclkchanged = RESET;
 800125c:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800125e:	4e7c      	ldr	r6, [pc, #496]	; (8001450 <HAL_RCC_OscConfig+0x2d0>)
 8001260:	6833      	ldr	r3, [r6, #0]
 8001262:	05d9      	lsls	r1, r3, #23
 8001264:	f140 80b2 	bpl.w	80013cc <HAL_RCC_OscConfig+0x24c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001268:	68a3      	ldr	r3, [r4, #8]
 800126a:	2b01      	cmp	r3, #1
 800126c:	f000 80c2 	beq.w	80013f4 <HAL_RCC_OscConfig+0x274>
 8001270:	2b05      	cmp	r3, #5
 8001272:	f000 812f 	beq.w	80014d4 <HAL_RCC_OscConfig+0x354>
 8001276:	4e74      	ldr	r6, [pc, #464]	; (8001448 <HAL_RCC_OscConfig+0x2c8>)
 8001278:	6f32      	ldr	r2, [r6, #112]	; 0x70
 800127a:	f022 0201 	bic.w	r2, r2, #1
 800127e:	6732      	str	r2, [r6, #112]	; 0x70
 8001280:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8001282:	f022 0204 	bic.w	r2, r2, #4
 8001286:	6732      	str	r2, [r6, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001288:	2b00      	cmp	r3, #0
 800128a:	f040 80b8 	bne.w	80013fe <HAL_RCC_OscConfig+0x27e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800128e:	f7ff ff0b 	bl	80010a8 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001292:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001296:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001298:	e005      	b.n	80012a6 <HAL_RCC_OscConfig+0x126>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800129a:	f7ff ff05 	bl	80010a8 <HAL_GetTick>
 800129e:	1bc0      	subs	r0, r0, r7
 80012a0:	4540      	cmp	r0, r8
 80012a2:	f200 80a3 	bhi.w	80013ec <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012a6:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80012a8:	0798      	lsls	r0, r3, #30
 80012aa:	d4f6      	bmi.n	800129a <HAL_RCC_OscConfig+0x11a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80012ac:	2d00      	cmp	r5, #0
 80012ae:	f040 8109 	bne.w	80014c4 <HAL_RCC_OscConfig+0x344>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012b2:	69a0      	ldr	r0, [r4, #24]
 80012b4:	b1d0      	cbz	r0, 80012ec <HAL_RCC_OscConfig+0x16c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80012b6:	4d64      	ldr	r5, [pc, #400]	; (8001448 <HAL_RCC_OscConfig+0x2c8>)
 80012b8:	68ab      	ldr	r3, [r5, #8]
 80012ba:	f003 030c 	and.w	r3, r3, #12
 80012be:	2b08      	cmp	r3, #8
 80012c0:	f000 80cc 	beq.w	800145c <HAL_RCC_OscConfig+0x2dc>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012c4:	4b63      	ldr	r3, [pc, #396]	; (8001454 <HAL_RCC_OscConfig+0x2d4>)
 80012c6:	2200      	movs	r2, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012c8:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80012ca:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012cc:	f000 810c 	beq.w	80014e8 <HAL_RCC_OscConfig+0x368>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012d0:	f7ff feea 	bl	80010a8 <HAL_GetTick>

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012d4:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 80012d6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012d8:	e005      	b.n	80012e6 <HAL_RCC_OscConfig+0x166>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012da:	f7ff fee5 	bl	80010a8 <HAL_GetTick>
 80012de:	1b40      	subs	r0, r0, r5
 80012e0:	2802      	cmp	r0, #2
 80012e2:	f200 8083 	bhi.w	80013ec <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012e6:	6823      	ldr	r3, [r4, #0]
 80012e8:	019b      	lsls	r3, r3, #6
 80012ea:	d4f6      	bmi.n	80012da <HAL_RCC_OscConfig+0x15a>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80012ec:	2000      	movs	r0, #0
}
 80012ee:	b002      	add	sp, #8
 80012f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80012f4:	6963      	ldr	r3, [r4, #20]
 80012f6:	b303      	cbz	r3, 800133a <HAL_RCC_OscConfig+0x1ba>
      __HAL_RCC_LSI_ENABLE();
 80012f8:	4b57      	ldr	r3, [pc, #348]	; (8001458 <HAL_RCC_OscConfig+0x2d8>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012fa:	4e53      	ldr	r6, [pc, #332]	; (8001448 <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_ENABLE();
 80012fc:	2201      	movs	r2, #1
 80012fe:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001300:	f7ff fed2 	bl	80010a8 <HAL_GetTick>
 8001304:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001306:	e004      	b.n	8001312 <HAL_RCC_OscConfig+0x192>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001308:	f7ff fece 	bl	80010a8 <HAL_GetTick>
 800130c:	1b40      	subs	r0, r0, r5
 800130e:	2802      	cmp	r0, #2
 8001310:	d86c      	bhi.n	80013ec <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001312:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8001314:	079b      	lsls	r3, r3, #30
 8001316:	d5f7      	bpl.n	8001308 <HAL_RCC_OscConfig+0x188>
 8001318:	6823      	ldr	r3, [r4, #0]
 800131a:	e798      	b.n	800124e <HAL_RCC_OscConfig+0xce>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800131c:	6852      	ldr	r2, [r2, #4]
 800131e:	0256      	lsls	r6, r2, #9
 8001320:	f53f af76 	bmi.w	8001210 <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001324:	4a48      	ldr	r2, [pc, #288]	; (8001448 <HAL_RCC_OscConfig+0x2c8>)
 8001326:	6812      	ldr	r2, [r2, #0]
 8001328:	0795      	lsls	r5, r2, #30
 800132a:	d543      	bpl.n	80013b4 <HAL_RCC_OscConfig+0x234>
 800132c:	68e2      	ldr	r2, [r4, #12]
 800132e:	2a01      	cmp	r2, #1
 8001330:	d040      	beq.n	80013b4 <HAL_RCC_OscConfig+0x234>
        return HAL_ERROR;
 8001332:	2001      	movs	r0, #1
}
 8001334:	b002      	add	sp, #8
 8001336:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 800133a:	4a47      	ldr	r2, [pc, #284]	; (8001458 <HAL_RCC_OscConfig+0x2d8>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800133c:	4e42      	ldr	r6, [pc, #264]	; (8001448 <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_DISABLE();
 800133e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001340:	f7ff feb2 	bl	80010a8 <HAL_GetTick>
 8001344:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001346:	e004      	b.n	8001352 <HAL_RCC_OscConfig+0x1d2>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001348:	f7ff feae 	bl	80010a8 <HAL_GetTick>
 800134c:	1b40      	subs	r0, r0, r5
 800134e:	2802      	cmp	r0, #2
 8001350:	d84c      	bhi.n	80013ec <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001352:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8001354:	079f      	lsls	r7, r3, #30
 8001356:	d4f7      	bmi.n	8001348 <HAL_RCC_OscConfig+0x1c8>
 8001358:	e7de      	b.n	8001318 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_ENABLE();
 800135a:	9301      	str	r3, [sp, #4]
 800135c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800135e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001362:	6413      	str	r3, [r2, #64]	; 0x40
 8001364:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800136a:	9301      	str	r3, [sp, #4]
 800136c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800136e:	2501      	movs	r5, #1
 8001370:	e775      	b.n	800125e <HAL_RCC_OscConfig+0xde>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001372:	684a      	ldr	r2, [r1, #4]
 8001374:	0250      	lsls	r0, r2, #9
 8001376:	f57f af1a 	bpl.w	80011ae <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800137a:	4a33      	ldr	r2, [pc, #204]	; (8001448 <HAL_RCC_OscConfig+0x2c8>)
 800137c:	6812      	ldr	r2, [r2, #0]
 800137e:	0391      	lsls	r1, r2, #14
 8001380:	f57f af38 	bpl.w	80011f4 <HAL_RCC_OscConfig+0x74>
 8001384:	6862      	ldr	r2, [r4, #4]
 8001386:	2a00      	cmp	r2, #0
 8001388:	f47f af34 	bne.w	80011f4 <HAL_RCC_OscConfig+0x74>
 800138c:	e7d1      	b.n	8001332 <HAL_RCC_OscConfig+0x1b2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800138e:	4a2e      	ldr	r2, [pc, #184]	; (8001448 <HAL_RCC_OscConfig+0x2c8>)
 8001390:	6813      	ldr	r3, [r2, #0]
 8001392:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001396:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001398:	f7ff fe86 	bl	80010a8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800139c:	4e2a      	ldr	r6, [pc, #168]	; (8001448 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 800139e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013a0:	e004      	b.n	80013ac <HAL_RCC_OscConfig+0x22c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013a2:	f7ff fe81 	bl	80010a8 <HAL_GetTick>
 80013a6:	1b40      	subs	r0, r0, r5
 80013a8:	2864      	cmp	r0, #100	; 0x64
 80013aa:	d81f      	bhi.n	80013ec <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ac:	6833      	ldr	r3, [r6, #0]
 80013ae:	039a      	lsls	r2, r3, #14
 80013b0:	d5f7      	bpl.n	80013a2 <HAL_RCC_OscConfig+0x222>
 80013b2:	e71e      	b.n	80011f2 <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013b4:	4924      	ldr	r1, [pc, #144]	; (8001448 <HAL_RCC_OscConfig+0x2c8>)
 80013b6:	6920      	ldr	r0, [r4, #16]
 80013b8:	680a      	ldr	r2, [r1, #0]
 80013ba:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80013be:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 80013c2:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013c4:	071a      	lsls	r2, r3, #28
 80013c6:	f57f af42 	bpl.w	800124e <HAL_RCC_OscConfig+0xce>
 80013ca:	e793      	b.n	80012f4 <HAL_RCC_OscConfig+0x174>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013cc:	6833      	ldr	r3, [r6, #0]
 80013ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013d2:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80013d4:	f7ff fe68 	bl	80010a8 <HAL_GetTick>
 80013d8:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013da:	6833      	ldr	r3, [r6, #0]
 80013dc:	05da      	lsls	r2, r3, #23
 80013de:	f53f af43 	bmi.w	8001268 <HAL_RCC_OscConfig+0xe8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013e2:	f7ff fe61 	bl	80010a8 <HAL_GetTick>
 80013e6:	1bc0      	subs	r0, r0, r7
 80013e8:	2802      	cmp	r0, #2
 80013ea:	d9f6      	bls.n	80013da <HAL_RCC_OscConfig+0x25a>
            return HAL_TIMEOUT;
 80013ec:	2003      	movs	r0, #3
}
 80013ee:	b002      	add	sp, #8
 80013f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013f4:	4a14      	ldr	r2, [pc, #80]	; (8001448 <HAL_RCC_OscConfig+0x2c8>)
 80013f6:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80013f8:	f043 0301 	orr.w	r3, r3, #1
 80013fc:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 80013fe:	f7ff fe53 	bl	80010a8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001402:	4f11      	ldr	r7, [pc, #68]	; (8001448 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8001404:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001406:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800140a:	e004      	b.n	8001416 <HAL_RCC_OscConfig+0x296>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800140c:	f7ff fe4c 	bl	80010a8 <HAL_GetTick>
 8001410:	1b80      	subs	r0, r0, r6
 8001412:	4540      	cmp	r0, r8
 8001414:	d8ea      	bhi.n	80013ec <HAL_RCC_OscConfig+0x26c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001416:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001418:	079b      	lsls	r3, r3, #30
 800141a:	d5f7      	bpl.n	800140c <HAL_RCC_OscConfig+0x28c>
    if(pwrclkchanged == SET)
 800141c:	2d00      	cmp	r5, #0
 800141e:	f43f af48 	beq.w	80012b2 <HAL_RCC_OscConfig+0x132>
 8001422:	e04f      	b.n	80014c4 <HAL_RCC_OscConfig+0x344>
        __HAL_RCC_HSI_DISABLE();
 8001424:	4a09      	ldr	r2, [pc, #36]	; (800144c <HAL_RCC_OscConfig+0x2cc>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001426:	4e08      	ldr	r6, [pc, #32]	; (8001448 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_DISABLE();
 8001428:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800142a:	f7ff fe3d 	bl	80010a8 <HAL_GetTick>
 800142e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001430:	e004      	b.n	800143c <HAL_RCC_OscConfig+0x2bc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001432:	f7ff fe39 	bl	80010a8 <HAL_GetTick>
 8001436:	1b40      	subs	r0, r0, r5
 8001438:	2802      	cmp	r0, #2
 800143a:	d8d7      	bhi.n	80013ec <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800143c:	6833      	ldr	r3, [r6, #0]
 800143e:	0799      	lsls	r1, r3, #30
 8001440:	d4f7      	bmi.n	8001432 <HAL_RCC_OscConfig+0x2b2>
 8001442:	6823      	ldr	r3, [r4, #0]
 8001444:	e701      	b.n	800124a <HAL_RCC_OscConfig+0xca>
 8001446:	bf00      	nop
 8001448:	40023800 	.word	0x40023800
 800144c:	42470000 	.word	0x42470000
 8001450:	40007000 	.word	0x40007000
 8001454:	42470060 	.word	0x42470060
 8001458:	42470e80 	.word	0x42470e80
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800145c:	2801      	cmp	r0, #1
 800145e:	f43f af46 	beq.w	80012ee <HAL_RCC_OscConfig+0x16e>
        pll_config = RCC->PLLCFGR;
 8001462:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001464:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001466:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800146a:	4291      	cmp	r1, r2
 800146c:	f47f af61 	bne.w	8001332 <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001470:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001472:	f003 013f 	and.w	r1, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001476:	4291      	cmp	r1, r2
 8001478:	f47f af5b 	bne.w	8001332 <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800147c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800147e:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8001482:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001484:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8001488:	f47f af53 	bne.w	8001332 <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800148c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800148e:	0852      	lsrs	r2, r2, #1
 8001490:	3a01      	subs	r2, #1
 8001492:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001496:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 800149a:	f47f af4a 	bne.w	8001332 <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800149e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80014a0:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80014a4:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
            return HAL_TIMEOUT;
 80014a8:	bf14      	ite	ne
 80014aa:	2001      	movne	r0, #1
 80014ac:	2000      	moveq	r0, #0
 80014ae:	e71e      	b.n	80012ee <HAL_RCC_OscConfig+0x16e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014b0:	4b24      	ldr	r3, [pc, #144]	; (8001544 <HAL_RCC_OscConfig+0x3c4>)
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80014c0:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014c2:	e769      	b.n	8001398 <HAL_RCC_OscConfig+0x218>
      __HAL_RCC_PWR_CLK_DISABLE();
 80014c4:	4a1f      	ldr	r2, [pc, #124]	; (8001544 <HAL_RCC_OscConfig+0x3c4>)
 80014c6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80014c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014cc:	6413      	str	r3, [r2, #64]	; 0x40
 80014ce:	e6f0      	b.n	80012b2 <HAL_RCC_OscConfig+0x132>
    return HAL_ERROR;
 80014d0:	2001      	movs	r0, #1
}
 80014d2:	4770      	bx	lr
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014d4:	4b1b      	ldr	r3, [pc, #108]	; (8001544 <HAL_RCC_OscConfig+0x3c4>)
 80014d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80014d8:	f042 0204 	orr.w	r2, r2, #4
 80014dc:	671a      	str	r2, [r3, #112]	; 0x70
 80014de:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80014e0:	f042 0201 	orr.w	r2, r2, #1
 80014e4:	671a      	str	r2, [r3, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014e6:	e78a      	b.n	80013fe <HAL_RCC_OscConfig+0x27e>
        tickstart = HAL_GetTick();
 80014e8:	f7ff fdde 	bl	80010a8 <HAL_GetTick>
 80014ec:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014ee:	e005      	b.n	80014fc <HAL_RCC_OscConfig+0x37c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014f0:	f7ff fdda 	bl	80010a8 <HAL_GetTick>
 80014f4:	1b80      	subs	r0, r0, r6
 80014f6:	2802      	cmp	r0, #2
 80014f8:	f63f af78 	bhi.w	80013ec <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014fc:	682b      	ldr	r3, [r5, #0]
 80014fe:	0199      	lsls	r1, r3, #6
 8001500:	d4f6      	bmi.n	80014f0 <HAL_RCC_OscConfig+0x370>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001502:	e9d4 3607 	ldrd	r3, r6, [r4, #28]
 8001506:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
 800150a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800150c:	4333      	orrs	r3, r6
 800150e:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001512:	0852      	lsrs	r2, r2, #1
 8001514:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8001518:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 800151a:	490b      	ldr	r1, [pc, #44]	; (8001548 <HAL_RCC_OscConfig+0x3c8>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800151c:	4e09      	ldr	r6, [pc, #36]	; (8001544 <HAL_RCC_OscConfig+0x3c4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800151e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8001522:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001524:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001526:	600a      	str	r2, [r1, #0]
        tickstart = HAL_GetTick();
 8001528:	f7ff fdbe 	bl	80010a8 <HAL_GetTick>
 800152c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800152e:	e005      	b.n	800153c <HAL_RCC_OscConfig+0x3bc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001530:	f7ff fdba 	bl	80010a8 <HAL_GetTick>
 8001534:	1b00      	subs	r0, r0, r4
 8001536:	2802      	cmp	r0, #2
 8001538:	f63f af58 	bhi.w	80013ec <HAL_RCC_OscConfig+0x26c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800153c:	6833      	ldr	r3, [r6, #0]
 800153e:	019a      	lsls	r2, r3, #6
 8001540:	d5f6      	bpl.n	8001530 <HAL_RCC_OscConfig+0x3b0>
 8001542:	e6d3      	b.n	80012ec <HAL_RCC_OscConfig+0x16c>
 8001544:	40023800 	.word	0x40023800
 8001548:	42470060 	.word	0x42470060

0800154c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800154c:	4917      	ldr	r1, [pc, #92]	; (80015ac <HAL_RCC_GetSysClockFreq+0x60>)
{
 800154e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001550:	688b      	ldr	r3, [r1, #8]
 8001552:	f003 030c 	and.w	r3, r3, #12
 8001556:	2b04      	cmp	r3, #4
 8001558:	d01b      	beq.n	8001592 <HAL_RCC_GetSysClockFreq+0x46>
 800155a:	2b08      	cmp	r3, #8
 800155c:	d117      	bne.n	800158e <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800155e:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001560:	684b      	ldr	r3, [r1, #4]
 8001562:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001566:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800156a:	d114      	bne.n	8001596 <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800156c:	6849      	ldr	r1, [r1, #4]
 800156e:	4810      	ldr	r0, [pc, #64]	; (80015b0 <HAL_RCC_GetSysClockFreq+0x64>)
 8001570:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001574:	fba1 0100 	umull	r0, r1, r1, r0
 8001578:	f7fe fe7a 	bl	8000270 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800157c:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <HAL_RCC_GetSysClockFreq+0x60>)
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001584:	3301      	adds	r3, #1
 8001586:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8001588:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800158c:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 800158e:	4808      	ldr	r0, [pc, #32]	; (80015b0 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8001590:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001592:	4808      	ldr	r0, [pc, #32]	; (80015b4 <HAL_RCC_GetSysClockFreq+0x68>)
}
 8001594:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001596:	684b      	ldr	r3, [r1, #4]
 8001598:	4806      	ldr	r0, [pc, #24]	; (80015b4 <HAL_RCC_GetSysClockFreq+0x68>)
 800159a:	f3c3 1388 	ubfx	r3, r3, #6, #9
 800159e:	fba3 0100 	umull	r0, r1, r3, r0
 80015a2:	2300      	movs	r3, #0
 80015a4:	f7fe fe64 	bl	8000270 <__aeabi_uldivmod>
 80015a8:	e7e8      	b.n	800157c <HAL_RCC_GetSysClockFreq+0x30>
 80015aa:	bf00      	nop
 80015ac:	40023800 	.word	0x40023800
 80015b0:	00f42400 	.word	0x00f42400
 80015b4:	007a1200 	.word	0x007a1200

080015b8 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80015b8:	2800      	cmp	r0, #0
 80015ba:	f000 8087 	beq.w	80016cc <HAL_RCC_ClockConfig+0x114>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015be:	4a48      	ldr	r2, [pc, #288]	; (80016e0 <HAL_RCC_ClockConfig+0x128>)
 80015c0:	6813      	ldr	r3, [r2, #0]
 80015c2:	f003 0307 	and.w	r3, r3, #7
 80015c6:	428b      	cmp	r3, r1
{
 80015c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80015cc:	460d      	mov	r5, r1
 80015ce:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015d0:	d209      	bcs.n	80015e6 <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015d2:	b2cb      	uxtb	r3, r1
 80015d4:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015d6:	6813      	ldr	r3, [r2, #0]
 80015d8:	f003 0307 	and.w	r3, r3, #7
 80015dc:	428b      	cmp	r3, r1
 80015de:	d002      	beq.n	80015e6 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80015e0:	2001      	movs	r0, #1
}
 80015e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015e6:	6823      	ldr	r3, [r4, #0]
 80015e8:	0798      	lsls	r0, r3, #30
 80015ea:	d514      	bpl.n	8001616 <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015ec:	0759      	lsls	r1, r3, #29
 80015ee:	d504      	bpl.n	80015fa <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015f0:	493c      	ldr	r1, [pc, #240]	; (80016e4 <HAL_RCC_ClockConfig+0x12c>)
 80015f2:	688a      	ldr	r2, [r1, #8]
 80015f4:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 80015f8:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015fa:	071a      	lsls	r2, r3, #28
 80015fc:	d504      	bpl.n	8001608 <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015fe:	4939      	ldr	r1, [pc, #228]	; (80016e4 <HAL_RCC_ClockConfig+0x12c>)
 8001600:	688a      	ldr	r2, [r1, #8]
 8001602:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8001606:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001608:	4936      	ldr	r1, [pc, #216]	; (80016e4 <HAL_RCC_ClockConfig+0x12c>)
 800160a:	68a0      	ldr	r0, [r4, #8]
 800160c:	688a      	ldr	r2, [r1, #8]
 800160e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001612:	4302      	orrs	r2, r0
 8001614:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001616:	07df      	lsls	r7, r3, #31
 8001618:	d521      	bpl.n	800165e <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800161a:	6862      	ldr	r2, [r4, #4]
 800161c:	2a01      	cmp	r2, #1
 800161e:	d057      	beq.n	80016d0 <HAL_RCC_ClockConfig+0x118>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001620:	1e93      	subs	r3, r2, #2
 8001622:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001624:	4b2f      	ldr	r3, [pc, #188]	; (80016e4 <HAL_RCC_ClockConfig+0x12c>)
 8001626:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001628:	d94d      	bls.n	80016c6 <HAL_RCC_ClockConfig+0x10e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800162a:	0799      	lsls	r1, r3, #30
 800162c:	d5d8      	bpl.n	80015e0 <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800162e:	4e2d      	ldr	r6, [pc, #180]	; (80016e4 <HAL_RCC_ClockConfig+0x12c>)
 8001630:	68b3      	ldr	r3, [r6, #8]
 8001632:	f023 0303 	bic.w	r3, r3, #3
 8001636:	4313      	orrs	r3, r2
 8001638:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800163a:	f7ff fd35 	bl	80010a8 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800163e:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001642:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001644:	e004      	b.n	8001650 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001646:	f7ff fd2f 	bl	80010a8 <HAL_GetTick>
 800164a:	1bc0      	subs	r0, r0, r7
 800164c:	4540      	cmp	r0, r8
 800164e:	d844      	bhi.n	80016da <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001650:	68b3      	ldr	r3, [r6, #8]
 8001652:	6862      	ldr	r2, [r4, #4]
 8001654:	f003 030c 	and.w	r3, r3, #12
 8001658:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800165c:	d1f3      	bne.n	8001646 <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800165e:	4a20      	ldr	r2, [pc, #128]	; (80016e0 <HAL_RCC_ClockConfig+0x128>)
 8001660:	6813      	ldr	r3, [r2, #0]
 8001662:	f003 0307 	and.w	r3, r3, #7
 8001666:	42ab      	cmp	r3, r5
 8001668:	d906      	bls.n	8001678 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800166a:	b2eb      	uxtb	r3, r5
 800166c:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800166e:	6813      	ldr	r3, [r2, #0]
 8001670:	f003 0307 	and.w	r3, r3, #7
 8001674:	42ab      	cmp	r3, r5
 8001676:	d1b3      	bne.n	80015e0 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001678:	6823      	ldr	r3, [r4, #0]
 800167a:	075a      	lsls	r2, r3, #29
 800167c:	d506      	bpl.n	800168c <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800167e:	4919      	ldr	r1, [pc, #100]	; (80016e4 <HAL_RCC_ClockConfig+0x12c>)
 8001680:	68e0      	ldr	r0, [r4, #12]
 8001682:	688a      	ldr	r2, [r1, #8]
 8001684:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8001688:	4302      	orrs	r2, r0
 800168a:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800168c:	071b      	lsls	r3, r3, #28
 800168e:	d507      	bpl.n	80016a0 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001690:	4a14      	ldr	r2, [pc, #80]	; (80016e4 <HAL_RCC_ClockConfig+0x12c>)
 8001692:	6921      	ldr	r1, [r4, #16]
 8001694:	6893      	ldr	r3, [r2, #8]
 8001696:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800169a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800169e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016a0:	f7ff ff54 	bl	800154c <HAL_RCC_GetSysClockFreq>
 80016a4:	4a0f      	ldr	r2, [pc, #60]	; (80016e4 <HAL_RCC_ClockConfig+0x12c>)
 80016a6:	4c10      	ldr	r4, [pc, #64]	; (80016e8 <HAL_RCC_ClockConfig+0x130>)
 80016a8:	6892      	ldr	r2, [r2, #8]
 80016aa:	4910      	ldr	r1, [pc, #64]	; (80016ec <HAL_RCC_ClockConfig+0x134>)
 80016ac:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80016b0:	4603      	mov	r3, r0
 80016b2:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick (uwTickPrio);
 80016b4:	480e      	ldr	r0, [pc, #56]	; (80016f0 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016b6:	40d3      	lsrs	r3, r2
  HAL_InitTick (uwTickPrio);
 80016b8:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016ba:	600b      	str	r3, [r1, #0]
  HAL_InitTick (uwTickPrio);
 80016bc:	f7ff fcaa 	bl	8001014 <HAL_InitTick>
  return HAL_OK;
 80016c0:	2000      	movs	r0, #0
}
 80016c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016c6:	0198      	lsls	r0, r3, #6
 80016c8:	d4b1      	bmi.n	800162e <HAL_RCC_ClockConfig+0x76>
 80016ca:	e789      	b.n	80015e0 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 80016cc:	2001      	movs	r0, #1
}
 80016ce:	4770      	bx	lr
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016d0:	4b04      	ldr	r3, [pc, #16]	; (80016e4 <HAL_RCC_ClockConfig+0x12c>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	039e      	lsls	r6, r3, #14
 80016d6:	d4aa      	bmi.n	800162e <HAL_RCC_ClockConfig+0x76>
 80016d8:	e782      	b.n	80015e0 <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 80016da:	2003      	movs	r0, #3
 80016dc:	e781      	b.n	80015e2 <HAL_RCC_ClockConfig+0x2a>
 80016de:	bf00      	nop
 80016e0:	40023c00 	.word	0x40023c00
 80016e4:	40023800 	.word	0x40023800
 80016e8:	08002ea8 	.word	0x08002ea8
 80016ec:	20000004 	.word	0x20000004
 80016f0:	2000000c 	.word	0x2000000c

080016f4 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 80016f4:	b410      	push	{r4}
 80016f6:	4603      	mov	r3, r0
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80016f8:	7900      	ldrb	r0, [r0, #4]
 80016fa:	b1a0      	cbz	r0, 8001726 <LL_EXTI_Init+0x32>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 80016fc:	6818      	ldr	r0, [r3, #0]
 80016fe:	b178      	cbz	r0, 8001720 <LL_EXTI_Init+0x2c>
    {
      switch (EXTI_InitStruct->Mode)
 8001700:	795a      	ldrb	r2, [r3, #5]
 8001702:	2a01      	cmp	r2, #1
 8001704:	d034      	beq.n	8001770 <LL_EXTI_Init+0x7c>
 8001706:	2a02      	cmp	r2, #2
 8001708:	d01a      	beq.n	8001740 <LL_EXTI_Init+0x4c>
 800170a:	b342      	cbz	r2, 800175e <LL_EXTI_Init+0x6a>
 800170c:	2201      	movs	r2, #1
          break;
        default:
          status = ERROR;
          break;
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800170e:	799b      	ldrb	r3, [r3, #6]
 8001710:	b30b      	cbz	r3, 8001756 <LL_EXTI_Init+0x62>
      {
        switch (EXTI_InitStruct->Trigger)
 8001712:	2b02      	cmp	r3, #2
 8001714:	d031      	beq.n	800177a <LL_EXTI_Init+0x86>
 8001716:	2b03      	cmp	r3, #3
 8001718:	d043      	beq.n	80017a2 <LL_EXTI_Init+0xae>
 800171a:	2b01      	cmp	r3, #1
 800171c:	d037      	beq.n	800178e <LL_EXTI_Init+0x9a>
 800171e:	2001      	movs	r0, #1
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
  }
  return status;
}
 8001720:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001724:	4770      	bx	lr
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8001726:	4a21      	ldr	r2, [pc, #132]	; (80017ac <LL_EXTI_Init+0xb8>)
 8001728:	681c      	ldr	r4, [r3, #0]
 800172a:	6811      	ldr	r1, [r2, #0]
 800172c:	ea21 0104 	bic.w	r1, r1, r4
 8001730:	6011      	str	r1, [r2, #0]
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8001732:	6853      	ldr	r3, [r2, #4]
 8001734:	ea23 0304 	bic.w	r3, r3, r4
 8001738:	6053      	str	r3, [r2, #4]
 800173a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800173e:	4770      	bx	lr
  SET_BIT(EXTI->IMR, ExtiLine);
 8001740:	4a1a      	ldr	r2, [pc, #104]	; (80017ac <LL_EXTI_Init+0xb8>)
 8001742:	6811      	ldr	r1, [r2, #0]
 8001744:	4301      	orrs	r1, r0
 8001746:	6011      	str	r1, [r2, #0]
  SET_BIT(EXTI->EMR, ExtiLine);
 8001748:	6851      	ldr	r1, [r2, #4]
 800174a:	4301      	orrs	r1, r0
 800174c:	6051      	str	r1, [r2, #4]
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800174e:	799b      	ldrb	r3, [r3, #6]
  ErrorStatus status = SUCCESS;
 8001750:	2200      	movs	r2, #0
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8001752:	2b00      	cmp	r3, #0
 8001754:	d1dd      	bne.n	8001712 <LL_EXTI_Init+0x1e>
 8001756:	4610      	mov	r0, r2
}
 8001758:	f85d 4b04 	ldr.w	r4, [sp], #4
 800175c:	4770      	bx	lr
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 800175e:	4913      	ldr	r1, [pc, #76]	; (80017ac <LL_EXTI_Init+0xb8>)
 8001760:	684c      	ldr	r4, [r1, #4]
 8001762:	ea24 0400 	bic.w	r4, r4, r0
 8001766:	604c      	str	r4, [r1, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8001768:	680c      	ldr	r4, [r1, #0]
 800176a:	4304      	orrs	r4, r0
 800176c:	600c      	str	r4, [r1, #0]
}
 800176e:	e7ce      	b.n	800170e <LL_EXTI_Init+0x1a>
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8001770:	4a0e      	ldr	r2, [pc, #56]	; (80017ac <LL_EXTI_Init+0xb8>)
 8001772:	6811      	ldr	r1, [r2, #0]
 8001774:	ea21 0100 	bic.w	r1, r1, r0
 8001778:	e7e5      	b.n	8001746 <LL_EXTI_Init+0x52>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 800177a:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <LL_EXTI_Init+0xb8>)
 800177c:	6899      	ldr	r1, [r3, #8]
 800177e:	ea21 0100 	bic.w	r1, r1, r0
  SET_BIT(EXTI->RTSR, ExtiLine);
 8001782:	6099      	str	r1, [r3, #8]
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->FTSR, ExtiLine);
 8001784:	68d9      	ldr	r1, [r3, #12]
 8001786:	4308      	orrs	r0, r1
 8001788:	60d8      	str	r0, [r3, #12]
 800178a:	4610      	mov	r0, r2
 800178c:	e7e4      	b.n	8001758 <LL_EXTI_Init+0x64>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 800178e:	4b07      	ldr	r3, [pc, #28]	; (80017ac <LL_EXTI_Init+0xb8>)
 8001790:	68d9      	ldr	r1, [r3, #12]
 8001792:	ea21 0100 	bic.w	r1, r1, r0
 8001796:	60d9      	str	r1, [r3, #12]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8001798:	6899      	ldr	r1, [r3, #8]
 800179a:	4308      	orrs	r0, r1
 800179c:	6098      	str	r0, [r3, #8]
 800179e:	4610      	mov	r0, r2
}
 80017a0:	e7be      	b.n	8001720 <LL_EXTI_Init+0x2c>
  SET_BIT(EXTI->RTSR, ExtiLine);
 80017a2:	4b02      	ldr	r3, [pc, #8]	; (80017ac <LL_EXTI_Init+0xb8>)
 80017a4:	6899      	ldr	r1, [r3, #8]
 80017a6:	4301      	orrs	r1, r0
 80017a8:	e7eb      	b.n	8001782 <LL_EXTI_Init+0x8e>
 80017aa:	bf00      	nop
 80017ac:	40013c00 	.word	0x40013c00

080017b0 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80017b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80017b4:	680c      	ldr	r4, [r1, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b6:	fa94 f2a4 	rbit	r2, r4
 80017ba:	fab2 f282 	clz	r2, r2
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80017be:	fa34 f302 	lsrs.w	r3, r4, r2
 80017c2:	d07d      	beq.n	80018c0 <LL_GPIO_Init+0x110>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80017c4:	f04f 0c01 	mov.w	ip, #1
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80017c8:	2703      	movs	r7, #3
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80017ca:	f04f 0e0f 	mov.w	lr, #15
 80017ce:	e016      	b.n	80017fe <LL_GPIO_Init+0x4e>
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80017d0:	f8d0 8000 	ldr.w	r8, [r0]
 80017d4:	fa93 f6a3 	rbit	r6, r3
 80017d8:	fab6 f686 	clz	r6, r6
 80017dc:	fa93 f3a3 	rbit	r3, r3
 80017e0:	fab3 f383 	clz	r3, r3
 80017e4:	0076      	lsls	r6, r6, #1
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	fa07 f606 	lsl.w	r6, r7, r6
 80017ec:	409d      	lsls	r5, r3
 80017ee:	ea28 0606 	bic.w	r6, r8, r6
 80017f2:	4335      	orrs	r5, r6
 80017f4:	6005      	str	r5, [r0, #0]
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
    }
    pinpos++;
 80017f6:	3201      	adds	r2, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80017f8:	fa34 f302 	lsrs.w	r3, r4, r2
 80017fc:	d060      	beq.n	80018c0 <LL_GPIO_Init+0x110>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80017fe:	fa0c f302 	lsl.w	r3, ip, r2
    if (currentpin)
 8001802:	4023      	ands	r3, r4
 8001804:	d0f7      	beq.n	80017f6 <LL_GPIO_Init+0x46>
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001806:	684d      	ldr	r5, [r1, #4]
 8001808:	1e6e      	subs	r6, r5, #1
 800180a:	2e01      	cmp	r6, #1
 800180c:	d81f      	bhi.n	800184e <LL_GPIO_Init+0x9e>
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800180e:	6886      	ldr	r6, [r0, #8]
 8001810:	fa93 f8a3 	rbit	r8, r3
 8001814:	fab8 f888 	clz	r8, r8
 8001818:	fa93 faa3 	rbit	sl, r3
 800181c:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8001820:	fa07 f808 	lsl.w	r8, r7, r8
 8001824:	ea26 0808 	bic.w	r8, r6, r8
 8001828:	faba fa8a 	clz	sl, sl
 800182c:	688e      	ldr	r6, [r1, #8]
 800182e:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 8001832:	fa06 f60a 	lsl.w	r6, r6, sl
 8001836:	ea48 0606 	orr.w	r6, r8, r6
 800183a:	6086      	str	r6, [r0, #8]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800183c:	6846      	ldr	r6, [r0, #4]
 800183e:	ea26 0803 	bic.w	r8, r6, r3
 8001842:	68ce      	ldr	r6, [r1, #12]
 8001844:	fb06 f603 	mul.w	r6, r6, r3
 8001848:	ea48 0606 	orr.w	r6, r8, r6
 800184c:	6046      	str	r6, [r0, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800184e:	68c6      	ldr	r6, [r0, #12]
 8001850:	fa93 f8a3 	rbit	r8, r3
 8001854:	fab8 f888 	clz	r8, r8
 8001858:	fa93 faa3 	rbit	sl, r3
 800185c:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8001860:	fa07 f808 	lsl.w	r8, r7, r8
 8001864:	ea26 0808 	bic.w	r8, r6, r8
 8001868:	faba fa8a 	clz	sl, sl
 800186c:	690e      	ldr	r6, [r1, #16]
 800186e:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 8001872:	fa06 f60a 	lsl.w	r6, r6, sl
 8001876:	ea48 0606 	orr.w	r6, r8, r6
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800187a:	2d02      	cmp	r5, #2
 800187c:	60c6      	str	r6, [r0, #12]
 800187e:	d1a7      	bne.n	80017d0 <LL_GPIO_Init+0x20>
 8001880:	fa93 f6a3 	rbit	r6, r3
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8001884:	fab6 f686 	clz	r6, r6
 8001888:	2e07      	cmp	r6, #7
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800188a:	ea4f 2813 	mov.w	r8, r3, lsr #8
 800188e:	dc1a      	bgt.n	80018c6 <LL_GPIO_Init+0x116>
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8001890:	6a06      	ldr	r6, [r0, #32]
 8001892:	fa93 f8a3 	rbit	r8, r3
 8001896:	fab8 f888 	clz	r8, r8
 800189a:	fa93 faa3 	rbit	sl, r3
 800189e:	ea4f 0888 	mov.w	r8, r8, lsl #2
 80018a2:	fa0e f808 	lsl.w	r8, lr, r8
 80018a6:	ea26 0808 	bic.w	r8, r6, r8
 80018aa:	faba fa8a 	clz	sl, sl
 80018ae:	694e      	ldr	r6, [r1, #20]
 80018b0:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 80018b4:	fa06 f60a 	lsl.w	r6, r6, sl
 80018b8:	ea48 0606 	orr.w	r6, r8, r6
 80018bc:	6206      	str	r6, [r0, #32]
}
 80018be:	e787      	b.n	80017d0 <LL_GPIO_Init+0x20>
  }

  return (SUCCESS);
}
 80018c0:	2000      	movs	r0, #0
 80018c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80018c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80018c8:	fa98 faa8 	rbit	sl, r8
 80018cc:	faba fa8a 	clz	sl, sl
 80018d0:	fa98 f8a8 	rbit	r8, r8
 80018d4:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 80018d8:	fa0e fa0a 	lsl.w	sl, lr, sl
 80018dc:	ea26 090a 	bic.w	r9, r6, sl
 80018e0:	fab8 f888 	clz	r8, r8
 80018e4:	694e      	ldr	r6, [r1, #20]
 80018e6:	ea4f 0888 	mov.w	r8, r8, lsl #2
 80018ea:	fa06 f608 	lsl.w	r6, r6, r8
 80018ee:	ea49 0606 	orr.w	r6, r9, r6
 80018f2:	6246      	str	r6, [r0, #36]	; 0x24
}
 80018f4:	e76c      	b.n	80017d0 <LL_GPIO_Init+0x20>
 80018f6:	bf00      	nop

080018f8 <RCC_GetSystemClockFreq>:
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80018f8:	4a13      	ldr	r2, [pc, #76]	; (8001948 <RCC_GetSystemClockFreq+0x50>)
 80018fa:	6893      	ldr	r3, [r2, #8]
 80018fc:	f003 030c 	and.w	r3, r3, #12
uint32_t RCC_GetSystemClockFreq(void)
{
  uint32_t frequency = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8001900:	2b04      	cmp	r3, #4
 8001902:	d01f      	beq.n	8001944 <RCC_GetSystemClockFreq+0x4c>
 8001904:	2b08      	cmp	r3, #8
 8001906:	d11b      	bne.n	8001940 <RCC_GetSystemClockFreq+0x48>
{
 8001908:	b430      	push	{r4, r5}
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800190a:	6855      	ldr	r5, [r2, #4]
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800190c:	6851      	ldr	r1, [r2, #4]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800190e:	6850      	ldr	r0, [r2, #4]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8001910:	6853      	ldr	r3, [r2, #4]
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
      break;

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8001912:	4c0e      	ldr	r4, [pc, #56]	; (800194c <RCC_GetSystemClockFreq+0x54>)
 8001914:	4a0e      	ldr	r2, [pc, #56]	; (8001950 <RCC_GetSystemClockFreq+0x58>)
      break;
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8001916:	f3c3 4301 	ubfx	r3, r3, #16, #2
  switch (pllsource)
 800191a:	f415 0f80 	tst.w	r5, #4194304	; 0x400000
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800191e:	f3c0 1088 	ubfx	r0, r0, #6, #9
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8001922:	f103 0301 	add.w	r3, r3, #1
      pllinputfreq = HSE_VALUE;
 8001926:	bf18      	it	ne
 8001928:	4622      	movne	r2, r4
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800192a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	fbb2 f2f1 	udiv	r2, r2, r1
}
 8001934:	bc30      	pop	{r4, r5}
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8001936:	fb00 f002 	mul.w	r0, r0, r2
 800193a:	fbb0 f0f3 	udiv	r0, r0, r3
}
 800193e:	4770      	bx	lr
      frequency = HSI_VALUE;
 8001940:	4803      	ldr	r0, [pc, #12]	; (8001950 <RCC_GetSystemClockFreq+0x58>)
}
 8001942:	4770      	bx	lr
  switch (LL_RCC_GetSysClkSource())
 8001944:	4801      	ldr	r0, [pc, #4]	; (800194c <RCC_GetSystemClockFreq+0x54>)
 8001946:	4770      	bx	lr
 8001948:	40023800 	.word	0x40023800
 800194c:	007a1200 	.word	0x007a1200
 8001950:	00f42400 	.word	0x00f42400

08001954 <LL_RCC_GetSystemClocksFreq>:
{
 8001954:	b538      	push	{r3, r4, r5, lr}
 8001956:	4604      	mov	r4, r0
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8001958:	f7ff ffce 	bl	80018f8 <RCC_GetSystemClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800195c:	4a0c      	ldr	r2, [pc, #48]	; (8001990 <LL_RCC_GetSystemClocksFreq+0x3c>)
 800195e:	6020      	str	r0, [r4, #0]
 8001960:	6891      	ldr	r1, [r2, #8]
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001962:	4d0c      	ldr	r5, [pc, #48]	; (8001994 <LL_RCC_GetSystemClocksFreq+0x40>)
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8001964:	4603      	mov	r3, r0
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001966:	f3c1 1103 	ubfx	r1, r1, #4, #4
 800196a:	480b      	ldr	r0, [pc, #44]	; (8001998 <LL_RCC_GetSystemClocksFreq+0x44>)
 800196c:	5c40      	ldrb	r0, [r0, r1]
 800196e:	40c3      	lsrs	r3, r0
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8001970:	6063      	str	r3, [r4, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001972:	6891      	ldr	r1, [r2, #8]
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001974:	f3c1 2182 	ubfx	r1, r1, #10, #3
 8001978:	5c69      	ldrb	r1, [r5, r1]
 800197a:	fa23 f101 	lsr.w	r1, r3, r1
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800197e:	60a1      	str	r1, [r4, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001980:	6892      	ldr	r2, [r2, #8]
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8001982:	f3c2 3242 	ubfx	r2, r2, #13, #3
 8001986:	5ca8      	ldrb	r0, [r5, r2]
 8001988:	40c3      	lsrs	r3, r0
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800198a:	60e3      	str	r3, [r4, #12]
}
 800198c:	bd38      	pop	{r3, r4, r5, pc}
 800198e:	bf00      	nop
 8001990:	40023800 	.word	0x40023800
 8001994:	08002eb8 	.word	0x08002eb8
 8001998:	08002ea8 	.word	0x08002ea8

0800199c <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 800199c:	4602      	mov	r2, r0
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 800199e:	6800      	ldr	r0, [r0, #0]
 80019a0:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 80019a4:	d127      	bne.n	80019f6 <LL_SPI_Init+0x5a>
 80019a6:	b4f0      	push	{r4, r5, r6, r7}
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 80019a8:	e9d1 3700 	ldrd	r3, r7, [r1]
 80019ac:	e9d1 5402 	ldrd	r5, r4, [r1, #8]
 80019b0:	433b      	orrs	r3, r7
 80019b2:	690e      	ldr	r6, [r1, #16]
 80019b4:	432b      	orrs	r3, r5
 80019b6:	e9d1 7505 	ldrd	r7, r5, [r1, #20]
 80019ba:	4323      	orrs	r3, r4
 80019bc:	4333      	orrs	r3, r6
 80019be:	433b      	orrs	r3, r7
 80019c0:	432b      	orrs	r3, r5
 80019c2:	e9d1 6507 	ldrd	r6, r5, [r1, #28]
 80019c6:	6814      	ldr	r4, [r2, #0]
 80019c8:	4333      	orrs	r3, r6
 80019ca:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
 80019ce:	432b      	orrs	r3, r5
 80019d0:	f024 04bf 	bic.w	r4, r4, #191	; 0xbf
 80019d4:	4323      	orrs	r3, r4
 80019d6:	6013      	str	r3, [r2, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 80019d8:	6853      	ldr	r3, [r2, #4]
 80019da:	f023 0304 	bic.w	r3, r3, #4
 80019de:	ea43 4317 	orr.w	r3, r3, r7, lsr #16

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 80019e2:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 80019e6:	6053      	str	r3, [r2, #4]
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 80019e8:	d00b      	beq.n	8001a02 <LL_SPI_Init+0x66>
    }
    status = SUCCESS;
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80019ea:	69d3      	ldr	r3, [r2, #28]
 80019ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  return status;
}
 80019f0:	bcf0      	pop	{r4, r5, r6, r7}
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80019f2:	61d3      	str	r3, [r2, #28]
}
 80019f4:	4770      	bx	lr
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80019f6:	69d3      	ldr	r3, [r2, #28]
 80019f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  ErrorStatus status = ERROR;
 80019fc:	2001      	movs	r0, #1
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80019fe:	61d3      	str	r3, [r2, #28]
}
 8001a00:	4770      	bx	lr
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8001a02:	8c8b      	ldrh	r3, [r1, #36]	; 0x24
 8001a04:	6113      	str	r3, [r2, #16]
}
 8001a06:	e7f0      	b.n	80019ea <LL_SPI_Init+0x4e>

08001a08 <LL_TIM_Init>:
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001a08:	4a2c      	ldr	r2, [pc, #176]	; (8001abc <LL_TIM_Init+0xb4>)
  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8001a0a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001a0c:	4290      	cmp	r0, r2
{
 8001a0e:	b430      	push	{r4, r5}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001a10:	d044      	beq.n	8001a9c <LL_TIM_Init+0x94>
 8001a12:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001a16:	d033      	beq.n	8001a80 <LL_TIM_Init+0x78>
 8001a18:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001a1c:	4290      	cmp	r0, r2
 8001a1e:	d02f      	beq.n	8001a80 <LL_TIM_Init+0x78>
 8001a20:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a24:	4290      	cmp	r0, r2
 8001a26:	d02b      	beq.n	8001a80 <LL_TIM_Init+0x78>
 8001a28:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a2c:	4290      	cmp	r0, r2
 8001a2e:	d027      	beq.n	8001a80 <LL_TIM_Init+0x78>
 8001a30:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001a34:	4290      	cmp	r0, r2
 8001a36:	d031      	beq.n	8001a9c <LL_TIM_Init+0x94>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001a38:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8001a3c:	4290      	cmp	r0, r2
 8001a3e:	d023      	beq.n	8001a88 <LL_TIM_Init+0x80>
 8001a40:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a44:	4290      	cmp	r0, r2
 8001a46:	d01f      	beq.n	8001a88 <LL_TIM_Init+0x80>
 8001a48:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a4c:	4290      	cmp	r0, r2
 8001a4e:	d01b      	beq.n	8001a88 <LL_TIM_Init+0x80>
 8001a50:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001a54:	4290      	cmp	r0, r2
 8001a56:	d017      	beq.n	8001a88 <LL_TIM_Init+0x80>
 8001a58:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a5c:	4290      	cmp	r0, r2
 8001a5e:	d013      	beq.n	8001a88 <LL_TIM_Init+0x80>
 8001a60:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a64:	4290      	cmp	r0, r2
 8001a66:	d00f      	beq.n	8001a88 <LL_TIM_Init+0x80>

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8001a68:	688c      	ldr	r4, [r1, #8]

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8001a6a:	880a      	ldrh	r2, [r1, #0]
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8001a6c:	6003      	str	r3, [r0, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8001a6e:	62c4      	str	r4, [r0, #44]	; 0x2c
  WRITE_REG(TIMx->PSC, Prescaler);
 8001a70:	6282      	str	r2, [r0, #40]	; 0x28
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8001a72:	6943      	ldr	r3, [r0, #20]
 8001a74:	f043 0301 	orr.w	r3, r3, #1
 8001a78:	6143      	str	r3, [r0, #20]
  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);

  return SUCCESS;
}
 8001a7a:	bc30      	pop	{r4, r5}
 8001a7c:	2000      	movs	r0, #0
 8001a7e:	4770      	bx	lr
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8001a80:	684a      	ldr	r2, [r1, #4]
 8001a82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a86:	4313      	orrs	r3, r2
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8001a88:	e9d1 4502 	ldrd	r4, r5, [r1, #8]
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8001a8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8001a90:	880a      	ldrh	r2, [r1, #0]
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8001a92:	432b      	orrs	r3, r5
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8001a94:	6003      	str	r3, [r0, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8001a96:	62c4      	str	r4, [r0, #44]	; 0x2c
  WRITE_REG(TIMx->PSC, Prescaler);
 8001a98:	6282      	str	r2, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001a9a:	e7ea      	b.n	8001a72 <LL_TIM_Init+0x6a>
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8001a9c:	684d      	ldr	r5, [r1, #4]
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8001a9e:	68cc      	ldr	r4, [r1, #12]
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8001aa0:	880a      	ldrh	r2, [r1, #0]
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8001aa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001aa6:	432b      	orrs	r3, r5
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8001aa8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001aac:	4323      	orrs	r3, r4
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8001aae:	6003      	str	r3, [r0, #0]
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8001ab0:	688b      	ldr	r3, [r1, #8]
  WRITE_REG(TIMx->ARR, AutoReload);
 8001ab2:	62c3      	str	r3, [r0, #44]	; 0x2c
  WRITE_REG(TIMx->PSC, Prescaler);
 8001ab4:	6282      	str	r2, [r0, #40]	; 0x28
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8001ab6:	690b      	ldr	r3, [r1, #16]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8001ab8:	6303      	str	r3, [r0, #48]	; 0x30
}
 8001aba:	e7da      	b.n	8001a72 <LL_TIM_Init+0x6a>
 8001abc:	40010000 	.word	0x40010000

08001ac0 <LL_TIM_OC_Init>:
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
  ErrorStatus result = ERROR;

  switch (Channel)
 8001ac0:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
{
 8001ac4:	b4f0      	push	{r4, r5, r6, r7}
  switch (Channel)
 8001ac6:	d073      	beq.n	8001bb0 <LL_TIM_OC_Init+0xf0>
 8001ac8:	d82a      	bhi.n	8001b20 <LL_TIM_OC_Init+0x60>
 8001aca:	2901      	cmp	r1, #1
 8001acc:	f000 8096 	beq.w	8001bfc <LL_TIM_OC_Init+0x13c>
 8001ad0:	2910      	cmp	r1, #16
 8001ad2:	d14e      	bne.n	8001b72 <LL_TIM_OC_Init+0xb2>
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8001ad4:	6a04      	ldr	r4, [r0, #32]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8001ad6:	6911      	ldr	r1, [r2, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001ad8:	4d6f      	ldr	r5, [pc, #444]	; (8001c98 <LL_TIM_OC_Init+0x1d8>)
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8001ada:	f024 0410 	bic.w	r4, r4, #16
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8001ade:	e9d2 6700 	ldrd	r6, r7, [r2]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8001ae2:	6204      	str	r4, [r0, #32]
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8001ae4:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001ae6:	6844      	ldr	r4, [r0, #4]
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8001ae8:	f023 0320 	bic.w	r3, r3, #32
 8001aec:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8001af0:	6981      	ldr	r1, [r0, #24]
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8001af2:	f023 0310 	bic.w	r3, r3, #16
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8001af6:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001afa:	42a8      	cmp	r0, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8001afc:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8001b00:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001b04:	d03f      	beq.n	8001b86 <LL_TIM_OC_Init+0xc6>
 8001b06:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001b0a:	42a8      	cmp	r0, r5
 8001b0c:	d03b      	beq.n	8001b86 <LL_TIM_OC_Init+0xc6>

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8001b0e:	68d5      	ldr	r5, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001b10:	6044      	str	r4, [r0, #4]
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8001b12:	2200      	movs	r2, #0
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8001b14:	6181      	str	r1, [r0, #24]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8001b16:	6385      	str	r5, [r0, #56]	; 0x38

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001b18:	6203      	str	r3, [r0, #32]
}
 8001b1a:	bcf0      	pop	{r4, r5, r6, r7}
 8001b1c:	4610      	mov	r0, r2
 8001b1e:	4770      	bx	lr
  switch (Channel)
 8001b20:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8001b24:	d125      	bne.n	8001b72 <LL_TIM_OC_Init+0xb2>
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8001b26:	6a04      	ldr	r4, [r0, #32]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8001b28:	6911      	ldr	r1, [r2, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001b2a:	4d5b      	ldr	r5, [pc, #364]	; (8001c98 <LL_TIM_OC_Init+0x1d8>)
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8001b2c:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8001b30:	e9d2 6700 	ldrd	r6, r7, [r2]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8001b34:	6204      	str	r4, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001b36:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8001b38:	6844      	ldr	r4, [r0, #4]
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8001b3a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001b3e:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8001b42:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8001b44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8001b48:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001b4c:	42a8      	cmp	r0, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8001b4e:	ea43 3307 	orr.w	r3, r3, r7, lsl #12
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8001b52:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001b56:	d010      	beq.n	8001b7a <LL_TIM_OC_Init+0xba>
 8001b58:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001b5c:	42a8      	cmp	r0, r5
 8001b5e:	d00c      	beq.n	8001b7a <LL_TIM_OC_Init+0xba>

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8001b60:	68d5      	ldr	r5, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001b62:	6044      	str	r4, [r0, #4]
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8001b64:	2200      	movs	r2, #0
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8001b66:	61c1      	str	r1, [r0, #28]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8001b68:	6405      	str	r5, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001b6a:	6203      	str	r3, [r0, #32]
}
 8001b6c:	bcf0      	pop	{r4, r5, r6, r7}
 8001b6e:	4610      	mov	r0, r2
 8001b70:	4770      	bx	lr
  switch (Channel)
 8001b72:	2201      	movs	r2, #1
}
 8001b74:	4610      	mov	r0, r2
 8001b76:	bcf0      	pop	{r4, r5, r6, r7}
 8001b78:	4770      	bx	lr
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8001b7a:	6995      	ldr	r5, [r2, #24]
 8001b7c:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
 8001b80:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8001b84:	e7ec      	b.n	8001b60 <LL_TIM_OC_Init+0xa0>
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8001b86:	e9d2 6705 	ldrd	r6, r7, [r2, #20]
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8001b8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8001b8e:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8001b92:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8001b96:	69d5      	ldr	r5, [r2, #28]
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8001b98:	6896      	ldr	r6, [r2, #8]
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8001b9a:	ea44 0487 	orr.w	r4, r4, r7, lsl #2
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8001b9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8001ba2:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8001ba6:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8001baa:	ea44 04c5 	orr.w	r4, r4, r5, lsl #3
 8001bae:	e7ae      	b.n	8001b0e <LL_TIM_OC_Init+0x4e>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8001bb0:	6a04      	ldr	r4, [r0, #32]
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8001bb2:	6911      	ldr	r1, [r2, #16]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001bb4:	4d38      	ldr	r5, [pc, #224]	; (8001c98 <LL_TIM_OC_Init+0x1d8>)
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8001bb6:	f424 7480 	bic.w	r4, r4, #256	; 0x100
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8001bba:	e9d2 6700 	ldrd	r6, r7, [r2]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8001bbe:	6204      	str	r4, [r0, #32]
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8001bc0:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001bc2:	6844      	ldr	r4, [r0, #4]
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8001bc4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001bc8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8001bcc:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8001bce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8001bd2:	f021 0173 	bic.w	r1, r1, #115	; 0x73
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001bd6:	42a8      	cmp	r0, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8001bd8:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8001bdc:	ea41 0106 	orr.w	r1, r1, r6
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001be0:	d031      	beq.n	8001c46 <LL_TIM_OC_Init+0x186>
 8001be2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001be6:	42a8      	cmp	r0, r5
 8001be8:	d02d      	beq.n	8001c46 <LL_TIM_OC_Init+0x186>
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8001bea:	68d5      	ldr	r5, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001bec:	6044      	str	r4, [r0, #4]
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8001bee:	2200      	movs	r2, #0
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8001bf0:	61c1      	str	r1, [r0, #28]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8001bf2:	63c5      	str	r5, [r0, #60]	; 0x3c
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001bf4:	6203      	str	r3, [r0, #32]
}
 8001bf6:	bcf0      	pop	{r4, r5, r6, r7}
 8001bf8:	4610      	mov	r0, r2
 8001bfa:	4770      	bx	lr
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8001bfc:	6a04      	ldr	r4, [r0, #32]
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8001bfe:	6911      	ldr	r1, [r2, #16]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001c00:	4d25      	ldr	r5, [pc, #148]	; (8001c98 <LL_TIM_OC_Init+0x1d8>)
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8001c02:	f024 0401 	bic.w	r4, r4, #1
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8001c06:	e9d2 6700 	ldrd	r6, r7, [r2]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8001c0a:	6204      	str	r4, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001c0c:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001c0e:	6844      	ldr	r4, [r0, #4]
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8001c10:	f023 0302 	bic.w	r3, r3, #2
 8001c14:	430b      	orrs	r3, r1
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8001c16:	6981      	ldr	r1, [r0, #24]
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8001c18:	f023 0301 	bic.w	r3, r3, #1
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8001c1c:	f021 0173 	bic.w	r1, r1, #115	; 0x73
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001c20:	42a8      	cmp	r0, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8001c22:	ea43 0307 	orr.w	r3, r3, r7
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8001c26:	ea41 0106 	orr.w	r1, r1, r6
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001c2a:	d021      	beq.n	8001c70 <LL_TIM_OC_Init+0x1b0>
 8001c2c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001c30:	42a8      	cmp	r0, r5
 8001c32:	d01d      	beq.n	8001c70 <LL_TIM_OC_Init+0x1b0>
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8001c34:	68d5      	ldr	r5, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001c36:	6044      	str	r4, [r0, #4]
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8001c38:	2200      	movs	r2, #0
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8001c3a:	6181      	str	r1, [r0, #24]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8001c3c:	6345      	str	r5, [r0, #52]	; 0x34
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001c3e:	6203      	str	r3, [r0, #32]
}
 8001c40:	bcf0      	pop	{r4, r5, r6, r7}
 8001c42:	4610      	mov	r0, r2
 8001c44:	4770      	bx	lr
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8001c46:	e9d2 6705 	ldrd	r6, r7, [r2, #20]
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8001c4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8001c4e:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8001c52:	ea43 2386 	orr.w	r3, r3, r6, lsl #10
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8001c56:	69d5      	ldr	r5, [r2, #28]
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8001c58:	6896      	ldr	r6, [r2, #8]
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8001c5a:	ea44 1407 	orr.w	r4, r4, r7, lsl #4
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8001c5e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8001c62:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8001c66:	ea43 2386 	orr.w	r3, r3, r6, lsl #10
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8001c6a:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
 8001c6e:	e7bc      	b.n	8001bea <LL_TIM_OC_Init+0x12a>
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8001c70:	e9d2 6705 	ldrd	r6, r7, [r2, #20]
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8001c74:	f023 0308 	bic.w	r3, r3, #8
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8001c78:	f424 7480 	bic.w	r4, r4, #256	; 0x100
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8001c7c:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8001c80:	69d5      	ldr	r5, [r2, #28]
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8001c82:	6896      	ldr	r6, [r2, #8]
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8001c84:	433c      	orrs	r4, r7
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8001c86:	f023 0304 	bic.w	r3, r3, #4
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8001c8a:	f424 7400 	bic.w	r4, r4, #512	; 0x200
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8001c8e:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8001c92:	ea44 0445 	orr.w	r4, r4, r5, lsl #1
 8001c96:	e7cd      	b.n	8001c34 <LL_TIM_OC_Init+0x174>
 8001c98:	40010000 	.word	0x40010000

08001c9c <LL_USART_Init>:
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8001c9c:	68c3      	ldr	r3, [r0, #12]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8001c9e:	049b      	lsls	r3, r3, #18
 8001ca0:	d501      	bpl.n	8001ca6 <LL_USART_Init+0xa>
  ErrorStatus status = ERROR;
 8001ca2:	2001      	movs	r0, #1
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
}
 8001ca4:	4770      	bx	lr
{
 8001ca6:	b530      	push	{r4, r5, lr}
    MODIFY_REG(USARTx->CR1,
 8001ca8:	684b      	ldr	r3, [r1, #4]
 8001caa:	4604      	mov	r4, r0
 8001cac:	460d      	mov	r5, r1
 8001cae:	e9d1 1003 	ldrd	r1, r0, [r1, #12]
 8001cb2:	68e2      	ldr	r2, [r4, #12]
 8001cb4:	430b      	orrs	r3, r1
 8001cb6:	69a9      	ldr	r1, [r5, #24]
 8001cb8:	4303      	orrs	r3, r0
 8001cba:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
 8001cbe:	430b      	orrs	r3, r1
 8001cc0:	f022 020c 	bic.w	r2, r2, #12
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001cc8:	6922      	ldr	r2, [r4, #16]
 8001cca:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8001ccc:	6969      	ldr	r1, [r5, #20]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001cce:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001cd2:	431a      	orrs	r2, r3
 8001cd4:	6122      	str	r2, [r4, #16]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8001cd6:	6963      	ldr	r3, [r4, #20]
 8001cd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001cdc:	430b      	orrs	r3, r1
{
 8001cde:	b085      	sub	sp, #20
 8001ce0:	6163      	str	r3, [r4, #20]
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8001ce2:	4668      	mov	r0, sp
 8001ce4:	f7ff fe36 	bl	8001954 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8001ce8:	4b2d      	ldr	r3, [pc, #180]	; (8001da0 <LL_USART_Init+0x104>)
 8001cea:	429c      	cmp	r4, r3
 8001cec:	d018      	beq.n	8001d20 <LL_USART_Init+0x84>
    else if (USARTx == USART2)
 8001cee:	4b2d      	ldr	r3, [pc, #180]	; (8001da4 <LL_USART_Init+0x108>)
 8001cf0:	429c      	cmp	r4, r3
 8001cf2:	d00e      	beq.n	8001d12 <LL_USART_Init+0x76>
    else if (USARTx == USART3)
 8001cf4:	4b2c      	ldr	r3, [pc, #176]	; (8001da8 <LL_USART_Init+0x10c>)
 8001cf6:	429c      	cmp	r4, r3
 8001cf8:	d00b      	beq.n	8001d12 <LL_USART_Init+0x76>
    else if (USARTx == USART6)
 8001cfa:	f503 434c 	add.w	r3, r3, #52224	; 0xcc00
 8001cfe:	429c      	cmp	r4, r3
 8001d00:	d00e      	beq.n	8001d20 <LL_USART_Init+0x84>
    else if (USARTx == UART4)
 8001d02:	f5a3 4348 	sub.w	r3, r3, #51200	; 0xc800
 8001d06:	429c      	cmp	r4, r3
 8001d08:	d003      	beq.n	8001d12 <LL_USART_Init+0x76>
    else if (USARTx == UART5)
 8001d0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d0e:	429c      	cmp	r4, r3
 8001d10:	d103      	bne.n	8001d1a <LL_USART_Init+0x7e>
      periphclk = rcc_clocks.PCLK1_Frequency;
 8001d12:	9902      	ldr	r1, [sp, #8]
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8001d14:	b109      	cbz	r1, 8001d1a <LL_USART_Init+0x7e>
        && (USART_InitStruct->BaudRate != 0U))
 8001d16:	682b      	ldr	r3, [r5, #0]
 8001d18:	b923      	cbnz	r3, 8001d24 <LL_USART_Init+0x88>
  ErrorStatus status = ERROR;
 8001d1a:	2001      	movs	r0, #1
}
 8001d1c:	b005      	add	sp, #20
 8001d1e:	bd30      	pop	{r4, r5, pc}
      periphclk = rcc_clocks.PCLK2_Frequency;
 8001d20:	9903      	ldr	r1, [sp, #12]
 8001d22:	e7f7      	b.n	8001d14 <LL_USART_Init+0x78>
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8001d24:	69aa      	ldr	r2, [r5, #24]
 8001d26:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001d2a:	d018      	beq.n	8001d5e <LL_USART_Init+0xc2>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8001d2c:	2019      	movs	r0, #25
 8001d2e:	009a      	lsls	r2, r3, #2
 8001d30:	fba1 0100 	umull	r0, r1, r1, r0
 8001d34:	0f9b      	lsrs	r3, r3, #30
 8001d36:	f7fe fa9b 	bl	8000270 <__aeabi_uldivmod>
 8001d3a:	4d1c      	ldr	r5, [pc, #112]	; (8001dac <LL_USART_Init+0x110>)
 8001d3c:	fba5 2300 	umull	r2, r3, r5, r0
 8001d40:	095b      	lsrs	r3, r3, #5
 8001d42:	2164      	movs	r1, #100	; 0x64
 8001d44:	fb01 0213 	mls	r2, r1, r3, r0
 8001d48:	0112      	lsls	r2, r2, #4
 8001d4a:	3232      	adds	r2, #50	; 0x32
 8001d4c:	fba5 1202 	umull	r1, r2, r5, r2
 8001d50:	011b      	lsls	r3, r3, #4
 8001d52:	eb03 1352 	add.w	r3, r3, r2, lsr #5
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	60a3      	str	r3, [r4, #8]
      status = SUCCESS;
 8001d5a:	2000      	movs	r0, #0
 8001d5c:	e7de      	b.n	8001d1c <LL_USART_Init+0x80>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8001d5e:	18da      	adds	r2, r3, r3
 8001d60:	f04f 0019 	mov.w	r0, #25
 8001d64:	f04f 0300 	mov.w	r3, #0
 8001d68:	415b      	adcs	r3, r3
 8001d6a:	fba1 0100 	umull	r0, r1, r1, r0
 8001d6e:	f7fe fa7f 	bl	8000270 <__aeabi_uldivmod>
 8001d72:	4d0e      	ldr	r5, [pc, #56]	; (8001dac <LL_USART_Init+0x110>)
 8001d74:	fba5 3200 	umull	r3, r2, r5, r0
 8001d78:	0951      	lsrs	r1, r2, #5
 8001d7a:	2264      	movs	r2, #100	; 0x64
 8001d7c:	fb02 0311 	mls	r3, r2, r1, r0
 8001d80:	00db      	lsls	r3, r3, #3
 8001d82:	3332      	adds	r3, #50	; 0x32
 8001d84:	fba5 2303 	umull	r2, r3, r5, r3
 8001d88:	f3c3 1242 	ubfx	r2, r3, #5, #3
 8001d8c:	091b      	lsrs	r3, r3, #4
 8001d8e:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8001d92:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001d96:	4413      	add	r3, r2
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	60a3      	str	r3, [r4, #8]
 8001d9c:	2000      	movs	r0, #0
 8001d9e:	e7bd      	b.n	8001d1c <LL_USART_Init+0x80>
 8001da0:	40011000 	.word	0x40011000
 8001da4:	40004400 	.word	0x40004400
 8001da8:	40004800 	.word	0x40004800
 8001dac:	51eb851f 	.word	0x51eb851f

08001db0 <__errno>:
 8001db0:	4b01      	ldr	r3, [pc, #4]	; (8001db8 <__errno+0x8>)
 8001db2:	6818      	ldr	r0, [r3, #0]
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	20000010 	.word	0x20000010

08001dbc <__libc_init_array>:
 8001dbc:	b570      	push	{r4, r5, r6, lr}
 8001dbe:	4d0d      	ldr	r5, [pc, #52]	; (8001df4 <__libc_init_array+0x38>)
 8001dc0:	4c0d      	ldr	r4, [pc, #52]	; (8001df8 <__libc_init_array+0x3c>)
 8001dc2:	1b64      	subs	r4, r4, r5
 8001dc4:	10a4      	asrs	r4, r4, #2
 8001dc6:	2600      	movs	r6, #0
 8001dc8:	42a6      	cmp	r6, r4
 8001dca:	d109      	bne.n	8001de0 <__libc_init_array+0x24>
 8001dcc:	4d0b      	ldr	r5, [pc, #44]	; (8001dfc <__libc_init_array+0x40>)
 8001dce:	4c0c      	ldr	r4, [pc, #48]	; (8001e00 <__libc_init_array+0x44>)
 8001dd0:	f000 ffec 	bl	8002dac <_init>
 8001dd4:	1b64      	subs	r4, r4, r5
 8001dd6:	10a4      	asrs	r4, r4, #2
 8001dd8:	2600      	movs	r6, #0
 8001dda:	42a6      	cmp	r6, r4
 8001ddc:	d105      	bne.n	8001dea <__libc_init_array+0x2e>
 8001dde:	bd70      	pop	{r4, r5, r6, pc}
 8001de0:	f855 3b04 	ldr.w	r3, [r5], #4
 8001de4:	4798      	blx	r3
 8001de6:	3601      	adds	r6, #1
 8001de8:	e7ee      	b.n	8001dc8 <__libc_init_array+0xc>
 8001dea:	f855 3b04 	ldr.w	r3, [r5], #4
 8001dee:	4798      	blx	r3
 8001df0:	3601      	adds	r6, #1
 8001df2:	e7f2      	b.n	8001dda <__libc_init_array+0x1e>
 8001df4:	08002f60 	.word	0x08002f60
 8001df8:	08002f60 	.word	0x08002f60
 8001dfc:	08002f60 	.word	0x08002f60
 8001e00:	08002f64 	.word	0x08002f64

08001e04 <memset>:
 8001e04:	4402      	add	r2, r0
 8001e06:	4603      	mov	r3, r0
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d100      	bne.n	8001e0e <memset+0xa>
 8001e0c:	4770      	bx	lr
 8001e0e:	f803 1b01 	strb.w	r1, [r3], #1
 8001e12:	e7f9      	b.n	8001e08 <memset+0x4>

08001e14 <iprintf>:
 8001e14:	b40f      	push	{r0, r1, r2, r3}
 8001e16:	4b0a      	ldr	r3, [pc, #40]	; (8001e40 <iprintf+0x2c>)
 8001e18:	b513      	push	{r0, r1, r4, lr}
 8001e1a:	681c      	ldr	r4, [r3, #0]
 8001e1c:	b124      	cbz	r4, 8001e28 <iprintf+0x14>
 8001e1e:	69a3      	ldr	r3, [r4, #24]
 8001e20:	b913      	cbnz	r3, 8001e28 <iprintf+0x14>
 8001e22:	4620      	mov	r0, r4
 8001e24:	f000 fa5e 	bl	80022e4 <__sinit>
 8001e28:	ab05      	add	r3, sp, #20
 8001e2a:	9a04      	ldr	r2, [sp, #16]
 8001e2c:	68a1      	ldr	r1, [r4, #8]
 8001e2e:	9301      	str	r3, [sp, #4]
 8001e30:	4620      	mov	r0, r4
 8001e32:	f000 fc2f 	bl	8002694 <_vfiprintf_r>
 8001e36:	b002      	add	sp, #8
 8001e38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001e3c:	b004      	add	sp, #16
 8001e3e:	4770      	bx	lr
 8001e40:	20000010 	.word	0x20000010

08001e44 <_puts_r>:
 8001e44:	b570      	push	{r4, r5, r6, lr}
 8001e46:	460e      	mov	r6, r1
 8001e48:	4605      	mov	r5, r0
 8001e4a:	b118      	cbz	r0, 8001e54 <_puts_r+0x10>
 8001e4c:	6983      	ldr	r3, [r0, #24]
 8001e4e:	b90b      	cbnz	r3, 8001e54 <_puts_r+0x10>
 8001e50:	f000 fa48 	bl	80022e4 <__sinit>
 8001e54:	69ab      	ldr	r3, [r5, #24]
 8001e56:	68ac      	ldr	r4, [r5, #8]
 8001e58:	b913      	cbnz	r3, 8001e60 <_puts_r+0x1c>
 8001e5a:	4628      	mov	r0, r5
 8001e5c:	f000 fa42 	bl	80022e4 <__sinit>
 8001e60:	4b2c      	ldr	r3, [pc, #176]	; (8001f14 <_puts_r+0xd0>)
 8001e62:	429c      	cmp	r4, r3
 8001e64:	d120      	bne.n	8001ea8 <_puts_r+0x64>
 8001e66:	686c      	ldr	r4, [r5, #4]
 8001e68:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001e6a:	07db      	lsls	r3, r3, #31
 8001e6c:	d405      	bmi.n	8001e7a <_puts_r+0x36>
 8001e6e:	89a3      	ldrh	r3, [r4, #12]
 8001e70:	0598      	lsls	r0, r3, #22
 8001e72:	d402      	bmi.n	8001e7a <_puts_r+0x36>
 8001e74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001e76:	f000 fad3 	bl	8002420 <__retarget_lock_acquire_recursive>
 8001e7a:	89a3      	ldrh	r3, [r4, #12]
 8001e7c:	0719      	lsls	r1, r3, #28
 8001e7e:	d51d      	bpl.n	8001ebc <_puts_r+0x78>
 8001e80:	6923      	ldr	r3, [r4, #16]
 8001e82:	b1db      	cbz	r3, 8001ebc <_puts_r+0x78>
 8001e84:	3e01      	subs	r6, #1
 8001e86:	68a3      	ldr	r3, [r4, #8]
 8001e88:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001e8c:	3b01      	subs	r3, #1
 8001e8e:	60a3      	str	r3, [r4, #8]
 8001e90:	bb39      	cbnz	r1, 8001ee2 <_puts_r+0x9e>
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	da38      	bge.n	8001f08 <_puts_r+0xc4>
 8001e96:	4622      	mov	r2, r4
 8001e98:	210a      	movs	r1, #10
 8001e9a:	4628      	mov	r0, r5
 8001e9c:	f000 f848 	bl	8001f30 <__swbuf_r>
 8001ea0:	3001      	adds	r0, #1
 8001ea2:	d011      	beq.n	8001ec8 <_puts_r+0x84>
 8001ea4:	250a      	movs	r5, #10
 8001ea6:	e011      	b.n	8001ecc <_puts_r+0x88>
 8001ea8:	4b1b      	ldr	r3, [pc, #108]	; (8001f18 <_puts_r+0xd4>)
 8001eaa:	429c      	cmp	r4, r3
 8001eac:	d101      	bne.n	8001eb2 <_puts_r+0x6e>
 8001eae:	68ac      	ldr	r4, [r5, #8]
 8001eb0:	e7da      	b.n	8001e68 <_puts_r+0x24>
 8001eb2:	4b1a      	ldr	r3, [pc, #104]	; (8001f1c <_puts_r+0xd8>)
 8001eb4:	429c      	cmp	r4, r3
 8001eb6:	bf08      	it	eq
 8001eb8:	68ec      	ldreq	r4, [r5, #12]
 8001eba:	e7d5      	b.n	8001e68 <_puts_r+0x24>
 8001ebc:	4621      	mov	r1, r4
 8001ebe:	4628      	mov	r0, r5
 8001ec0:	f000 f888 	bl	8001fd4 <__swsetup_r>
 8001ec4:	2800      	cmp	r0, #0
 8001ec6:	d0dd      	beq.n	8001e84 <_puts_r+0x40>
 8001ec8:	f04f 35ff 	mov.w	r5, #4294967295
 8001ecc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001ece:	07da      	lsls	r2, r3, #31
 8001ed0:	d405      	bmi.n	8001ede <_puts_r+0x9a>
 8001ed2:	89a3      	ldrh	r3, [r4, #12]
 8001ed4:	059b      	lsls	r3, r3, #22
 8001ed6:	d402      	bmi.n	8001ede <_puts_r+0x9a>
 8001ed8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001eda:	f000 faa2 	bl	8002422 <__retarget_lock_release_recursive>
 8001ede:	4628      	mov	r0, r5
 8001ee0:	bd70      	pop	{r4, r5, r6, pc}
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	da04      	bge.n	8001ef0 <_puts_r+0xac>
 8001ee6:	69a2      	ldr	r2, [r4, #24]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	dc06      	bgt.n	8001efa <_puts_r+0xb6>
 8001eec:	290a      	cmp	r1, #10
 8001eee:	d004      	beq.n	8001efa <_puts_r+0xb6>
 8001ef0:	6823      	ldr	r3, [r4, #0]
 8001ef2:	1c5a      	adds	r2, r3, #1
 8001ef4:	6022      	str	r2, [r4, #0]
 8001ef6:	7019      	strb	r1, [r3, #0]
 8001ef8:	e7c5      	b.n	8001e86 <_puts_r+0x42>
 8001efa:	4622      	mov	r2, r4
 8001efc:	4628      	mov	r0, r5
 8001efe:	f000 f817 	bl	8001f30 <__swbuf_r>
 8001f02:	3001      	adds	r0, #1
 8001f04:	d1bf      	bne.n	8001e86 <_puts_r+0x42>
 8001f06:	e7df      	b.n	8001ec8 <_puts_r+0x84>
 8001f08:	6823      	ldr	r3, [r4, #0]
 8001f0a:	250a      	movs	r5, #10
 8001f0c:	1c5a      	adds	r2, r3, #1
 8001f0e:	6022      	str	r2, [r4, #0]
 8001f10:	701d      	strb	r5, [r3, #0]
 8001f12:	e7db      	b.n	8001ecc <_puts_r+0x88>
 8001f14:	08002ee4 	.word	0x08002ee4
 8001f18:	08002f04 	.word	0x08002f04
 8001f1c:	08002ec4 	.word	0x08002ec4

08001f20 <puts>:
 8001f20:	4b02      	ldr	r3, [pc, #8]	; (8001f2c <puts+0xc>)
 8001f22:	4601      	mov	r1, r0
 8001f24:	6818      	ldr	r0, [r3, #0]
 8001f26:	f7ff bf8d 	b.w	8001e44 <_puts_r>
 8001f2a:	bf00      	nop
 8001f2c:	20000010 	.word	0x20000010

08001f30 <__swbuf_r>:
 8001f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f32:	460e      	mov	r6, r1
 8001f34:	4614      	mov	r4, r2
 8001f36:	4605      	mov	r5, r0
 8001f38:	b118      	cbz	r0, 8001f42 <__swbuf_r+0x12>
 8001f3a:	6983      	ldr	r3, [r0, #24]
 8001f3c:	b90b      	cbnz	r3, 8001f42 <__swbuf_r+0x12>
 8001f3e:	f000 f9d1 	bl	80022e4 <__sinit>
 8001f42:	4b21      	ldr	r3, [pc, #132]	; (8001fc8 <__swbuf_r+0x98>)
 8001f44:	429c      	cmp	r4, r3
 8001f46:	d12b      	bne.n	8001fa0 <__swbuf_r+0x70>
 8001f48:	686c      	ldr	r4, [r5, #4]
 8001f4a:	69a3      	ldr	r3, [r4, #24]
 8001f4c:	60a3      	str	r3, [r4, #8]
 8001f4e:	89a3      	ldrh	r3, [r4, #12]
 8001f50:	071a      	lsls	r2, r3, #28
 8001f52:	d52f      	bpl.n	8001fb4 <__swbuf_r+0x84>
 8001f54:	6923      	ldr	r3, [r4, #16]
 8001f56:	b36b      	cbz	r3, 8001fb4 <__swbuf_r+0x84>
 8001f58:	6923      	ldr	r3, [r4, #16]
 8001f5a:	6820      	ldr	r0, [r4, #0]
 8001f5c:	1ac0      	subs	r0, r0, r3
 8001f5e:	6963      	ldr	r3, [r4, #20]
 8001f60:	b2f6      	uxtb	r6, r6
 8001f62:	4283      	cmp	r3, r0
 8001f64:	4637      	mov	r7, r6
 8001f66:	dc04      	bgt.n	8001f72 <__swbuf_r+0x42>
 8001f68:	4621      	mov	r1, r4
 8001f6a:	4628      	mov	r0, r5
 8001f6c:	f000 f926 	bl	80021bc <_fflush_r>
 8001f70:	bb30      	cbnz	r0, 8001fc0 <__swbuf_r+0x90>
 8001f72:	68a3      	ldr	r3, [r4, #8]
 8001f74:	3b01      	subs	r3, #1
 8001f76:	60a3      	str	r3, [r4, #8]
 8001f78:	6823      	ldr	r3, [r4, #0]
 8001f7a:	1c5a      	adds	r2, r3, #1
 8001f7c:	6022      	str	r2, [r4, #0]
 8001f7e:	701e      	strb	r6, [r3, #0]
 8001f80:	6963      	ldr	r3, [r4, #20]
 8001f82:	3001      	adds	r0, #1
 8001f84:	4283      	cmp	r3, r0
 8001f86:	d004      	beq.n	8001f92 <__swbuf_r+0x62>
 8001f88:	89a3      	ldrh	r3, [r4, #12]
 8001f8a:	07db      	lsls	r3, r3, #31
 8001f8c:	d506      	bpl.n	8001f9c <__swbuf_r+0x6c>
 8001f8e:	2e0a      	cmp	r6, #10
 8001f90:	d104      	bne.n	8001f9c <__swbuf_r+0x6c>
 8001f92:	4621      	mov	r1, r4
 8001f94:	4628      	mov	r0, r5
 8001f96:	f000 f911 	bl	80021bc <_fflush_r>
 8001f9a:	b988      	cbnz	r0, 8001fc0 <__swbuf_r+0x90>
 8001f9c:	4638      	mov	r0, r7
 8001f9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001fa0:	4b0a      	ldr	r3, [pc, #40]	; (8001fcc <__swbuf_r+0x9c>)
 8001fa2:	429c      	cmp	r4, r3
 8001fa4:	d101      	bne.n	8001faa <__swbuf_r+0x7a>
 8001fa6:	68ac      	ldr	r4, [r5, #8]
 8001fa8:	e7cf      	b.n	8001f4a <__swbuf_r+0x1a>
 8001faa:	4b09      	ldr	r3, [pc, #36]	; (8001fd0 <__swbuf_r+0xa0>)
 8001fac:	429c      	cmp	r4, r3
 8001fae:	bf08      	it	eq
 8001fb0:	68ec      	ldreq	r4, [r5, #12]
 8001fb2:	e7ca      	b.n	8001f4a <__swbuf_r+0x1a>
 8001fb4:	4621      	mov	r1, r4
 8001fb6:	4628      	mov	r0, r5
 8001fb8:	f000 f80c 	bl	8001fd4 <__swsetup_r>
 8001fbc:	2800      	cmp	r0, #0
 8001fbe:	d0cb      	beq.n	8001f58 <__swbuf_r+0x28>
 8001fc0:	f04f 37ff 	mov.w	r7, #4294967295
 8001fc4:	e7ea      	b.n	8001f9c <__swbuf_r+0x6c>
 8001fc6:	bf00      	nop
 8001fc8:	08002ee4 	.word	0x08002ee4
 8001fcc:	08002f04 	.word	0x08002f04
 8001fd0:	08002ec4 	.word	0x08002ec4

08001fd4 <__swsetup_r>:
 8001fd4:	4b32      	ldr	r3, [pc, #200]	; (80020a0 <__swsetup_r+0xcc>)
 8001fd6:	b570      	push	{r4, r5, r6, lr}
 8001fd8:	681d      	ldr	r5, [r3, #0]
 8001fda:	4606      	mov	r6, r0
 8001fdc:	460c      	mov	r4, r1
 8001fde:	b125      	cbz	r5, 8001fea <__swsetup_r+0x16>
 8001fe0:	69ab      	ldr	r3, [r5, #24]
 8001fe2:	b913      	cbnz	r3, 8001fea <__swsetup_r+0x16>
 8001fe4:	4628      	mov	r0, r5
 8001fe6:	f000 f97d 	bl	80022e4 <__sinit>
 8001fea:	4b2e      	ldr	r3, [pc, #184]	; (80020a4 <__swsetup_r+0xd0>)
 8001fec:	429c      	cmp	r4, r3
 8001fee:	d10f      	bne.n	8002010 <__swsetup_r+0x3c>
 8001ff0:	686c      	ldr	r4, [r5, #4]
 8001ff2:	89a3      	ldrh	r3, [r4, #12]
 8001ff4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001ff8:	0719      	lsls	r1, r3, #28
 8001ffa:	d42c      	bmi.n	8002056 <__swsetup_r+0x82>
 8001ffc:	06dd      	lsls	r5, r3, #27
 8001ffe:	d411      	bmi.n	8002024 <__swsetup_r+0x50>
 8002000:	2309      	movs	r3, #9
 8002002:	6033      	str	r3, [r6, #0]
 8002004:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002008:	81a3      	strh	r3, [r4, #12]
 800200a:	f04f 30ff 	mov.w	r0, #4294967295
 800200e:	e03e      	b.n	800208e <__swsetup_r+0xba>
 8002010:	4b25      	ldr	r3, [pc, #148]	; (80020a8 <__swsetup_r+0xd4>)
 8002012:	429c      	cmp	r4, r3
 8002014:	d101      	bne.n	800201a <__swsetup_r+0x46>
 8002016:	68ac      	ldr	r4, [r5, #8]
 8002018:	e7eb      	b.n	8001ff2 <__swsetup_r+0x1e>
 800201a:	4b24      	ldr	r3, [pc, #144]	; (80020ac <__swsetup_r+0xd8>)
 800201c:	429c      	cmp	r4, r3
 800201e:	bf08      	it	eq
 8002020:	68ec      	ldreq	r4, [r5, #12]
 8002022:	e7e6      	b.n	8001ff2 <__swsetup_r+0x1e>
 8002024:	0758      	lsls	r0, r3, #29
 8002026:	d512      	bpl.n	800204e <__swsetup_r+0x7a>
 8002028:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800202a:	b141      	cbz	r1, 800203e <__swsetup_r+0x6a>
 800202c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002030:	4299      	cmp	r1, r3
 8002032:	d002      	beq.n	800203a <__swsetup_r+0x66>
 8002034:	4630      	mov	r0, r6
 8002036:	f000 fa59 	bl	80024ec <_free_r>
 800203a:	2300      	movs	r3, #0
 800203c:	6363      	str	r3, [r4, #52]	; 0x34
 800203e:	89a3      	ldrh	r3, [r4, #12]
 8002040:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002044:	81a3      	strh	r3, [r4, #12]
 8002046:	2300      	movs	r3, #0
 8002048:	6063      	str	r3, [r4, #4]
 800204a:	6923      	ldr	r3, [r4, #16]
 800204c:	6023      	str	r3, [r4, #0]
 800204e:	89a3      	ldrh	r3, [r4, #12]
 8002050:	f043 0308 	orr.w	r3, r3, #8
 8002054:	81a3      	strh	r3, [r4, #12]
 8002056:	6923      	ldr	r3, [r4, #16]
 8002058:	b94b      	cbnz	r3, 800206e <__swsetup_r+0x9a>
 800205a:	89a3      	ldrh	r3, [r4, #12]
 800205c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002060:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002064:	d003      	beq.n	800206e <__swsetup_r+0x9a>
 8002066:	4621      	mov	r1, r4
 8002068:	4630      	mov	r0, r6
 800206a:	f000 f9ff 	bl	800246c <__smakebuf_r>
 800206e:	89a0      	ldrh	r0, [r4, #12]
 8002070:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002074:	f010 0301 	ands.w	r3, r0, #1
 8002078:	d00a      	beq.n	8002090 <__swsetup_r+0xbc>
 800207a:	2300      	movs	r3, #0
 800207c:	60a3      	str	r3, [r4, #8]
 800207e:	6963      	ldr	r3, [r4, #20]
 8002080:	425b      	negs	r3, r3
 8002082:	61a3      	str	r3, [r4, #24]
 8002084:	6923      	ldr	r3, [r4, #16]
 8002086:	b943      	cbnz	r3, 800209a <__swsetup_r+0xc6>
 8002088:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800208c:	d1ba      	bne.n	8002004 <__swsetup_r+0x30>
 800208e:	bd70      	pop	{r4, r5, r6, pc}
 8002090:	0781      	lsls	r1, r0, #30
 8002092:	bf58      	it	pl
 8002094:	6963      	ldrpl	r3, [r4, #20]
 8002096:	60a3      	str	r3, [r4, #8]
 8002098:	e7f4      	b.n	8002084 <__swsetup_r+0xb0>
 800209a:	2000      	movs	r0, #0
 800209c:	e7f7      	b.n	800208e <__swsetup_r+0xba>
 800209e:	bf00      	nop
 80020a0:	20000010 	.word	0x20000010
 80020a4:	08002ee4 	.word	0x08002ee4
 80020a8:	08002f04 	.word	0x08002f04
 80020ac:	08002ec4 	.word	0x08002ec4

080020b0 <__sflush_r>:
 80020b0:	898a      	ldrh	r2, [r1, #12]
 80020b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020b6:	4605      	mov	r5, r0
 80020b8:	0710      	lsls	r0, r2, #28
 80020ba:	460c      	mov	r4, r1
 80020bc:	d458      	bmi.n	8002170 <__sflush_r+0xc0>
 80020be:	684b      	ldr	r3, [r1, #4]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	dc05      	bgt.n	80020d0 <__sflush_r+0x20>
 80020c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	dc02      	bgt.n	80020d0 <__sflush_r+0x20>
 80020ca:	2000      	movs	r0, #0
 80020cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80020d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80020d2:	2e00      	cmp	r6, #0
 80020d4:	d0f9      	beq.n	80020ca <__sflush_r+0x1a>
 80020d6:	2300      	movs	r3, #0
 80020d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80020dc:	682f      	ldr	r7, [r5, #0]
 80020de:	602b      	str	r3, [r5, #0]
 80020e0:	d032      	beq.n	8002148 <__sflush_r+0x98>
 80020e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80020e4:	89a3      	ldrh	r3, [r4, #12]
 80020e6:	075a      	lsls	r2, r3, #29
 80020e8:	d505      	bpl.n	80020f6 <__sflush_r+0x46>
 80020ea:	6863      	ldr	r3, [r4, #4]
 80020ec:	1ac0      	subs	r0, r0, r3
 80020ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80020f0:	b10b      	cbz	r3, 80020f6 <__sflush_r+0x46>
 80020f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80020f4:	1ac0      	subs	r0, r0, r3
 80020f6:	2300      	movs	r3, #0
 80020f8:	4602      	mov	r2, r0
 80020fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80020fc:	6a21      	ldr	r1, [r4, #32]
 80020fe:	4628      	mov	r0, r5
 8002100:	47b0      	blx	r6
 8002102:	1c43      	adds	r3, r0, #1
 8002104:	89a3      	ldrh	r3, [r4, #12]
 8002106:	d106      	bne.n	8002116 <__sflush_r+0x66>
 8002108:	6829      	ldr	r1, [r5, #0]
 800210a:	291d      	cmp	r1, #29
 800210c:	d82c      	bhi.n	8002168 <__sflush_r+0xb8>
 800210e:	4a2a      	ldr	r2, [pc, #168]	; (80021b8 <__sflush_r+0x108>)
 8002110:	40ca      	lsrs	r2, r1
 8002112:	07d6      	lsls	r6, r2, #31
 8002114:	d528      	bpl.n	8002168 <__sflush_r+0xb8>
 8002116:	2200      	movs	r2, #0
 8002118:	6062      	str	r2, [r4, #4]
 800211a:	04d9      	lsls	r1, r3, #19
 800211c:	6922      	ldr	r2, [r4, #16]
 800211e:	6022      	str	r2, [r4, #0]
 8002120:	d504      	bpl.n	800212c <__sflush_r+0x7c>
 8002122:	1c42      	adds	r2, r0, #1
 8002124:	d101      	bne.n	800212a <__sflush_r+0x7a>
 8002126:	682b      	ldr	r3, [r5, #0]
 8002128:	b903      	cbnz	r3, 800212c <__sflush_r+0x7c>
 800212a:	6560      	str	r0, [r4, #84]	; 0x54
 800212c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800212e:	602f      	str	r7, [r5, #0]
 8002130:	2900      	cmp	r1, #0
 8002132:	d0ca      	beq.n	80020ca <__sflush_r+0x1a>
 8002134:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002138:	4299      	cmp	r1, r3
 800213a:	d002      	beq.n	8002142 <__sflush_r+0x92>
 800213c:	4628      	mov	r0, r5
 800213e:	f000 f9d5 	bl	80024ec <_free_r>
 8002142:	2000      	movs	r0, #0
 8002144:	6360      	str	r0, [r4, #52]	; 0x34
 8002146:	e7c1      	b.n	80020cc <__sflush_r+0x1c>
 8002148:	6a21      	ldr	r1, [r4, #32]
 800214a:	2301      	movs	r3, #1
 800214c:	4628      	mov	r0, r5
 800214e:	47b0      	blx	r6
 8002150:	1c41      	adds	r1, r0, #1
 8002152:	d1c7      	bne.n	80020e4 <__sflush_r+0x34>
 8002154:	682b      	ldr	r3, [r5, #0]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d0c4      	beq.n	80020e4 <__sflush_r+0x34>
 800215a:	2b1d      	cmp	r3, #29
 800215c:	d001      	beq.n	8002162 <__sflush_r+0xb2>
 800215e:	2b16      	cmp	r3, #22
 8002160:	d101      	bne.n	8002166 <__sflush_r+0xb6>
 8002162:	602f      	str	r7, [r5, #0]
 8002164:	e7b1      	b.n	80020ca <__sflush_r+0x1a>
 8002166:	89a3      	ldrh	r3, [r4, #12]
 8002168:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800216c:	81a3      	strh	r3, [r4, #12]
 800216e:	e7ad      	b.n	80020cc <__sflush_r+0x1c>
 8002170:	690f      	ldr	r7, [r1, #16]
 8002172:	2f00      	cmp	r7, #0
 8002174:	d0a9      	beq.n	80020ca <__sflush_r+0x1a>
 8002176:	0793      	lsls	r3, r2, #30
 8002178:	680e      	ldr	r6, [r1, #0]
 800217a:	bf08      	it	eq
 800217c:	694b      	ldreq	r3, [r1, #20]
 800217e:	600f      	str	r7, [r1, #0]
 8002180:	bf18      	it	ne
 8002182:	2300      	movne	r3, #0
 8002184:	eba6 0807 	sub.w	r8, r6, r7
 8002188:	608b      	str	r3, [r1, #8]
 800218a:	f1b8 0f00 	cmp.w	r8, #0
 800218e:	dd9c      	ble.n	80020ca <__sflush_r+0x1a>
 8002190:	6a21      	ldr	r1, [r4, #32]
 8002192:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002194:	4643      	mov	r3, r8
 8002196:	463a      	mov	r2, r7
 8002198:	4628      	mov	r0, r5
 800219a:	47b0      	blx	r6
 800219c:	2800      	cmp	r0, #0
 800219e:	dc06      	bgt.n	80021ae <__sflush_r+0xfe>
 80021a0:	89a3      	ldrh	r3, [r4, #12]
 80021a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021a6:	81a3      	strh	r3, [r4, #12]
 80021a8:	f04f 30ff 	mov.w	r0, #4294967295
 80021ac:	e78e      	b.n	80020cc <__sflush_r+0x1c>
 80021ae:	4407      	add	r7, r0
 80021b0:	eba8 0800 	sub.w	r8, r8, r0
 80021b4:	e7e9      	b.n	800218a <__sflush_r+0xda>
 80021b6:	bf00      	nop
 80021b8:	20400001 	.word	0x20400001

080021bc <_fflush_r>:
 80021bc:	b538      	push	{r3, r4, r5, lr}
 80021be:	690b      	ldr	r3, [r1, #16]
 80021c0:	4605      	mov	r5, r0
 80021c2:	460c      	mov	r4, r1
 80021c4:	b913      	cbnz	r3, 80021cc <_fflush_r+0x10>
 80021c6:	2500      	movs	r5, #0
 80021c8:	4628      	mov	r0, r5
 80021ca:	bd38      	pop	{r3, r4, r5, pc}
 80021cc:	b118      	cbz	r0, 80021d6 <_fflush_r+0x1a>
 80021ce:	6983      	ldr	r3, [r0, #24]
 80021d0:	b90b      	cbnz	r3, 80021d6 <_fflush_r+0x1a>
 80021d2:	f000 f887 	bl	80022e4 <__sinit>
 80021d6:	4b14      	ldr	r3, [pc, #80]	; (8002228 <_fflush_r+0x6c>)
 80021d8:	429c      	cmp	r4, r3
 80021da:	d11b      	bne.n	8002214 <_fflush_r+0x58>
 80021dc:	686c      	ldr	r4, [r5, #4]
 80021de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d0ef      	beq.n	80021c6 <_fflush_r+0xa>
 80021e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80021e8:	07d0      	lsls	r0, r2, #31
 80021ea:	d404      	bmi.n	80021f6 <_fflush_r+0x3a>
 80021ec:	0599      	lsls	r1, r3, #22
 80021ee:	d402      	bmi.n	80021f6 <_fflush_r+0x3a>
 80021f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80021f2:	f000 f915 	bl	8002420 <__retarget_lock_acquire_recursive>
 80021f6:	4628      	mov	r0, r5
 80021f8:	4621      	mov	r1, r4
 80021fa:	f7ff ff59 	bl	80020b0 <__sflush_r>
 80021fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002200:	07da      	lsls	r2, r3, #31
 8002202:	4605      	mov	r5, r0
 8002204:	d4e0      	bmi.n	80021c8 <_fflush_r+0xc>
 8002206:	89a3      	ldrh	r3, [r4, #12]
 8002208:	059b      	lsls	r3, r3, #22
 800220a:	d4dd      	bmi.n	80021c8 <_fflush_r+0xc>
 800220c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800220e:	f000 f908 	bl	8002422 <__retarget_lock_release_recursive>
 8002212:	e7d9      	b.n	80021c8 <_fflush_r+0xc>
 8002214:	4b05      	ldr	r3, [pc, #20]	; (800222c <_fflush_r+0x70>)
 8002216:	429c      	cmp	r4, r3
 8002218:	d101      	bne.n	800221e <_fflush_r+0x62>
 800221a:	68ac      	ldr	r4, [r5, #8]
 800221c:	e7df      	b.n	80021de <_fflush_r+0x22>
 800221e:	4b04      	ldr	r3, [pc, #16]	; (8002230 <_fflush_r+0x74>)
 8002220:	429c      	cmp	r4, r3
 8002222:	bf08      	it	eq
 8002224:	68ec      	ldreq	r4, [r5, #12]
 8002226:	e7da      	b.n	80021de <_fflush_r+0x22>
 8002228:	08002ee4 	.word	0x08002ee4
 800222c:	08002f04 	.word	0x08002f04
 8002230:	08002ec4 	.word	0x08002ec4

08002234 <std>:
 8002234:	2300      	movs	r3, #0
 8002236:	b510      	push	{r4, lr}
 8002238:	4604      	mov	r4, r0
 800223a:	e9c0 3300 	strd	r3, r3, [r0]
 800223e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002242:	6083      	str	r3, [r0, #8]
 8002244:	8181      	strh	r1, [r0, #12]
 8002246:	6643      	str	r3, [r0, #100]	; 0x64
 8002248:	81c2      	strh	r2, [r0, #14]
 800224a:	6183      	str	r3, [r0, #24]
 800224c:	4619      	mov	r1, r3
 800224e:	2208      	movs	r2, #8
 8002250:	305c      	adds	r0, #92	; 0x5c
 8002252:	f7ff fdd7 	bl	8001e04 <memset>
 8002256:	4b05      	ldr	r3, [pc, #20]	; (800226c <std+0x38>)
 8002258:	6263      	str	r3, [r4, #36]	; 0x24
 800225a:	4b05      	ldr	r3, [pc, #20]	; (8002270 <std+0x3c>)
 800225c:	62a3      	str	r3, [r4, #40]	; 0x28
 800225e:	4b05      	ldr	r3, [pc, #20]	; (8002274 <std+0x40>)
 8002260:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002262:	4b05      	ldr	r3, [pc, #20]	; (8002278 <std+0x44>)
 8002264:	6224      	str	r4, [r4, #32]
 8002266:	6323      	str	r3, [r4, #48]	; 0x30
 8002268:	bd10      	pop	{r4, pc}
 800226a:	bf00      	nop
 800226c:	08002c3d 	.word	0x08002c3d
 8002270:	08002c5f 	.word	0x08002c5f
 8002274:	08002c97 	.word	0x08002c97
 8002278:	08002cbb 	.word	0x08002cbb

0800227c <_cleanup_r>:
 800227c:	4901      	ldr	r1, [pc, #4]	; (8002284 <_cleanup_r+0x8>)
 800227e:	f000 b8af 	b.w	80023e0 <_fwalk_reent>
 8002282:	bf00      	nop
 8002284:	080021bd 	.word	0x080021bd

08002288 <__sfmoreglue>:
 8002288:	b570      	push	{r4, r5, r6, lr}
 800228a:	1e4a      	subs	r2, r1, #1
 800228c:	2568      	movs	r5, #104	; 0x68
 800228e:	4355      	muls	r5, r2
 8002290:	460e      	mov	r6, r1
 8002292:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002296:	f000 f979 	bl	800258c <_malloc_r>
 800229a:	4604      	mov	r4, r0
 800229c:	b140      	cbz	r0, 80022b0 <__sfmoreglue+0x28>
 800229e:	2100      	movs	r1, #0
 80022a0:	e9c0 1600 	strd	r1, r6, [r0]
 80022a4:	300c      	adds	r0, #12
 80022a6:	60a0      	str	r0, [r4, #8]
 80022a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80022ac:	f7ff fdaa 	bl	8001e04 <memset>
 80022b0:	4620      	mov	r0, r4
 80022b2:	bd70      	pop	{r4, r5, r6, pc}

080022b4 <__sfp_lock_acquire>:
 80022b4:	4801      	ldr	r0, [pc, #4]	; (80022bc <__sfp_lock_acquire+0x8>)
 80022b6:	f000 b8b3 	b.w	8002420 <__retarget_lock_acquire_recursive>
 80022ba:	bf00      	nop
 80022bc:	200002f8 	.word	0x200002f8

080022c0 <__sfp_lock_release>:
 80022c0:	4801      	ldr	r0, [pc, #4]	; (80022c8 <__sfp_lock_release+0x8>)
 80022c2:	f000 b8ae 	b.w	8002422 <__retarget_lock_release_recursive>
 80022c6:	bf00      	nop
 80022c8:	200002f8 	.word	0x200002f8

080022cc <__sinit_lock_acquire>:
 80022cc:	4801      	ldr	r0, [pc, #4]	; (80022d4 <__sinit_lock_acquire+0x8>)
 80022ce:	f000 b8a7 	b.w	8002420 <__retarget_lock_acquire_recursive>
 80022d2:	bf00      	nop
 80022d4:	200002f3 	.word	0x200002f3

080022d8 <__sinit_lock_release>:
 80022d8:	4801      	ldr	r0, [pc, #4]	; (80022e0 <__sinit_lock_release+0x8>)
 80022da:	f000 b8a2 	b.w	8002422 <__retarget_lock_release_recursive>
 80022de:	bf00      	nop
 80022e0:	200002f3 	.word	0x200002f3

080022e4 <__sinit>:
 80022e4:	b510      	push	{r4, lr}
 80022e6:	4604      	mov	r4, r0
 80022e8:	f7ff fff0 	bl	80022cc <__sinit_lock_acquire>
 80022ec:	69a3      	ldr	r3, [r4, #24]
 80022ee:	b11b      	cbz	r3, 80022f8 <__sinit+0x14>
 80022f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80022f4:	f7ff bff0 	b.w	80022d8 <__sinit_lock_release>
 80022f8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80022fc:	6523      	str	r3, [r4, #80]	; 0x50
 80022fe:	4b13      	ldr	r3, [pc, #76]	; (800234c <__sinit+0x68>)
 8002300:	4a13      	ldr	r2, [pc, #76]	; (8002350 <__sinit+0x6c>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	62a2      	str	r2, [r4, #40]	; 0x28
 8002306:	42a3      	cmp	r3, r4
 8002308:	bf04      	itt	eq
 800230a:	2301      	moveq	r3, #1
 800230c:	61a3      	streq	r3, [r4, #24]
 800230e:	4620      	mov	r0, r4
 8002310:	f000 f820 	bl	8002354 <__sfp>
 8002314:	6060      	str	r0, [r4, #4]
 8002316:	4620      	mov	r0, r4
 8002318:	f000 f81c 	bl	8002354 <__sfp>
 800231c:	60a0      	str	r0, [r4, #8]
 800231e:	4620      	mov	r0, r4
 8002320:	f000 f818 	bl	8002354 <__sfp>
 8002324:	2200      	movs	r2, #0
 8002326:	60e0      	str	r0, [r4, #12]
 8002328:	2104      	movs	r1, #4
 800232a:	6860      	ldr	r0, [r4, #4]
 800232c:	f7ff ff82 	bl	8002234 <std>
 8002330:	68a0      	ldr	r0, [r4, #8]
 8002332:	2201      	movs	r2, #1
 8002334:	2109      	movs	r1, #9
 8002336:	f7ff ff7d 	bl	8002234 <std>
 800233a:	68e0      	ldr	r0, [r4, #12]
 800233c:	2202      	movs	r2, #2
 800233e:	2112      	movs	r1, #18
 8002340:	f7ff ff78 	bl	8002234 <std>
 8002344:	2301      	movs	r3, #1
 8002346:	61a3      	str	r3, [r4, #24]
 8002348:	e7d2      	b.n	80022f0 <__sinit+0xc>
 800234a:	bf00      	nop
 800234c:	08002ec0 	.word	0x08002ec0
 8002350:	0800227d 	.word	0x0800227d

08002354 <__sfp>:
 8002354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002356:	4607      	mov	r7, r0
 8002358:	f7ff ffac 	bl	80022b4 <__sfp_lock_acquire>
 800235c:	4b1e      	ldr	r3, [pc, #120]	; (80023d8 <__sfp+0x84>)
 800235e:	681e      	ldr	r6, [r3, #0]
 8002360:	69b3      	ldr	r3, [r6, #24]
 8002362:	b913      	cbnz	r3, 800236a <__sfp+0x16>
 8002364:	4630      	mov	r0, r6
 8002366:	f7ff ffbd 	bl	80022e4 <__sinit>
 800236a:	3648      	adds	r6, #72	; 0x48
 800236c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002370:	3b01      	subs	r3, #1
 8002372:	d503      	bpl.n	800237c <__sfp+0x28>
 8002374:	6833      	ldr	r3, [r6, #0]
 8002376:	b30b      	cbz	r3, 80023bc <__sfp+0x68>
 8002378:	6836      	ldr	r6, [r6, #0]
 800237a:	e7f7      	b.n	800236c <__sfp+0x18>
 800237c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002380:	b9d5      	cbnz	r5, 80023b8 <__sfp+0x64>
 8002382:	4b16      	ldr	r3, [pc, #88]	; (80023dc <__sfp+0x88>)
 8002384:	60e3      	str	r3, [r4, #12]
 8002386:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800238a:	6665      	str	r5, [r4, #100]	; 0x64
 800238c:	f000 f847 	bl	800241e <__retarget_lock_init_recursive>
 8002390:	f7ff ff96 	bl	80022c0 <__sfp_lock_release>
 8002394:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002398:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800239c:	6025      	str	r5, [r4, #0]
 800239e:	61a5      	str	r5, [r4, #24]
 80023a0:	2208      	movs	r2, #8
 80023a2:	4629      	mov	r1, r5
 80023a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80023a8:	f7ff fd2c 	bl	8001e04 <memset>
 80023ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80023b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80023b4:	4620      	mov	r0, r4
 80023b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80023b8:	3468      	adds	r4, #104	; 0x68
 80023ba:	e7d9      	b.n	8002370 <__sfp+0x1c>
 80023bc:	2104      	movs	r1, #4
 80023be:	4638      	mov	r0, r7
 80023c0:	f7ff ff62 	bl	8002288 <__sfmoreglue>
 80023c4:	4604      	mov	r4, r0
 80023c6:	6030      	str	r0, [r6, #0]
 80023c8:	2800      	cmp	r0, #0
 80023ca:	d1d5      	bne.n	8002378 <__sfp+0x24>
 80023cc:	f7ff ff78 	bl	80022c0 <__sfp_lock_release>
 80023d0:	230c      	movs	r3, #12
 80023d2:	603b      	str	r3, [r7, #0]
 80023d4:	e7ee      	b.n	80023b4 <__sfp+0x60>
 80023d6:	bf00      	nop
 80023d8:	08002ec0 	.word	0x08002ec0
 80023dc:	ffff0001 	.word	0xffff0001

080023e0 <_fwalk_reent>:
 80023e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80023e4:	4606      	mov	r6, r0
 80023e6:	4688      	mov	r8, r1
 80023e8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80023ec:	2700      	movs	r7, #0
 80023ee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80023f2:	f1b9 0901 	subs.w	r9, r9, #1
 80023f6:	d505      	bpl.n	8002404 <_fwalk_reent+0x24>
 80023f8:	6824      	ldr	r4, [r4, #0]
 80023fa:	2c00      	cmp	r4, #0
 80023fc:	d1f7      	bne.n	80023ee <_fwalk_reent+0xe>
 80023fe:	4638      	mov	r0, r7
 8002400:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002404:	89ab      	ldrh	r3, [r5, #12]
 8002406:	2b01      	cmp	r3, #1
 8002408:	d907      	bls.n	800241a <_fwalk_reent+0x3a>
 800240a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800240e:	3301      	adds	r3, #1
 8002410:	d003      	beq.n	800241a <_fwalk_reent+0x3a>
 8002412:	4629      	mov	r1, r5
 8002414:	4630      	mov	r0, r6
 8002416:	47c0      	blx	r8
 8002418:	4307      	orrs	r7, r0
 800241a:	3568      	adds	r5, #104	; 0x68
 800241c:	e7e9      	b.n	80023f2 <_fwalk_reent+0x12>

0800241e <__retarget_lock_init_recursive>:
 800241e:	4770      	bx	lr

08002420 <__retarget_lock_acquire_recursive>:
 8002420:	4770      	bx	lr

08002422 <__retarget_lock_release_recursive>:
 8002422:	4770      	bx	lr

08002424 <__swhatbuf_r>:
 8002424:	b570      	push	{r4, r5, r6, lr}
 8002426:	460e      	mov	r6, r1
 8002428:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800242c:	2900      	cmp	r1, #0
 800242e:	b096      	sub	sp, #88	; 0x58
 8002430:	4614      	mov	r4, r2
 8002432:	461d      	mov	r5, r3
 8002434:	da07      	bge.n	8002446 <__swhatbuf_r+0x22>
 8002436:	2300      	movs	r3, #0
 8002438:	602b      	str	r3, [r5, #0]
 800243a:	89b3      	ldrh	r3, [r6, #12]
 800243c:	061a      	lsls	r2, r3, #24
 800243e:	d410      	bmi.n	8002462 <__swhatbuf_r+0x3e>
 8002440:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002444:	e00e      	b.n	8002464 <__swhatbuf_r+0x40>
 8002446:	466a      	mov	r2, sp
 8002448:	f000 fc5e 	bl	8002d08 <_fstat_r>
 800244c:	2800      	cmp	r0, #0
 800244e:	dbf2      	blt.n	8002436 <__swhatbuf_r+0x12>
 8002450:	9a01      	ldr	r2, [sp, #4]
 8002452:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002456:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800245a:	425a      	negs	r2, r3
 800245c:	415a      	adcs	r2, r3
 800245e:	602a      	str	r2, [r5, #0]
 8002460:	e7ee      	b.n	8002440 <__swhatbuf_r+0x1c>
 8002462:	2340      	movs	r3, #64	; 0x40
 8002464:	2000      	movs	r0, #0
 8002466:	6023      	str	r3, [r4, #0]
 8002468:	b016      	add	sp, #88	; 0x58
 800246a:	bd70      	pop	{r4, r5, r6, pc}

0800246c <__smakebuf_r>:
 800246c:	898b      	ldrh	r3, [r1, #12]
 800246e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002470:	079d      	lsls	r5, r3, #30
 8002472:	4606      	mov	r6, r0
 8002474:	460c      	mov	r4, r1
 8002476:	d507      	bpl.n	8002488 <__smakebuf_r+0x1c>
 8002478:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800247c:	6023      	str	r3, [r4, #0]
 800247e:	6123      	str	r3, [r4, #16]
 8002480:	2301      	movs	r3, #1
 8002482:	6163      	str	r3, [r4, #20]
 8002484:	b002      	add	sp, #8
 8002486:	bd70      	pop	{r4, r5, r6, pc}
 8002488:	ab01      	add	r3, sp, #4
 800248a:	466a      	mov	r2, sp
 800248c:	f7ff ffca 	bl	8002424 <__swhatbuf_r>
 8002490:	9900      	ldr	r1, [sp, #0]
 8002492:	4605      	mov	r5, r0
 8002494:	4630      	mov	r0, r6
 8002496:	f000 f879 	bl	800258c <_malloc_r>
 800249a:	b948      	cbnz	r0, 80024b0 <__smakebuf_r+0x44>
 800249c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80024a0:	059a      	lsls	r2, r3, #22
 80024a2:	d4ef      	bmi.n	8002484 <__smakebuf_r+0x18>
 80024a4:	f023 0303 	bic.w	r3, r3, #3
 80024a8:	f043 0302 	orr.w	r3, r3, #2
 80024ac:	81a3      	strh	r3, [r4, #12]
 80024ae:	e7e3      	b.n	8002478 <__smakebuf_r+0xc>
 80024b0:	4b0d      	ldr	r3, [pc, #52]	; (80024e8 <__smakebuf_r+0x7c>)
 80024b2:	62b3      	str	r3, [r6, #40]	; 0x28
 80024b4:	89a3      	ldrh	r3, [r4, #12]
 80024b6:	6020      	str	r0, [r4, #0]
 80024b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024bc:	81a3      	strh	r3, [r4, #12]
 80024be:	9b00      	ldr	r3, [sp, #0]
 80024c0:	6163      	str	r3, [r4, #20]
 80024c2:	9b01      	ldr	r3, [sp, #4]
 80024c4:	6120      	str	r0, [r4, #16]
 80024c6:	b15b      	cbz	r3, 80024e0 <__smakebuf_r+0x74>
 80024c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80024cc:	4630      	mov	r0, r6
 80024ce:	f000 fc2d 	bl	8002d2c <_isatty_r>
 80024d2:	b128      	cbz	r0, 80024e0 <__smakebuf_r+0x74>
 80024d4:	89a3      	ldrh	r3, [r4, #12]
 80024d6:	f023 0303 	bic.w	r3, r3, #3
 80024da:	f043 0301 	orr.w	r3, r3, #1
 80024de:	81a3      	strh	r3, [r4, #12]
 80024e0:	89a0      	ldrh	r0, [r4, #12]
 80024e2:	4305      	orrs	r5, r0
 80024e4:	81a5      	strh	r5, [r4, #12]
 80024e6:	e7cd      	b.n	8002484 <__smakebuf_r+0x18>
 80024e8:	0800227d 	.word	0x0800227d

080024ec <_free_r>:
 80024ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80024ee:	2900      	cmp	r1, #0
 80024f0:	d048      	beq.n	8002584 <_free_r+0x98>
 80024f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80024f6:	9001      	str	r0, [sp, #4]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	f1a1 0404 	sub.w	r4, r1, #4
 80024fe:	bfb8      	it	lt
 8002500:	18e4      	addlt	r4, r4, r3
 8002502:	f000 fc35 	bl	8002d70 <__malloc_lock>
 8002506:	4a20      	ldr	r2, [pc, #128]	; (8002588 <_free_r+0x9c>)
 8002508:	9801      	ldr	r0, [sp, #4]
 800250a:	6813      	ldr	r3, [r2, #0]
 800250c:	4615      	mov	r5, r2
 800250e:	b933      	cbnz	r3, 800251e <_free_r+0x32>
 8002510:	6063      	str	r3, [r4, #4]
 8002512:	6014      	str	r4, [r2, #0]
 8002514:	b003      	add	sp, #12
 8002516:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800251a:	f000 bc2f 	b.w	8002d7c <__malloc_unlock>
 800251e:	42a3      	cmp	r3, r4
 8002520:	d90b      	bls.n	800253a <_free_r+0x4e>
 8002522:	6821      	ldr	r1, [r4, #0]
 8002524:	1862      	adds	r2, r4, r1
 8002526:	4293      	cmp	r3, r2
 8002528:	bf04      	itt	eq
 800252a:	681a      	ldreq	r2, [r3, #0]
 800252c:	685b      	ldreq	r3, [r3, #4]
 800252e:	6063      	str	r3, [r4, #4]
 8002530:	bf04      	itt	eq
 8002532:	1852      	addeq	r2, r2, r1
 8002534:	6022      	streq	r2, [r4, #0]
 8002536:	602c      	str	r4, [r5, #0]
 8002538:	e7ec      	b.n	8002514 <_free_r+0x28>
 800253a:	461a      	mov	r2, r3
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	b10b      	cbz	r3, 8002544 <_free_r+0x58>
 8002540:	42a3      	cmp	r3, r4
 8002542:	d9fa      	bls.n	800253a <_free_r+0x4e>
 8002544:	6811      	ldr	r1, [r2, #0]
 8002546:	1855      	adds	r5, r2, r1
 8002548:	42a5      	cmp	r5, r4
 800254a:	d10b      	bne.n	8002564 <_free_r+0x78>
 800254c:	6824      	ldr	r4, [r4, #0]
 800254e:	4421      	add	r1, r4
 8002550:	1854      	adds	r4, r2, r1
 8002552:	42a3      	cmp	r3, r4
 8002554:	6011      	str	r1, [r2, #0]
 8002556:	d1dd      	bne.n	8002514 <_free_r+0x28>
 8002558:	681c      	ldr	r4, [r3, #0]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	6053      	str	r3, [r2, #4]
 800255e:	4421      	add	r1, r4
 8002560:	6011      	str	r1, [r2, #0]
 8002562:	e7d7      	b.n	8002514 <_free_r+0x28>
 8002564:	d902      	bls.n	800256c <_free_r+0x80>
 8002566:	230c      	movs	r3, #12
 8002568:	6003      	str	r3, [r0, #0]
 800256a:	e7d3      	b.n	8002514 <_free_r+0x28>
 800256c:	6825      	ldr	r5, [r4, #0]
 800256e:	1961      	adds	r1, r4, r5
 8002570:	428b      	cmp	r3, r1
 8002572:	bf04      	itt	eq
 8002574:	6819      	ldreq	r1, [r3, #0]
 8002576:	685b      	ldreq	r3, [r3, #4]
 8002578:	6063      	str	r3, [r4, #4]
 800257a:	bf04      	itt	eq
 800257c:	1949      	addeq	r1, r1, r5
 800257e:	6021      	streq	r1, [r4, #0]
 8002580:	6054      	str	r4, [r2, #4]
 8002582:	e7c7      	b.n	8002514 <_free_r+0x28>
 8002584:	b003      	add	sp, #12
 8002586:	bd30      	pop	{r4, r5, pc}
 8002588:	200000a0 	.word	0x200000a0

0800258c <_malloc_r>:
 800258c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800258e:	1ccd      	adds	r5, r1, #3
 8002590:	f025 0503 	bic.w	r5, r5, #3
 8002594:	3508      	adds	r5, #8
 8002596:	2d0c      	cmp	r5, #12
 8002598:	bf38      	it	cc
 800259a:	250c      	movcc	r5, #12
 800259c:	2d00      	cmp	r5, #0
 800259e:	4606      	mov	r6, r0
 80025a0:	db01      	blt.n	80025a6 <_malloc_r+0x1a>
 80025a2:	42a9      	cmp	r1, r5
 80025a4:	d903      	bls.n	80025ae <_malloc_r+0x22>
 80025a6:	230c      	movs	r3, #12
 80025a8:	6033      	str	r3, [r6, #0]
 80025aa:	2000      	movs	r0, #0
 80025ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80025ae:	f000 fbdf 	bl	8002d70 <__malloc_lock>
 80025b2:	4921      	ldr	r1, [pc, #132]	; (8002638 <_malloc_r+0xac>)
 80025b4:	680a      	ldr	r2, [r1, #0]
 80025b6:	4614      	mov	r4, r2
 80025b8:	b99c      	cbnz	r4, 80025e2 <_malloc_r+0x56>
 80025ba:	4f20      	ldr	r7, [pc, #128]	; (800263c <_malloc_r+0xb0>)
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	b923      	cbnz	r3, 80025ca <_malloc_r+0x3e>
 80025c0:	4621      	mov	r1, r4
 80025c2:	4630      	mov	r0, r6
 80025c4:	f000 fb2a 	bl	8002c1c <_sbrk_r>
 80025c8:	6038      	str	r0, [r7, #0]
 80025ca:	4629      	mov	r1, r5
 80025cc:	4630      	mov	r0, r6
 80025ce:	f000 fb25 	bl	8002c1c <_sbrk_r>
 80025d2:	1c43      	adds	r3, r0, #1
 80025d4:	d123      	bne.n	800261e <_malloc_r+0x92>
 80025d6:	230c      	movs	r3, #12
 80025d8:	6033      	str	r3, [r6, #0]
 80025da:	4630      	mov	r0, r6
 80025dc:	f000 fbce 	bl	8002d7c <__malloc_unlock>
 80025e0:	e7e3      	b.n	80025aa <_malloc_r+0x1e>
 80025e2:	6823      	ldr	r3, [r4, #0]
 80025e4:	1b5b      	subs	r3, r3, r5
 80025e6:	d417      	bmi.n	8002618 <_malloc_r+0x8c>
 80025e8:	2b0b      	cmp	r3, #11
 80025ea:	d903      	bls.n	80025f4 <_malloc_r+0x68>
 80025ec:	6023      	str	r3, [r4, #0]
 80025ee:	441c      	add	r4, r3
 80025f0:	6025      	str	r5, [r4, #0]
 80025f2:	e004      	b.n	80025fe <_malloc_r+0x72>
 80025f4:	6863      	ldr	r3, [r4, #4]
 80025f6:	42a2      	cmp	r2, r4
 80025f8:	bf0c      	ite	eq
 80025fa:	600b      	streq	r3, [r1, #0]
 80025fc:	6053      	strne	r3, [r2, #4]
 80025fe:	4630      	mov	r0, r6
 8002600:	f000 fbbc 	bl	8002d7c <__malloc_unlock>
 8002604:	f104 000b 	add.w	r0, r4, #11
 8002608:	1d23      	adds	r3, r4, #4
 800260a:	f020 0007 	bic.w	r0, r0, #7
 800260e:	1ac2      	subs	r2, r0, r3
 8002610:	d0cc      	beq.n	80025ac <_malloc_r+0x20>
 8002612:	1a1b      	subs	r3, r3, r0
 8002614:	50a3      	str	r3, [r4, r2]
 8002616:	e7c9      	b.n	80025ac <_malloc_r+0x20>
 8002618:	4622      	mov	r2, r4
 800261a:	6864      	ldr	r4, [r4, #4]
 800261c:	e7cc      	b.n	80025b8 <_malloc_r+0x2c>
 800261e:	1cc4      	adds	r4, r0, #3
 8002620:	f024 0403 	bic.w	r4, r4, #3
 8002624:	42a0      	cmp	r0, r4
 8002626:	d0e3      	beq.n	80025f0 <_malloc_r+0x64>
 8002628:	1a21      	subs	r1, r4, r0
 800262a:	4630      	mov	r0, r6
 800262c:	f000 faf6 	bl	8002c1c <_sbrk_r>
 8002630:	3001      	adds	r0, #1
 8002632:	d1dd      	bne.n	80025f0 <_malloc_r+0x64>
 8002634:	e7cf      	b.n	80025d6 <_malloc_r+0x4a>
 8002636:	bf00      	nop
 8002638:	200000a0 	.word	0x200000a0
 800263c:	200000a4 	.word	0x200000a4

08002640 <__sfputc_r>:
 8002640:	6893      	ldr	r3, [r2, #8]
 8002642:	3b01      	subs	r3, #1
 8002644:	2b00      	cmp	r3, #0
 8002646:	b410      	push	{r4}
 8002648:	6093      	str	r3, [r2, #8]
 800264a:	da08      	bge.n	800265e <__sfputc_r+0x1e>
 800264c:	6994      	ldr	r4, [r2, #24]
 800264e:	42a3      	cmp	r3, r4
 8002650:	db01      	blt.n	8002656 <__sfputc_r+0x16>
 8002652:	290a      	cmp	r1, #10
 8002654:	d103      	bne.n	800265e <__sfputc_r+0x1e>
 8002656:	f85d 4b04 	ldr.w	r4, [sp], #4
 800265a:	f7ff bc69 	b.w	8001f30 <__swbuf_r>
 800265e:	6813      	ldr	r3, [r2, #0]
 8002660:	1c58      	adds	r0, r3, #1
 8002662:	6010      	str	r0, [r2, #0]
 8002664:	7019      	strb	r1, [r3, #0]
 8002666:	4608      	mov	r0, r1
 8002668:	f85d 4b04 	ldr.w	r4, [sp], #4
 800266c:	4770      	bx	lr

0800266e <__sfputs_r>:
 800266e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002670:	4606      	mov	r6, r0
 8002672:	460f      	mov	r7, r1
 8002674:	4614      	mov	r4, r2
 8002676:	18d5      	adds	r5, r2, r3
 8002678:	42ac      	cmp	r4, r5
 800267a:	d101      	bne.n	8002680 <__sfputs_r+0x12>
 800267c:	2000      	movs	r0, #0
 800267e:	e007      	b.n	8002690 <__sfputs_r+0x22>
 8002680:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002684:	463a      	mov	r2, r7
 8002686:	4630      	mov	r0, r6
 8002688:	f7ff ffda 	bl	8002640 <__sfputc_r>
 800268c:	1c43      	adds	r3, r0, #1
 800268e:	d1f3      	bne.n	8002678 <__sfputs_r+0xa>
 8002690:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002694 <_vfiprintf_r>:
 8002694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002698:	460d      	mov	r5, r1
 800269a:	b09d      	sub	sp, #116	; 0x74
 800269c:	4614      	mov	r4, r2
 800269e:	4698      	mov	r8, r3
 80026a0:	4606      	mov	r6, r0
 80026a2:	b118      	cbz	r0, 80026ac <_vfiprintf_r+0x18>
 80026a4:	6983      	ldr	r3, [r0, #24]
 80026a6:	b90b      	cbnz	r3, 80026ac <_vfiprintf_r+0x18>
 80026a8:	f7ff fe1c 	bl	80022e4 <__sinit>
 80026ac:	4b89      	ldr	r3, [pc, #548]	; (80028d4 <_vfiprintf_r+0x240>)
 80026ae:	429d      	cmp	r5, r3
 80026b0:	d11b      	bne.n	80026ea <_vfiprintf_r+0x56>
 80026b2:	6875      	ldr	r5, [r6, #4]
 80026b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80026b6:	07d9      	lsls	r1, r3, #31
 80026b8:	d405      	bmi.n	80026c6 <_vfiprintf_r+0x32>
 80026ba:	89ab      	ldrh	r3, [r5, #12]
 80026bc:	059a      	lsls	r2, r3, #22
 80026be:	d402      	bmi.n	80026c6 <_vfiprintf_r+0x32>
 80026c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80026c2:	f7ff fead 	bl	8002420 <__retarget_lock_acquire_recursive>
 80026c6:	89ab      	ldrh	r3, [r5, #12]
 80026c8:	071b      	lsls	r3, r3, #28
 80026ca:	d501      	bpl.n	80026d0 <_vfiprintf_r+0x3c>
 80026cc:	692b      	ldr	r3, [r5, #16]
 80026ce:	b9eb      	cbnz	r3, 800270c <_vfiprintf_r+0x78>
 80026d0:	4629      	mov	r1, r5
 80026d2:	4630      	mov	r0, r6
 80026d4:	f7ff fc7e 	bl	8001fd4 <__swsetup_r>
 80026d8:	b1c0      	cbz	r0, 800270c <_vfiprintf_r+0x78>
 80026da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80026dc:	07dc      	lsls	r4, r3, #31
 80026de:	d50e      	bpl.n	80026fe <_vfiprintf_r+0x6a>
 80026e0:	f04f 30ff 	mov.w	r0, #4294967295
 80026e4:	b01d      	add	sp, #116	; 0x74
 80026e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80026ea:	4b7b      	ldr	r3, [pc, #492]	; (80028d8 <_vfiprintf_r+0x244>)
 80026ec:	429d      	cmp	r5, r3
 80026ee:	d101      	bne.n	80026f4 <_vfiprintf_r+0x60>
 80026f0:	68b5      	ldr	r5, [r6, #8]
 80026f2:	e7df      	b.n	80026b4 <_vfiprintf_r+0x20>
 80026f4:	4b79      	ldr	r3, [pc, #484]	; (80028dc <_vfiprintf_r+0x248>)
 80026f6:	429d      	cmp	r5, r3
 80026f8:	bf08      	it	eq
 80026fa:	68f5      	ldreq	r5, [r6, #12]
 80026fc:	e7da      	b.n	80026b4 <_vfiprintf_r+0x20>
 80026fe:	89ab      	ldrh	r3, [r5, #12]
 8002700:	0598      	lsls	r0, r3, #22
 8002702:	d4ed      	bmi.n	80026e0 <_vfiprintf_r+0x4c>
 8002704:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002706:	f7ff fe8c 	bl	8002422 <__retarget_lock_release_recursive>
 800270a:	e7e9      	b.n	80026e0 <_vfiprintf_r+0x4c>
 800270c:	2300      	movs	r3, #0
 800270e:	9309      	str	r3, [sp, #36]	; 0x24
 8002710:	2320      	movs	r3, #32
 8002712:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002716:	f8cd 800c 	str.w	r8, [sp, #12]
 800271a:	2330      	movs	r3, #48	; 0x30
 800271c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80028e0 <_vfiprintf_r+0x24c>
 8002720:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002724:	f04f 0901 	mov.w	r9, #1
 8002728:	4623      	mov	r3, r4
 800272a:	469a      	mov	sl, r3
 800272c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002730:	b10a      	cbz	r2, 8002736 <_vfiprintf_r+0xa2>
 8002732:	2a25      	cmp	r2, #37	; 0x25
 8002734:	d1f9      	bne.n	800272a <_vfiprintf_r+0x96>
 8002736:	ebba 0b04 	subs.w	fp, sl, r4
 800273a:	d00b      	beq.n	8002754 <_vfiprintf_r+0xc0>
 800273c:	465b      	mov	r3, fp
 800273e:	4622      	mov	r2, r4
 8002740:	4629      	mov	r1, r5
 8002742:	4630      	mov	r0, r6
 8002744:	f7ff ff93 	bl	800266e <__sfputs_r>
 8002748:	3001      	adds	r0, #1
 800274a:	f000 80aa 	beq.w	80028a2 <_vfiprintf_r+0x20e>
 800274e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002750:	445a      	add	r2, fp
 8002752:	9209      	str	r2, [sp, #36]	; 0x24
 8002754:	f89a 3000 	ldrb.w	r3, [sl]
 8002758:	2b00      	cmp	r3, #0
 800275a:	f000 80a2 	beq.w	80028a2 <_vfiprintf_r+0x20e>
 800275e:	2300      	movs	r3, #0
 8002760:	f04f 32ff 	mov.w	r2, #4294967295
 8002764:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002768:	f10a 0a01 	add.w	sl, sl, #1
 800276c:	9304      	str	r3, [sp, #16]
 800276e:	9307      	str	r3, [sp, #28]
 8002770:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002774:	931a      	str	r3, [sp, #104]	; 0x68
 8002776:	4654      	mov	r4, sl
 8002778:	2205      	movs	r2, #5
 800277a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800277e:	4858      	ldr	r0, [pc, #352]	; (80028e0 <_vfiprintf_r+0x24c>)
 8002780:	f7fd fd26 	bl	80001d0 <memchr>
 8002784:	9a04      	ldr	r2, [sp, #16]
 8002786:	b9d8      	cbnz	r0, 80027c0 <_vfiprintf_r+0x12c>
 8002788:	06d1      	lsls	r1, r2, #27
 800278a:	bf44      	itt	mi
 800278c:	2320      	movmi	r3, #32
 800278e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002792:	0713      	lsls	r3, r2, #28
 8002794:	bf44      	itt	mi
 8002796:	232b      	movmi	r3, #43	; 0x2b
 8002798:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800279c:	f89a 3000 	ldrb.w	r3, [sl]
 80027a0:	2b2a      	cmp	r3, #42	; 0x2a
 80027a2:	d015      	beq.n	80027d0 <_vfiprintf_r+0x13c>
 80027a4:	9a07      	ldr	r2, [sp, #28]
 80027a6:	4654      	mov	r4, sl
 80027a8:	2000      	movs	r0, #0
 80027aa:	f04f 0c0a 	mov.w	ip, #10
 80027ae:	4621      	mov	r1, r4
 80027b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80027b4:	3b30      	subs	r3, #48	; 0x30
 80027b6:	2b09      	cmp	r3, #9
 80027b8:	d94e      	bls.n	8002858 <_vfiprintf_r+0x1c4>
 80027ba:	b1b0      	cbz	r0, 80027ea <_vfiprintf_r+0x156>
 80027bc:	9207      	str	r2, [sp, #28]
 80027be:	e014      	b.n	80027ea <_vfiprintf_r+0x156>
 80027c0:	eba0 0308 	sub.w	r3, r0, r8
 80027c4:	fa09 f303 	lsl.w	r3, r9, r3
 80027c8:	4313      	orrs	r3, r2
 80027ca:	9304      	str	r3, [sp, #16]
 80027cc:	46a2      	mov	sl, r4
 80027ce:	e7d2      	b.n	8002776 <_vfiprintf_r+0xe2>
 80027d0:	9b03      	ldr	r3, [sp, #12]
 80027d2:	1d19      	adds	r1, r3, #4
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	9103      	str	r1, [sp, #12]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	bfbb      	ittet	lt
 80027dc:	425b      	neglt	r3, r3
 80027de:	f042 0202 	orrlt.w	r2, r2, #2
 80027e2:	9307      	strge	r3, [sp, #28]
 80027e4:	9307      	strlt	r3, [sp, #28]
 80027e6:	bfb8      	it	lt
 80027e8:	9204      	strlt	r2, [sp, #16]
 80027ea:	7823      	ldrb	r3, [r4, #0]
 80027ec:	2b2e      	cmp	r3, #46	; 0x2e
 80027ee:	d10c      	bne.n	800280a <_vfiprintf_r+0x176>
 80027f0:	7863      	ldrb	r3, [r4, #1]
 80027f2:	2b2a      	cmp	r3, #42	; 0x2a
 80027f4:	d135      	bne.n	8002862 <_vfiprintf_r+0x1ce>
 80027f6:	9b03      	ldr	r3, [sp, #12]
 80027f8:	1d1a      	adds	r2, r3, #4
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	9203      	str	r2, [sp, #12]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	bfb8      	it	lt
 8002802:	f04f 33ff 	movlt.w	r3, #4294967295
 8002806:	3402      	adds	r4, #2
 8002808:	9305      	str	r3, [sp, #20]
 800280a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80028f0 <_vfiprintf_r+0x25c>
 800280e:	7821      	ldrb	r1, [r4, #0]
 8002810:	2203      	movs	r2, #3
 8002812:	4650      	mov	r0, sl
 8002814:	f7fd fcdc 	bl	80001d0 <memchr>
 8002818:	b140      	cbz	r0, 800282c <_vfiprintf_r+0x198>
 800281a:	2340      	movs	r3, #64	; 0x40
 800281c:	eba0 000a 	sub.w	r0, r0, sl
 8002820:	fa03 f000 	lsl.w	r0, r3, r0
 8002824:	9b04      	ldr	r3, [sp, #16]
 8002826:	4303      	orrs	r3, r0
 8002828:	3401      	adds	r4, #1
 800282a:	9304      	str	r3, [sp, #16]
 800282c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002830:	482c      	ldr	r0, [pc, #176]	; (80028e4 <_vfiprintf_r+0x250>)
 8002832:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002836:	2206      	movs	r2, #6
 8002838:	f7fd fcca 	bl	80001d0 <memchr>
 800283c:	2800      	cmp	r0, #0
 800283e:	d03f      	beq.n	80028c0 <_vfiprintf_r+0x22c>
 8002840:	4b29      	ldr	r3, [pc, #164]	; (80028e8 <_vfiprintf_r+0x254>)
 8002842:	bb1b      	cbnz	r3, 800288c <_vfiprintf_r+0x1f8>
 8002844:	9b03      	ldr	r3, [sp, #12]
 8002846:	3307      	adds	r3, #7
 8002848:	f023 0307 	bic.w	r3, r3, #7
 800284c:	3308      	adds	r3, #8
 800284e:	9303      	str	r3, [sp, #12]
 8002850:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002852:	443b      	add	r3, r7
 8002854:	9309      	str	r3, [sp, #36]	; 0x24
 8002856:	e767      	b.n	8002728 <_vfiprintf_r+0x94>
 8002858:	fb0c 3202 	mla	r2, ip, r2, r3
 800285c:	460c      	mov	r4, r1
 800285e:	2001      	movs	r0, #1
 8002860:	e7a5      	b.n	80027ae <_vfiprintf_r+0x11a>
 8002862:	2300      	movs	r3, #0
 8002864:	3401      	adds	r4, #1
 8002866:	9305      	str	r3, [sp, #20]
 8002868:	4619      	mov	r1, r3
 800286a:	f04f 0c0a 	mov.w	ip, #10
 800286e:	4620      	mov	r0, r4
 8002870:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002874:	3a30      	subs	r2, #48	; 0x30
 8002876:	2a09      	cmp	r2, #9
 8002878:	d903      	bls.n	8002882 <_vfiprintf_r+0x1ee>
 800287a:	2b00      	cmp	r3, #0
 800287c:	d0c5      	beq.n	800280a <_vfiprintf_r+0x176>
 800287e:	9105      	str	r1, [sp, #20]
 8002880:	e7c3      	b.n	800280a <_vfiprintf_r+0x176>
 8002882:	fb0c 2101 	mla	r1, ip, r1, r2
 8002886:	4604      	mov	r4, r0
 8002888:	2301      	movs	r3, #1
 800288a:	e7f0      	b.n	800286e <_vfiprintf_r+0x1da>
 800288c:	ab03      	add	r3, sp, #12
 800288e:	9300      	str	r3, [sp, #0]
 8002890:	462a      	mov	r2, r5
 8002892:	4b16      	ldr	r3, [pc, #88]	; (80028ec <_vfiprintf_r+0x258>)
 8002894:	a904      	add	r1, sp, #16
 8002896:	4630      	mov	r0, r6
 8002898:	f3af 8000 	nop.w
 800289c:	4607      	mov	r7, r0
 800289e:	1c78      	adds	r0, r7, #1
 80028a0:	d1d6      	bne.n	8002850 <_vfiprintf_r+0x1bc>
 80028a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80028a4:	07d9      	lsls	r1, r3, #31
 80028a6:	d405      	bmi.n	80028b4 <_vfiprintf_r+0x220>
 80028a8:	89ab      	ldrh	r3, [r5, #12]
 80028aa:	059a      	lsls	r2, r3, #22
 80028ac:	d402      	bmi.n	80028b4 <_vfiprintf_r+0x220>
 80028ae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80028b0:	f7ff fdb7 	bl	8002422 <__retarget_lock_release_recursive>
 80028b4:	89ab      	ldrh	r3, [r5, #12]
 80028b6:	065b      	lsls	r3, r3, #25
 80028b8:	f53f af12 	bmi.w	80026e0 <_vfiprintf_r+0x4c>
 80028bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80028be:	e711      	b.n	80026e4 <_vfiprintf_r+0x50>
 80028c0:	ab03      	add	r3, sp, #12
 80028c2:	9300      	str	r3, [sp, #0]
 80028c4:	462a      	mov	r2, r5
 80028c6:	4b09      	ldr	r3, [pc, #36]	; (80028ec <_vfiprintf_r+0x258>)
 80028c8:	a904      	add	r1, sp, #16
 80028ca:	4630      	mov	r0, r6
 80028cc:	f000 f880 	bl	80029d0 <_printf_i>
 80028d0:	e7e4      	b.n	800289c <_vfiprintf_r+0x208>
 80028d2:	bf00      	nop
 80028d4:	08002ee4 	.word	0x08002ee4
 80028d8:	08002f04 	.word	0x08002f04
 80028dc:	08002ec4 	.word	0x08002ec4
 80028e0:	08002f24 	.word	0x08002f24
 80028e4:	08002f2e 	.word	0x08002f2e
 80028e8:	00000000 	.word	0x00000000
 80028ec:	0800266f 	.word	0x0800266f
 80028f0:	08002f2a 	.word	0x08002f2a

080028f4 <_printf_common>:
 80028f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80028f8:	4616      	mov	r6, r2
 80028fa:	4699      	mov	r9, r3
 80028fc:	688a      	ldr	r2, [r1, #8]
 80028fe:	690b      	ldr	r3, [r1, #16]
 8002900:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002904:	4293      	cmp	r3, r2
 8002906:	bfb8      	it	lt
 8002908:	4613      	movlt	r3, r2
 800290a:	6033      	str	r3, [r6, #0]
 800290c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002910:	4607      	mov	r7, r0
 8002912:	460c      	mov	r4, r1
 8002914:	b10a      	cbz	r2, 800291a <_printf_common+0x26>
 8002916:	3301      	adds	r3, #1
 8002918:	6033      	str	r3, [r6, #0]
 800291a:	6823      	ldr	r3, [r4, #0]
 800291c:	0699      	lsls	r1, r3, #26
 800291e:	bf42      	ittt	mi
 8002920:	6833      	ldrmi	r3, [r6, #0]
 8002922:	3302      	addmi	r3, #2
 8002924:	6033      	strmi	r3, [r6, #0]
 8002926:	6825      	ldr	r5, [r4, #0]
 8002928:	f015 0506 	ands.w	r5, r5, #6
 800292c:	d106      	bne.n	800293c <_printf_common+0x48>
 800292e:	f104 0a19 	add.w	sl, r4, #25
 8002932:	68e3      	ldr	r3, [r4, #12]
 8002934:	6832      	ldr	r2, [r6, #0]
 8002936:	1a9b      	subs	r3, r3, r2
 8002938:	42ab      	cmp	r3, r5
 800293a:	dc26      	bgt.n	800298a <_printf_common+0x96>
 800293c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002940:	1e13      	subs	r3, r2, #0
 8002942:	6822      	ldr	r2, [r4, #0]
 8002944:	bf18      	it	ne
 8002946:	2301      	movne	r3, #1
 8002948:	0692      	lsls	r2, r2, #26
 800294a:	d42b      	bmi.n	80029a4 <_printf_common+0xb0>
 800294c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002950:	4649      	mov	r1, r9
 8002952:	4638      	mov	r0, r7
 8002954:	47c0      	blx	r8
 8002956:	3001      	adds	r0, #1
 8002958:	d01e      	beq.n	8002998 <_printf_common+0xa4>
 800295a:	6823      	ldr	r3, [r4, #0]
 800295c:	68e5      	ldr	r5, [r4, #12]
 800295e:	6832      	ldr	r2, [r6, #0]
 8002960:	f003 0306 	and.w	r3, r3, #6
 8002964:	2b04      	cmp	r3, #4
 8002966:	bf08      	it	eq
 8002968:	1aad      	subeq	r5, r5, r2
 800296a:	68a3      	ldr	r3, [r4, #8]
 800296c:	6922      	ldr	r2, [r4, #16]
 800296e:	bf0c      	ite	eq
 8002970:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002974:	2500      	movne	r5, #0
 8002976:	4293      	cmp	r3, r2
 8002978:	bfc4      	itt	gt
 800297a:	1a9b      	subgt	r3, r3, r2
 800297c:	18ed      	addgt	r5, r5, r3
 800297e:	2600      	movs	r6, #0
 8002980:	341a      	adds	r4, #26
 8002982:	42b5      	cmp	r5, r6
 8002984:	d11a      	bne.n	80029bc <_printf_common+0xc8>
 8002986:	2000      	movs	r0, #0
 8002988:	e008      	b.n	800299c <_printf_common+0xa8>
 800298a:	2301      	movs	r3, #1
 800298c:	4652      	mov	r2, sl
 800298e:	4649      	mov	r1, r9
 8002990:	4638      	mov	r0, r7
 8002992:	47c0      	blx	r8
 8002994:	3001      	adds	r0, #1
 8002996:	d103      	bne.n	80029a0 <_printf_common+0xac>
 8002998:	f04f 30ff 	mov.w	r0, #4294967295
 800299c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029a0:	3501      	adds	r5, #1
 80029a2:	e7c6      	b.n	8002932 <_printf_common+0x3e>
 80029a4:	18e1      	adds	r1, r4, r3
 80029a6:	1c5a      	adds	r2, r3, #1
 80029a8:	2030      	movs	r0, #48	; 0x30
 80029aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80029ae:	4422      	add	r2, r4
 80029b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80029b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80029b8:	3302      	adds	r3, #2
 80029ba:	e7c7      	b.n	800294c <_printf_common+0x58>
 80029bc:	2301      	movs	r3, #1
 80029be:	4622      	mov	r2, r4
 80029c0:	4649      	mov	r1, r9
 80029c2:	4638      	mov	r0, r7
 80029c4:	47c0      	blx	r8
 80029c6:	3001      	adds	r0, #1
 80029c8:	d0e6      	beq.n	8002998 <_printf_common+0xa4>
 80029ca:	3601      	adds	r6, #1
 80029cc:	e7d9      	b.n	8002982 <_printf_common+0x8e>
	...

080029d0 <_printf_i>:
 80029d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80029d4:	460c      	mov	r4, r1
 80029d6:	4691      	mov	r9, r2
 80029d8:	7e27      	ldrb	r7, [r4, #24]
 80029da:	990c      	ldr	r1, [sp, #48]	; 0x30
 80029dc:	2f78      	cmp	r7, #120	; 0x78
 80029de:	4680      	mov	r8, r0
 80029e0:	469a      	mov	sl, r3
 80029e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80029e6:	d807      	bhi.n	80029f8 <_printf_i+0x28>
 80029e8:	2f62      	cmp	r7, #98	; 0x62
 80029ea:	d80a      	bhi.n	8002a02 <_printf_i+0x32>
 80029ec:	2f00      	cmp	r7, #0
 80029ee:	f000 80d8 	beq.w	8002ba2 <_printf_i+0x1d2>
 80029f2:	2f58      	cmp	r7, #88	; 0x58
 80029f4:	f000 80a3 	beq.w	8002b3e <_printf_i+0x16e>
 80029f8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80029fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002a00:	e03a      	b.n	8002a78 <_printf_i+0xa8>
 8002a02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002a06:	2b15      	cmp	r3, #21
 8002a08:	d8f6      	bhi.n	80029f8 <_printf_i+0x28>
 8002a0a:	a001      	add	r0, pc, #4	; (adr r0, 8002a10 <_printf_i+0x40>)
 8002a0c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002a10:	08002a69 	.word	0x08002a69
 8002a14:	08002a7d 	.word	0x08002a7d
 8002a18:	080029f9 	.word	0x080029f9
 8002a1c:	080029f9 	.word	0x080029f9
 8002a20:	080029f9 	.word	0x080029f9
 8002a24:	080029f9 	.word	0x080029f9
 8002a28:	08002a7d 	.word	0x08002a7d
 8002a2c:	080029f9 	.word	0x080029f9
 8002a30:	080029f9 	.word	0x080029f9
 8002a34:	080029f9 	.word	0x080029f9
 8002a38:	080029f9 	.word	0x080029f9
 8002a3c:	08002b89 	.word	0x08002b89
 8002a40:	08002aad 	.word	0x08002aad
 8002a44:	08002b6b 	.word	0x08002b6b
 8002a48:	080029f9 	.word	0x080029f9
 8002a4c:	080029f9 	.word	0x080029f9
 8002a50:	08002bab 	.word	0x08002bab
 8002a54:	080029f9 	.word	0x080029f9
 8002a58:	08002aad 	.word	0x08002aad
 8002a5c:	080029f9 	.word	0x080029f9
 8002a60:	080029f9 	.word	0x080029f9
 8002a64:	08002b73 	.word	0x08002b73
 8002a68:	680b      	ldr	r3, [r1, #0]
 8002a6a:	1d1a      	adds	r2, r3, #4
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	600a      	str	r2, [r1, #0]
 8002a70:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002a74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e0a3      	b.n	8002bc4 <_printf_i+0x1f4>
 8002a7c:	6825      	ldr	r5, [r4, #0]
 8002a7e:	6808      	ldr	r0, [r1, #0]
 8002a80:	062e      	lsls	r6, r5, #24
 8002a82:	f100 0304 	add.w	r3, r0, #4
 8002a86:	d50a      	bpl.n	8002a9e <_printf_i+0xce>
 8002a88:	6805      	ldr	r5, [r0, #0]
 8002a8a:	600b      	str	r3, [r1, #0]
 8002a8c:	2d00      	cmp	r5, #0
 8002a8e:	da03      	bge.n	8002a98 <_printf_i+0xc8>
 8002a90:	232d      	movs	r3, #45	; 0x2d
 8002a92:	426d      	negs	r5, r5
 8002a94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002a98:	485e      	ldr	r0, [pc, #376]	; (8002c14 <_printf_i+0x244>)
 8002a9a:	230a      	movs	r3, #10
 8002a9c:	e019      	b.n	8002ad2 <_printf_i+0x102>
 8002a9e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002aa2:	6805      	ldr	r5, [r0, #0]
 8002aa4:	600b      	str	r3, [r1, #0]
 8002aa6:	bf18      	it	ne
 8002aa8:	b22d      	sxthne	r5, r5
 8002aaa:	e7ef      	b.n	8002a8c <_printf_i+0xbc>
 8002aac:	680b      	ldr	r3, [r1, #0]
 8002aae:	6825      	ldr	r5, [r4, #0]
 8002ab0:	1d18      	adds	r0, r3, #4
 8002ab2:	6008      	str	r0, [r1, #0]
 8002ab4:	0628      	lsls	r0, r5, #24
 8002ab6:	d501      	bpl.n	8002abc <_printf_i+0xec>
 8002ab8:	681d      	ldr	r5, [r3, #0]
 8002aba:	e002      	b.n	8002ac2 <_printf_i+0xf2>
 8002abc:	0669      	lsls	r1, r5, #25
 8002abe:	d5fb      	bpl.n	8002ab8 <_printf_i+0xe8>
 8002ac0:	881d      	ldrh	r5, [r3, #0]
 8002ac2:	4854      	ldr	r0, [pc, #336]	; (8002c14 <_printf_i+0x244>)
 8002ac4:	2f6f      	cmp	r7, #111	; 0x6f
 8002ac6:	bf0c      	ite	eq
 8002ac8:	2308      	moveq	r3, #8
 8002aca:	230a      	movne	r3, #10
 8002acc:	2100      	movs	r1, #0
 8002ace:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002ad2:	6866      	ldr	r6, [r4, #4]
 8002ad4:	60a6      	str	r6, [r4, #8]
 8002ad6:	2e00      	cmp	r6, #0
 8002ad8:	bfa2      	ittt	ge
 8002ada:	6821      	ldrge	r1, [r4, #0]
 8002adc:	f021 0104 	bicge.w	r1, r1, #4
 8002ae0:	6021      	strge	r1, [r4, #0]
 8002ae2:	b90d      	cbnz	r5, 8002ae8 <_printf_i+0x118>
 8002ae4:	2e00      	cmp	r6, #0
 8002ae6:	d04d      	beq.n	8002b84 <_printf_i+0x1b4>
 8002ae8:	4616      	mov	r6, r2
 8002aea:	fbb5 f1f3 	udiv	r1, r5, r3
 8002aee:	fb03 5711 	mls	r7, r3, r1, r5
 8002af2:	5dc7      	ldrb	r7, [r0, r7]
 8002af4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002af8:	462f      	mov	r7, r5
 8002afa:	42bb      	cmp	r3, r7
 8002afc:	460d      	mov	r5, r1
 8002afe:	d9f4      	bls.n	8002aea <_printf_i+0x11a>
 8002b00:	2b08      	cmp	r3, #8
 8002b02:	d10b      	bne.n	8002b1c <_printf_i+0x14c>
 8002b04:	6823      	ldr	r3, [r4, #0]
 8002b06:	07df      	lsls	r7, r3, #31
 8002b08:	d508      	bpl.n	8002b1c <_printf_i+0x14c>
 8002b0a:	6923      	ldr	r3, [r4, #16]
 8002b0c:	6861      	ldr	r1, [r4, #4]
 8002b0e:	4299      	cmp	r1, r3
 8002b10:	bfde      	ittt	le
 8002b12:	2330      	movle	r3, #48	; 0x30
 8002b14:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002b18:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002b1c:	1b92      	subs	r2, r2, r6
 8002b1e:	6122      	str	r2, [r4, #16]
 8002b20:	f8cd a000 	str.w	sl, [sp]
 8002b24:	464b      	mov	r3, r9
 8002b26:	aa03      	add	r2, sp, #12
 8002b28:	4621      	mov	r1, r4
 8002b2a:	4640      	mov	r0, r8
 8002b2c:	f7ff fee2 	bl	80028f4 <_printf_common>
 8002b30:	3001      	adds	r0, #1
 8002b32:	d14c      	bne.n	8002bce <_printf_i+0x1fe>
 8002b34:	f04f 30ff 	mov.w	r0, #4294967295
 8002b38:	b004      	add	sp, #16
 8002b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b3e:	4835      	ldr	r0, [pc, #212]	; (8002c14 <_printf_i+0x244>)
 8002b40:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002b44:	6823      	ldr	r3, [r4, #0]
 8002b46:	680e      	ldr	r6, [r1, #0]
 8002b48:	061f      	lsls	r7, r3, #24
 8002b4a:	f856 5b04 	ldr.w	r5, [r6], #4
 8002b4e:	600e      	str	r6, [r1, #0]
 8002b50:	d514      	bpl.n	8002b7c <_printf_i+0x1ac>
 8002b52:	07d9      	lsls	r1, r3, #31
 8002b54:	bf44      	itt	mi
 8002b56:	f043 0320 	orrmi.w	r3, r3, #32
 8002b5a:	6023      	strmi	r3, [r4, #0]
 8002b5c:	b91d      	cbnz	r5, 8002b66 <_printf_i+0x196>
 8002b5e:	6823      	ldr	r3, [r4, #0]
 8002b60:	f023 0320 	bic.w	r3, r3, #32
 8002b64:	6023      	str	r3, [r4, #0]
 8002b66:	2310      	movs	r3, #16
 8002b68:	e7b0      	b.n	8002acc <_printf_i+0xfc>
 8002b6a:	6823      	ldr	r3, [r4, #0]
 8002b6c:	f043 0320 	orr.w	r3, r3, #32
 8002b70:	6023      	str	r3, [r4, #0]
 8002b72:	2378      	movs	r3, #120	; 0x78
 8002b74:	4828      	ldr	r0, [pc, #160]	; (8002c18 <_printf_i+0x248>)
 8002b76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002b7a:	e7e3      	b.n	8002b44 <_printf_i+0x174>
 8002b7c:	065e      	lsls	r6, r3, #25
 8002b7e:	bf48      	it	mi
 8002b80:	b2ad      	uxthmi	r5, r5
 8002b82:	e7e6      	b.n	8002b52 <_printf_i+0x182>
 8002b84:	4616      	mov	r6, r2
 8002b86:	e7bb      	b.n	8002b00 <_printf_i+0x130>
 8002b88:	680b      	ldr	r3, [r1, #0]
 8002b8a:	6826      	ldr	r6, [r4, #0]
 8002b8c:	6960      	ldr	r0, [r4, #20]
 8002b8e:	1d1d      	adds	r5, r3, #4
 8002b90:	600d      	str	r5, [r1, #0]
 8002b92:	0635      	lsls	r5, r6, #24
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	d501      	bpl.n	8002b9c <_printf_i+0x1cc>
 8002b98:	6018      	str	r0, [r3, #0]
 8002b9a:	e002      	b.n	8002ba2 <_printf_i+0x1d2>
 8002b9c:	0671      	lsls	r1, r6, #25
 8002b9e:	d5fb      	bpl.n	8002b98 <_printf_i+0x1c8>
 8002ba0:	8018      	strh	r0, [r3, #0]
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	6123      	str	r3, [r4, #16]
 8002ba6:	4616      	mov	r6, r2
 8002ba8:	e7ba      	b.n	8002b20 <_printf_i+0x150>
 8002baa:	680b      	ldr	r3, [r1, #0]
 8002bac:	1d1a      	adds	r2, r3, #4
 8002bae:	600a      	str	r2, [r1, #0]
 8002bb0:	681e      	ldr	r6, [r3, #0]
 8002bb2:	6862      	ldr	r2, [r4, #4]
 8002bb4:	2100      	movs	r1, #0
 8002bb6:	4630      	mov	r0, r6
 8002bb8:	f7fd fb0a 	bl	80001d0 <memchr>
 8002bbc:	b108      	cbz	r0, 8002bc2 <_printf_i+0x1f2>
 8002bbe:	1b80      	subs	r0, r0, r6
 8002bc0:	6060      	str	r0, [r4, #4]
 8002bc2:	6863      	ldr	r3, [r4, #4]
 8002bc4:	6123      	str	r3, [r4, #16]
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002bcc:	e7a8      	b.n	8002b20 <_printf_i+0x150>
 8002bce:	6923      	ldr	r3, [r4, #16]
 8002bd0:	4632      	mov	r2, r6
 8002bd2:	4649      	mov	r1, r9
 8002bd4:	4640      	mov	r0, r8
 8002bd6:	47d0      	blx	sl
 8002bd8:	3001      	adds	r0, #1
 8002bda:	d0ab      	beq.n	8002b34 <_printf_i+0x164>
 8002bdc:	6823      	ldr	r3, [r4, #0]
 8002bde:	079b      	lsls	r3, r3, #30
 8002be0:	d413      	bmi.n	8002c0a <_printf_i+0x23a>
 8002be2:	68e0      	ldr	r0, [r4, #12]
 8002be4:	9b03      	ldr	r3, [sp, #12]
 8002be6:	4298      	cmp	r0, r3
 8002be8:	bfb8      	it	lt
 8002bea:	4618      	movlt	r0, r3
 8002bec:	e7a4      	b.n	8002b38 <_printf_i+0x168>
 8002bee:	2301      	movs	r3, #1
 8002bf0:	4632      	mov	r2, r6
 8002bf2:	4649      	mov	r1, r9
 8002bf4:	4640      	mov	r0, r8
 8002bf6:	47d0      	blx	sl
 8002bf8:	3001      	adds	r0, #1
 8002bfa:	d09b      	beq.n	8002b34 <_printf_i+0x164>
 8002bfc:	3501      	adds	r5, #1
 8002bfe:	68e3      	ldr	r3, [r4, #12]
 8002c00:	9903      	ldr	r1, [sp, #12]
 8002c02:	1a5b      	subs	r3, r3, r1
 8002c04:	42ab      	cmp	r3, r5
 8002c06:	dcf2      	bgt.n	8002bee <_printf_i+0x21e>
 8002c08:	e7eb      	b.n	8002be2 <_printf_i+0x212>
 8002c0a:	2500      	movs	r5, #0
 8002c0c:	f104 0619 	add.w	r6, r4, #25
 8002c10:	e7f5      	b.n	8002bfe <_printf_i+0x22e>
 8002c12:	bf00      	nop
 8002c14:	08002f35 	.word	0x08002f35
 8002c18:	08002f46 	.word	0x08002f46

08002c1c <_sbrk_r>:
 8002c1c:	b538      	push	{r3, r4, r5, lr}
 8002c1e:	4d06      	ldr	r5, [pc, #24]	; (8002c38 <_sbrk_r+0x1c>)
 8002c20:	2300      	movs	r3, #0
 8002c22:	4604      	mov	r4, r0
 8002c24:	4608      	mov	r0, r1
 8002c26:	602b      	str	r3, [r5, #0]
 8002c28:	f7fe f8f6 	bl	8000e18 <_sbrk>
 8002c2c:	1c43      	adds	r3, r0, #1
 8002c2e:	d102      	bne.n	8002c36 <_sbrk_r+0x1a>
 8002c30:	682b      	ldr	r3, [r5, #0]
 8002c32:	b103      	cbz	r3, 8002c36 <_sbrk_r+0x1a>
 8002c34:	6023      	str	r3, [r4, #0]
 8002c36:	bd38      	pop	{r3, r4, r5, pc}
 8002c38:	200002fc 	.word	0x200002fc

08002c3c <__sread>:
 8002c3c:	b510      	push	{r4, lr}
 8002c3e:	460c      	mov	r4, r1
 8002c40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c44:	f000 f8a0 	bl	8002d88 <_read_r>
 8002c48:	2800      	cmp	r0, #0
 8002c4a:	bfab      	itete	ge
 8002c4c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002c4e:	89a3      	ldrhlt	r3, [r4, #12]
 8002c50:	181b      	addge	r3, r3, r0
 8002c52:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002c56:	bfac      	ite	ge
 8002c58:	6563      	strge	r3, [r4, #84]	; 0x54
 8002c5a:	81a3      	strhlt	r3, [r4, #12]
 8002c5c:	bd10      	pop	{r4, pc}

08002c5e <__swrite>:
 8002c5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c62:	461f      	mov	r7, r3
 8002c64:	898b      	ldrh	r3, [r1, #12]
 8002c66:	05db      	lsls	r3, r3, #23
 8002c68:	4605      	mov	r5, r0
 8002c6a:	460c      	mov	r4, r1
 8002c6c:	4616      	mov	r6, r2
 8002c6e:	d505      	bpl.n	8002c7c <__swrite+0x1e>
 8002c70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c74:	2302      	movs	r3, #2
 8002c76:	2200      	movs	r2, #0
 8002c78:	f000 f868 	bl	8002d4c <_lseek_r>
 8002c7c:	89a3      	ldrh	r3, [r4, #12]
 8002c7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002c82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c86:	81a3      	strh	r3, [r4, #12]
 8002c88:	4632      	mov	r2, r6
 8002c8a:	463b      	mov	r3, r7
 8002c8c:	4628      	mov	r0, r5
 8002c8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002c92:	f000 b817 	b.w	8002cc4 <_write_r>

08002c96 <__sseek>:
 8002c96:	b510      	push	{r4, lr}
 8002c98:	460c      	mov	r4, r1
 8002c9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c9e:	f000 f855 	bl	8002d4c <_lseek_r>
 8002ca2:	1c43      	adds	r3, r0, #1
 8002ca4:	89a3      	ldrh	r3, [r4, #12]
 8002ca6:	bf15      	itete	ne
 8002ca8:	6560      	strne	r0, [r4, #84]	; 0x54
 8002caa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002cae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002cb2:	81a3      	strheq	r3, [r4, #12]
 8002cb4:	bf18      	it	ne
 8002cb6:	81a3      	strhne	r3, [r4, #12]
 8002cb8:	bd10      	pop	{r4, pc}

08002cba <__sclose>:
 8002cba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002cbe:	f000 b813 	b.w	8002ce8 <_close_r>
	...

08002cc4 <_write_r>:
 8002cc4:	b538      	push	{r3, r4, r5, lr}
 8002cc6:	4d07      	ldr	r5, [pc, #28]	; (8002ce4 <_write_r+0x20>)
 8002cc8:	4604      	mov	r4, r0
 8002cca:	4608      	mov	r0, r1
 8002ccc:	4611      	mov	r1, r2
 8002cce:	2200      	movs	r2, #0
 8002cd0:	602a      	str	r2, [r5, #0]
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	f7fe f884 	bl	8000de0 <_write>
 8002cd8:	1c43      	adds	r3, r0, #1
 8002cda:	d102      	bne.n	8002ce2 <_write_r+0x1e>
 8002cdc:	682b      	ldr	r3, [r5, #0]
 8002cde:	b103      	cbz	r3, 8002ce2 <_write_r+0x1e>
 8002ce0:	6023      	str	r3, [r4, #0]
 8002ce2:	bd38      	pop	{r3, r4, r5, pc}
 8002ce4:	200002fc 	.word	0x200002fc

08002ce8 <_close_r>:
 8002ce8:	b538      	push	{r3, r4, r5, lr}
 8002cea:	4d06      	ldr	r5, [pc, #24]	; (8002d04 <_close_r+0x1c>)
 8002cec:	2300      	movs	r3, #0
 8002cee:	4604      	mov	r4, r0
 8002cf0:	4608      	mov	r0, r1
 8002cf2:	602b      	str	r3, [r5, #0]
 8002cf4:	f7fe f882 	bl	8000dfc <_close>
 8002cf8:	1c43      	adds	r3, r0, #1
 8002cfa:	d102      	bne.n	8002d02 <_close_r+0x1a>
 8002cfc:	682b      	ldr	r3, [r5, #0]
 8002cfe:	b103      	cbz	r3, 8002d02 <_close_r+0x1a>
 8002d00:	6023      	str	r3, [r4, #0]
 8002d02:	bd38      	pop	{r3, r4, r5, pc}
 8002d04:	200002fc 	.word	0x200002fc

08002d08 <_fstat_r>:
 8002d08:	b538      	push	{r3, r4, r5, lr}
 8002d0a:	4d07      	ldr	r5, [pc, #28]	; (8002d28 <_fstat_r+0x20>)
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	4604      	mov	r4, r0
 8002d10:	4608      	mov	r0, r1
 8002d12:	4611      	mov	r1, r2
 8002d14:	602b      	str	r3, [r5, #0]
 8002d16:	f7fe f875 	bl	8000e04 <_fstat>
 8002d1a:	1c43      	adds	r3, r0, #1
 8002d1c:	d102      	bne.n	8002d24 <_fstat_r+0x1c>
 8002d1e:	682b      	ldr	r3, [r5, #0]
 8002d20:	b103      	cbz	r3, 8002d24 <_fstat_r+0x1c>
 8002d22:	6023      	str	r3, [r4, #0]
 8002d24:	bd38      	pop	{r3, r4, r5, pc}
 8002d26:	bf00      	nop
 8002d28:	200002fc 	.word	0x200002fc

08002d2c <_isatty_r>:
 8002d2c:	b538      	push	{r3, r4, r5, lr}
 8002d2e:	4d06      	ldr	r5, [pc, #24]	; (8002d48 <_isatty_r+0x1c>)
 8002d30:	2300      	movs	r3, #0
 8002d32:	4604      	mov	r4, r0
 8002d34:	4608      	mov	r0, r1
 8002d36:	602b      	str	r3, [r5, #0]
 8002d38:	f7fe f86a 	bl	8000e10 <_isatty>
 8002d3c:	1c43      	adds	r3, r0, #1
 8002d3e:	d102      	bne.n	8002d46 <_isatty_r+0x1a>
 8002d40:	682b      	ldr	r3, [r5, #0]
 8002d42:	b103      	cbz	r3, 8002d46 <_isatty_r+0x1a>
 8002d44:	6023      	str	r3, [r4, #0]
 8002d46:	bd38      	pop	{r3, r4, r5, pc}
 8002d48:	200002fc 	.word	0x200002fc

08002d4c <_lseek_r>:
 8002d4c:	b538      	push	{r3, r4, r5, lr}
 8002d4e:	4d07      	ldr	r5, [pc, #28]	; (8002d6c <_lseek_r+0x20>)
 8002d50:	4604      	mov	r4, r0
 8002d52:	4608      	mov	r0, r1
 8002d54:	4611      	mov	r1, r2
 8002d56:	2200      	movs	r2, #0
 8002d58:	602a      	str	r2, [r5, #0]
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	f7fe f85a 	bl	8000e14 <_lseek>
 8002d60:	1c43      	adds	r3, r0, #1
 8002d62:	d102      	bne.n	8002d6a <_lseek_r+0x1e>
 8002d64:	682b      	ldr	r3, [r5, #0]
 8002d66:	b103      	cbz	r3, 8002d6a <_lseek_r+0x1e>
 8002d68:	6023      	str	r3, [r4, #0]
 8002d6a:	bd38      	pop	{r3, r4, r5, pc}
 8002d6c:	200002fc 	.word	0x200002fc

08002d70 <__malloc_lock>:
 8002d70:	4801      	ldr	r0, [pc, #4]	; (8002d78 <__malloc_lock+0x8>)
 8002d72:	f7ff bb55 	b.w	8002420 <__retarget_lock_acquire_recursive>
 8002d76:	bf00      	nop
 8002d78:	200002f4 	.word	0x200002f4

08002d7c <__malloc_unlock>:
 8002d7c:	4801      	ldr	r0, [pc, #4]	; (8002d84 <__malloc_unlock+0x8>)
 8002d7e:	f7ff bb50 	b.w	8002422 <__retarget_lock_release_recursive>
 8002d82:	bf00      	nop
 8002d84:	200002f4 	.word	0x200002f4

08002d88 <_read_r>:
 8002d88:	b538      	push	{r3, r4, r5, lr}
 8002d8a:	4d07      	ldr	r5, [pc, #28]	; (8002da8 <_read_r+0x20>)
 8002d8c:	4604      	mov	r4, r0
 8002d8e:	4608      	mov	r0, r1
 8002d90:	4611      	mov	r1, r2
 8002d92:	2200      	movs	r2, #0
 8002d94:	602a      	str	r2, [r5, #0]
 8002d96:	461a      	mov	r2, r3
 8002d98:	f7fe f814 	bl	8000dc4 <_read>
 8002d9c:	1c43      	adds	r3, r0, #1
 8002d9e:	d102      	bne.n	8002da6 <_read_r+0x1e>
 8002da0:	682b      	ldr	r3, [r5, #0]
 8002da2:	b103      	cbz	r3, 8002da6 <_read_r+0x1e>
 8002da4:	6023      	str	r3, [r4, #0]
 8002da6:	bd38      	pop	{r3, r4, r5, pc}
 8002da8:	200002fc 	.word	0x200002fc

08002dac <_init>:
 8002dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dae:	bf00      	nop
 8002db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002db2:	bc08      	pop	{r3}
 8002db4:	469e      	mov	lr, r3
 8002db6:	4770      	bx	lr

08002db8 <_fini>:
 8002db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dba:	bf00      	nop
 8002dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dbe:	bc08      	pop	{r3}
 8002dc0:	469e      	mov	lr, r3
 8002dc2:	4770      	bx	lr
